#!/usr/bin/env bash
#
# Filename: convert_2gram_csv_to_json.sh
# Description: This script converts the 2-gram analysis CSV file (2gram.csv)
#              into a JSON array of objects. Each object represents a row
#              from the CSV with 'count', 'owner', and 'repo' keys.
#
# Usage:
#   ./convert_2gram_csv_to_json.sh
#
# Input:
#   - 2gram.csv (located in the project root, generated by generate_repo_2gram_csv.sh)
#
# Output:
#   - 2gram.json (located in the project root, containing the JSON representation)
#
# Nix Flakes Context:
#   This conversion facilitates easier consumption of the 2-gram analysis data
#   within Nix flakes. Nix's built-in JSON parsing capabilities allow the flake
#   to directly read and process this structured data, enabling dynamic generation
#   of Nix expressions or attributes based on the repository analysis.
#

# Determine the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# Define paths relative to the script's location
INPUT_CSV="${SCRIPT_DIR}/../../2gram.csv"
OUTPUT_JSON="${SCRIPT_DIR}/../../2gram.json"

# Check if the input CSV file exists
if [ ! -f "$INPUT_CSV" ]; then
  echo "Error: Input CSV file not found at $INPUT_CSV"
  exit 1
fi

# Convert CSV to JSON using awk
# Skip header (NR==1)
# For each subsequent line, format as JSON object
# Join objects with commas and wrap in a JSON array
awk \
'\
BEGIN {
  FS=",";
  print "["; # Start JSON array
  first = 1;
}
NR == 1 { next; } # Skip header row
{
  if (!first) {
    print ","; # Add comma before subsequent objects
  }
  printf "  {\"count\": %s, \"owner\": \"%s\", \"repo\": \"%s\"}", $1, $2, $3;
  first = 0;
}
END {
  print "\n]" # End JSON array
}' "$INPUT_CSV" > "$OUTPUT_JSON"

echo "CSV converted to JSON and saved to $OUTPUT_JSON"
