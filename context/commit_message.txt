

feat: Implement and test repo-data-flake usage, update flake URLs, and enhance workflow

This commit addresses several key aspects of the project's Nix flake infrastructure:

- **Refactored `repo-data-flake`**: Modified `flakes/repo-data-flake/flake.nix` to provide dummy `repoAttrs` and `repo2gramJson` outputs, resolving discrepancies with their usage in other flakes. This ensures the flake can be evaluated without errors while the actual data generation logic is developed.

- **Standardized Flake URLs**: Updated all local flake references in `flake.nix` (main flake) and the newly created test flakes to use GitHub URLs, adhering to the project's new policy for Nix flake references.

- **Updated `nixpkgs` Input**: Replaced `github:NixOS/nixpkgs/nixos-unstable` with `github:meta-introspector/nixpkgs?ref=feature/CRQ-016-nixify` across `repo-data-flake/flake.nix` and all test flakes for consistency and adherence to project standards.

- **Introduced `repo-data-flake.lib` Usage Tests**: Created three standalone test flakes (`tests/repo-data-flake-lib-usage/test-ai-ml-zk-ops-flake.nix`, `tests/repo-data-flake-lib-usage/test-repo-packages-flake.nix`, `tests/repo-data-flake-lib-usage/test-default-package-flake.nix`) to verify that `repo-data-flake.lib.repoAttrs` and `repo-data-flake.lib.repoData` are correctly exposed and resolve to their expected (currently empty) values.

- **Enhanced `run_workflow.sh`**: Integrated a `nix flake check` command for the main `ai-ml-zk-ops` flake into `run_workflow.sh` to ensure early detection of flake-related issues. The script also now correctly handles `git push` after successful commits.

These changes improve the robustness, maintainability, and adherence to project standards for the Nix flake ecosystem.