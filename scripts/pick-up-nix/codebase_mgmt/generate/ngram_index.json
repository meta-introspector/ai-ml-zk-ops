  "/data/data/com.termux.nix/files/home/nix/scripts/": {
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/cli/run_gemini.sh": {
      "1-gram": {
"script": 2,"i": 1,"probably": 1,"with": 1,"flake": 1,"launches": 1,"what": 1,"file:": 1,"this": 2,""do": 1,""dwim"": 1,"run": 2,"run_gemini.sh": 1,"==============================================================================": 2,"gemini": 1,"`gemini-cli`": 1,"the": 3,""$@"": 1,"using": 1,"cli": 1,"to": 1,"wrapper": 1,"a": 1,"bash": 1,"run`.": 1,"nix": 1,"exec": 1,"`nix": 1,"description:": 1,"usage:": 1,"#": 11,".#gemini-cli": 1,"project's": 1,"mean".": 1,"./scripts/cli/run_gemini.sh": 1,"#!/usr/bin/env": 1,"--": 1,"configuration.": 1,"means": 1,"is": 1      }
,
      "2-gram": {
"run .#gemini-cli": 1,"nix run": 1,"gemini cli": 1,"# this": 1,"the `gemini-cli`": 1,"# description:": 1,"# usage:": 1,"the project's": 1,"launches the": 1,""do what": 1,"is a": 1,"file: run_gemini.sh": 1,"exec nix": 1,"project's flake": 1,"cli using": 1,"i mean".": 1,"`nix run`.": 1,"description: this": 1,"a wrapper": 1,"this script": 2,"configuration. exec": 1,"flake configuration.": 1,"mean". #": 1,"to run": 1,"bash #": 1,"run`. #": 1,"with `nix": 1,"run the": 1,"usage: ./scripts/cli/run_gemini.sh": 1,"# #": 4,"using the": 1,"what i": 1,""dwim" probably": 1,"# "dwim"": 1,"wrapper to": 1,"script is": 1,"run_gemini.sh #": 1,"# file:": 1,"#!/usr/bin/env bash": 1,"-- "$@"": 1,"`gemini-cli` with": 1,"./scripts/cli/run_gemini.sh #": 1,"============================================================================== #": 2,"the gemini": 1,"script launches": 1,"# ==============================================================================": 2,".#gemini-cli --": 1,"means "do": 1,"probably means": 1      }
,
      "3-gram": {
"`nix run`. #": 1,"is a wrapper": 1,"# # usage:": 1,"exec nix run": 1,"what i mean".": 1,"# description: this": 1,"run_gemini.sh # #": 1,"file: run_gemini.sh #": 1,"#!/usr/bin/env bash #": 1,"configuration. exec nix": 1,"flake configuration. exec": 1,"gemini cli using": 1,"============================================================================== # #": 1,"project's flake configuration.": 1,"script launches the": 1,"i mean". #": 1,"run the `gemini-cli`": 1,"run .#gemini-cli --": 1,"nix run .#gemini-cli": 1,"the gemini cli": 1,"launches the gemini": 1,"bash # ==============================================================================": 1,".#gemini-cli -- "$@"": 1,"# this script": 1,"run`. # "dwim"": 1,"# ============================================================================== #": 2,"# # ==============================================================================": 1,"mean". # #": 1,"with `nix run`.": 1,"wrapper to run": 1,"script is a": 1,"this script is": 1,"# # description:": 1,"# # file:": 1,"a wrapper to": 1,"description: this script": 1,"============================================================================== # this": 1,""dwim" probably means": 1,"./scripts/cli/run_gemini.sh # #": 1,"usage: ./scripts/cli/run_gemini.sh #": 1,"# usage: ./scripts/cli/run_gemini.sh": 1,"# file: run_gemini.sh": 1,"the project's flake": 1,"the `gemini-cli` with": 1,"probably means "do": 1,"using the project's": 1,"cli using the": 1,"this script launches": 1,""do what i": 1,"means "do what": 1,"# "dwim" probably": 1,"`gemini-cli` with `nix": 1,"to run the": 1      }
,
      "5-gram": {
"exec nix run .#gemini-cli --": 1,"run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh": 1,"# ============================================================================== # # file:": 1,"`nix run`. # "dwim" probably": 1,"flake configuration. exec nix run": 1,"gemini cli using the project's": 1,"this script launches the gemini": 1,"probably means "do what i": 1,"with `nix run`. # "dwim"": 1,"nix run .#gemini-cli -- "$@"": 1,"using the project's flake configuration.": 1,""dwim" probably means "do what": 1,"the `gemini-cli` with `nix run`.": 1,"run the `gemini-cli` with `nix": 1,"# # usage: ./scripts/cli/run_gemini.sh #": 1,"project's flake configuration. exec nix": 1,"launches the gemini cli using": 1,"script launches the gemini cli": 1,"============================================================================== # this script launches": 1,"i mean". # # ==============================================================================": 1,"run`. # "dwim" probably means": 1,"description: this script is a": 1,"usage: ./scripts/cli/run_gemini.sh # # description:": 1,"this script is a wrapper": 1,"bash # ============================================================================== # #": 1,"wrapper to run the `gemini-cli`": 1,"# description: this script is": 1,"# # file: run_gemini.sh #": 1,"# usage: ./scripts/cli/run_gemini.sh # #": 1,"============================================================================== # # file: run_gemini.sh": 1,"the gemini cli using the": 1,"# ============================================================================== # this script": 1,"to run the `gemini-cli` with": 1,"file: run_gemini.sh # # usage:": 1,"# this script launches the": 1,""do what i mean". #": 1,"# file: run_gemini.sh # #": 1,"configuration. exec nix run .#gemini-cli": 1,"the project's flake configuration. exec": 1,"# # ============================================================================== # this": 1,"means "do what i mean".": 1,"# "dwim" probably means "do": 1,"`gemini-cli` with `nix run`. #": 1,"script is a wrapper to": 1,"# # description: this script": 1,"./scripts/cli/run_gemini.sh # # description: this": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"cli using the project's flake": 1,"mean". # # ============================================================================== #": 1,"what i mean". # #": 1,"a wrapper to run the": 1,"is a wrapper to run": 1      }
,
      "7-gram": {
"configuration. exec nix run .#gemini-cli -- "$@"": 1,"cli using the project's flake configuration. exec": 1,"i mean". # # ============================================================================== # this": 1,"file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh #": 1,"script is a wrapper to run the": 1,"./scripts/cli/run_gemini.sh # # description: this script is": 1,"# # file: run_gemini.sh # # usage:": 1,"flake configuration. exec nix run .#gemini-cli --": 1,"# ============================================================================== # this script launches the": 1,"# # ============================================================================== # this script launches": 1,"`nix run`. # "dwim" probably means "do": 1,"with `nix run`. # "dwim" probably means": 1,"# description: this script is a wrapper": 1,"bash # ============================================================================== # # file: run_gemini.sh": 1,"using the project's flake configuration. exec nix": 1,"gemini cli using the project's flake configuration.": 1,"# this script launches the gemini cli": 1,"run`. # "dwim" probably means "do what": 1,"to run the `gemini-cli` with `nix run`.": 1,""do what i mean". # # ==============================================================================": 1,""dwim" probably means "do what i mean".": 1,"run the `gemini-cli` with `nix run`. #": 1,"# usage: ./scripts/cli/run_gemini.sh # # description: this": 1,"mean". # # ============================================================================== # this script": 1,"description: this script is a wrapper to": 1,"run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # #": 1,"============================================================================== # # file: run_gemini.sh # #": 1,"what i mean". # # ============================================================================== #": 1,"means "do what i mean". # #": 1,"this script is a wrapper to run": 1,"script launches the gemini cli using the": 1,"this script launches the gemini cli using": 1,"is a wrapper to run the `gemini-cli`": 1,"usage: ./scripts/cli/run_gemini.sh # # description: this script": 1,"# "dwim" probably means "do what i": 1,"the project's flake configuration. exec nix run": 1,"`gemini-cli` with `nix run`. # "dwim" probably": 1,"# ============================================================================== # # file: run_gemini.sh #": 1,"============================================================================== # this script launches the gemini": 1,"a wrapper to run the `gemini-cli` with": 1,"# # description: this script is a": 1,"launches the gemini cli using the project's": 1,"probably means "do what i mean". #": 1,"# # usage: ./scripts/cli/run_gemini.sh # # description:": 1,"project's flake configuration. exec nix run .#gemini-cli": 1,"the gemini cli using the project's flake": 1,"the `gemini-cli` with `nix run`. # "dwim"": 1,"wrapper to run the `gemini-cli` with `nix": 1,"# file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1      }
,
      "11-gram": {
"============================================================================== # this script launches the gemini cli using the project's": 1,"run`. # "dwim" probably means "do what i mean". # #": 1,"`nix run`. # "dwim" probably means "do what i mean". #": 1,"# # description: this script is a wrapper to run the": 1,"usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to": 1,"# # usage: ./scripts/cli/run_gemini.sh # # description: this script is a": 1,"file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script": 1,"bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh": 1,"using the project's flake configuration. exec nix run .#gemini-cli -- "$@"": 1,"cli using the project's flake configuration. exec nix run .#gemini-cli --": 1,"description: this script is a wrapper to run the `gemini-cli` with": 1,"script launches the gemini cli using the project's flake configuration. exec": 1,"with `nix run`. # "dwim" probably means "do what i mean".": 1,"the `gemini-cli` with `nix run`. # "dwim" probably means "do what": 1,"wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably": 1,"# # ============================================================================== # this script launches the gemini cli using": 1,"i mean". # # ============================================================================== # this script launches the gemini": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini.sh # # usage:": 1,"the gemini cli using the project's flake configuration. exec nix run": 1,"# description: this script is a wrapper to run the `gemini-cli`": 1,"launches the gemini cli using the project's flake configuration. exec nix": 1,"is a wrapper to run the `gemini-cli` with `nix run`. #": 1,"probably means "do what i mean". # # ============================================================================== # this": 1,"`gemini-cli` with `nix run`. # "dwim" probably means "do what i": 1,"to run the `gemini-cli` with `nix run`. # "dwim" probably means": 1,"./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run": 1,"# # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description:": 1,"this script launches the gemini cli using the project's flake configuration.": 1,"mean". # # ============================================================================== # this script launches the gemini cli": 1,"what i mean". # # ============================================================================== # this script launches the": 1,"# ============================================================================== # this script launches the gemini cli using the": 1,"run the `gemini-cli` with `nix run`. # "dwim" probably means "do": 1,"# usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper": 1,""do what i mean". # # ============================================================================== # this script launches": 1,"a wrapper to run the `gemini-cli` with `nix run`. # "dwim"": 1,"this script is a wrapper to run the `gemini-cli` with `nix": 1,"means "do what i mean". # # ============================================================================== # this script": 1,""dwim" probably means "do what i mean". # # ============================================================================== #": 1,"gemini cli using the project's flake configuration. exec nix run .#gemini-cli": 1,"# "dwim" probably means "do what i mean". # # ==============================================================================": 1,"script is a wrapper to run the `gemini-cli` with `nix run`.": 1,"# file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this": 1,"# this script launches the gemini cli using the project's flake": 1,"run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is": 1,"============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # #": 1,"# ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh #": 1      }
,
      "13-gram": {
"the gemini cli using the project's flake configuration. exec nix run .#gemini-cli --": 1,"what i mean". # # ============================================================================== # this script launches the gemini cli": 1,"# "dwim" probably means "do what i mean". # # ============================================================================== # this": 1,"./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli`": 1,"run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper": 1,"============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this": 1,"# ============================================================================== # this script launches the gemini cli using the project's flake": 1,"# # ============================================================================== # this script launches the gemini cli using the project's": 1,"wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do": 1,"is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably": 1,"# file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is": 1,"i mean". # # ============================================================================== # this script launches the gemini cli using": 1,"run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i": 1,"# # description: this script is a wrapper to run the `gemini-cli` with": 1,"usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the": 1,"# ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description:": 1,"bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # #": 1,"mean". # # ============================================================================== # this script launches the gemini cli using the": 1,"with `nix run`. # "dwim" probably means "do what i mean". # #": 1,"# # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to": 1,"means "do what i mean". # # ============================================================================== # this script launches the": 1,"run`. # "dwim" probably means "do what i mean". # # ============================================================================== #": 1,"`nix run`. # "dwim" probably means "do what i mean". # # ==============================================================================": 1,"launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli": 1,"`gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". #": 1,"the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean".": 1,"to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh #": 1,""do what i mean". # # ============================================================================== # this script launches the gemini": 1,"description: this script is a wrapper to run the `gemini-cli` with `nix run`.": 1,"script launches the gemini cli using the project's flake configuration. exec nix run": 1,"this script launches the gemini cli using the project's flake configuration. exec nix": 1,""dwim" probably means "do what i mean". # # ============================================================================== # this script": 1,"script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim"": 1,"probably means "do what i mean". # # ============================================================================== # this script launches": 1,"# description: this script is a wrapper to run the `gemini-cli` with `nix": 1,"# # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script": 1,"============================================================================== # this script launches the gemini cli using the project's flake configuration.": 1,"a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means": 1,"this script is a wrapper to run the `gemini-cli` with `nix run`. #": 1,"# usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run": 1,"gemini cli using the project's flake configuration. exec nix run .#gemini-cli -- "$@"": 1,"# this script launches the gemini cli using the project's flake configuration. exec": 1,"file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a": 1      }
,
      "19-gram": {
"what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec": 1,""do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration.": 1,"`nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini": 1,"wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ==============================================================================": 1,"description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what": 1,"./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably": 1,"============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli -- "$@"": 1,"run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this": 1,"============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run": 1,"# ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to": 1,"bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a": 1,"means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake": 1,"a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # #": 1,"script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean".": 1,"# file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli`": 1,"run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli": 1,"# ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli --": 1,"i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix": 1,"with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the": 1,"# # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means": 1,""dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the": 1,"# "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using": 1,"usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim"": 1,"# description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do": 1,"mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run": 1,"probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's": 1,"this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i": 1,"`gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches": 1,"the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script": 1,"to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== #": 1,"# usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. #": 1,"file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with": 1,"# # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli": 1,"is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". #": 1,"# # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`.": 1,"# # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the": 1,"run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix": 1      }
,
      "23-gram": {
"# "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration.": 1,"run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini": 1,"is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this": 1,"file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim"": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the": 1,"the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli": 1,"to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the": 1,"# file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. #": 1,"# # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`.": 1,"with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the": 1,"`gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using": 1,"wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches": 1,"# description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". #": 1,"i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli -- "$@"": 1,"what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli --": 1,"`nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's": 1,"============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix": 1,"probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix": 1,"script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== #": 1,"this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ==============================================================================": 1,"# ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with": 1,"run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake": 1,"a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # # ============================================================================== # this script": 1,"bash # ============================================================================== # # file: run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli`": 1,""do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run .#gemini-cli": 1,"means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec nix run": 1,""dwim" probably means "do what i mean". # # ============================================================================== # this script launches the gemini cli using the project's flake configuration. exec": 1,"./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i": 1,"# usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do": 1,"usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what": 1,"description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean". # #": 1,"# # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means "do what i mean".": 1,"# # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably means": 1,"run_gemini.sh # # usage: ./scripts/cli/run_gemini.sh # # description: this script is a wrapper to run the `gemini-cli` with `nix run`. # "dwim" probably": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/cli/launch_gemini_cli.sh": {
      "1-gram": {
"log": 7,"function": 2,"from": 1,"script": 1,"directory": 1,"||": 1,""[error]": 1,"errors": 1,"launch_gemini_cli.sh": 1,"gemini..."": 1,"file:": 1,"$gemini_cli_dir"": 1,""failed": 1,"devshell."": 3,"exit": 1,"$1"": 2,"this": 1,"change": 1,"cd": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"error()": 1,"./scripts/cli/launch_gemini_cli.sh": 1,"==============================================================================": 2,""exiting": 1,"gemini": 2,"launching": 1,"the": 2,""entering": 1,"{": 2,"to": 4,"a": 1,"cli": 1,"bash": 1,"for": 1,"devshell..."": 1,"gemini-cli": 3,">&2": 1,"}": 2,"`nix-shell`.": 1,"description:": 1,""launching": 1,"rust-nix": 1,""inside": 2,"echo": 2,"messages": 1,"within": 1,"entry": 1,"usage:": 1,"#": 12,"error": 1,"1": 1,""$gemini_cli_dir"": 1,"log()": 1,"#!/usr/bin/env": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,""[info]": 1,"point": 1,"is": 1      }
,
      "2-gram": {
"$gemini_cli_dir" log": 1,"to change": 1,"log "entering": 1,"exit 1": 1,"echo "[info]": 1,"cli #": 1,"gemini cli": 1,"for launching": 1,""exiting gemini-cli": 1,"cd "$gemini_cli_dir"": 1,"devshell..." cd": 1,"# from": 1,"point for": 1,"is the": 1,"# description:": 1,"# usage:": 1,"launch_gemini_cli.sh #": 1,"log "launching": 1,"change directory": 1,"log "inside": 2,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"to log": 2,"`nix-shell`. #": 1,"gemini..." gemini": 1,"gemini-cli devshell."": 2,"error "failed": 1,">&2 exit": 1,"$1" >&2": 1,""[error] $1"": 1,"} #": 1,"function to": 2,"the entry": 1,"description: this": 1,"file: launch_gemini_cli.sh": 1,"directory to": 1,"devshell." log": 2,"log "exiting": 1,"to $gemini_cli_dir"": 1,"gemini-cli devshell..."": 1,""[info] $1"": 1,"{ echo": 2,"log messages": 1,"this script": 1,""inside rust-nix": 1,"echo "[error]": 1,"within a": 1,"usage: ./scripts/cli/launch_gemini_cli.sh": 1,"bash #": 1,"gemini log": 1,""launching gemini..."": 1,""failed to": 1,"messages log()": 1,"a `nix-shell`.": 1,"error() {": 1,"# #": 4,"launching the": 1,"script is": 1,"# file:": 1,"#!/usr/bin/env bash": 1,""$gemini_cli_dir" ||": 1,"entry point": 1,"============================================================================== #": 2,""inside gemini-cli": 1,"|| error": 1,"rust-nix devshell."": 1,"errors error()": 1,"$1" }": 1,"the gemini": 1,"./scripts/cli/launch_gemini_cli.sh #": 1,"# ==============================================================================": 2,""entering gemini-cli": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"1 }": 1,"log errors": 1,"log() {": 1,"# function": 2,"from within": 1      }
,
      "3-gram": {
"cd "$gemini_cli_dir" ||": 1,"function to log": 2,"within a `nix-shell`.": 1,"usage: ./scripts/cli/launch_gemini_cli.sh #": 1,"# # usage:": 1,"gemini-cli devshell..." cd": 1,"log "inside rust-nix": 1,"script is the": 1,"# description: this": 1,"#!/usr/bin/env bash #": 1,""launching gemini..." gemini": 1,"to $gemini_cli_dir" log": 1,">&2 exit 1": 1,"errors error() {": 1,"from within a": 1,"============================================================================== # #": 1,"gemini log "exiting": 1,"gemini..." gemini log": 1,"log "inside gemini-cli": 1,"devshell..." cd "$gemini_cli_dir"": 1,"# function to": 2,"directory to $gemini_cli_dir"": 1,"change directory to": 1,"to change directory": 1,"error "failed to": 1,""inside rust-nix devshell."": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"exit 1 }": 1,""[info] $1" }": 1,"{ echo "[info]": 1,"a `nix-shell`. #": 1,"the gemini cli": 1,"file: launch_gemini_cli.sh #": 1,"bash # ==============================================================================": 1,"$gemini_cli_dir" log "inside": 1,""entering gemini-cli devshell..."": 1,"} # function": 1,"# ============================================================================== #": 2,"log "launching gemini..."": 1,"log "entering gemini-cli": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,""[error] $1" >&2": 1,"error() { echo": 1,"to log errors": 1,"messages log() {": 1,"# # ==============================================================================": 1,"cli # from": 1,"this script is": 1,"# # description:": 1,"./scripts/cli/launch_gemini_cli.sh # #": 1,"# # file:": 1,""exiting gemini-cli devshell."": 1,"rust-nix devshell." log": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"{ echo "[error]": 1,"echo "[info] $1"": 1,"description: this script": 1,"launch_gemini_cli.sh # #": 1,"log "exiting gemini-cli": 1,""failed to change": 1,"|| error "failed": 1,"devshell." log "entering": 1,"entry point for": 1,"gemini-cli devshell." log": 1,"$1" >&2 exit": 1,"gemini cli #": 1,"launching the gemini": 1,"for launching the": 1,"# file: launch_gemini_cli.sh": 1,"devshell." log "launching": 1,"log errors error()": 1,"log messages log()": 1,"`nix-shell`. # #": 1,"the entry point": 1,""$gemini_cli_dir" || error": 1,"$1" } #": 1,"to log messages": 1,"is the entry": 1,""inside gemini-cli devshell."": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,"echo "[error] $1"": 1,"log() { echo": 1,"============================================================================== # function": 1,"# from within": 1,"point for launching": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh": 1      }
,
      "5-gram": {
"gemini log "exiting gemini-cli devshell."": 1,""launching gemini..." gemini log "exiting": 1,""entering gemini-cli devshell..." cd "$gemini_cli_dir"": 1,"log "inside rust-nix devshell." log": 1,""[error] $1" >&2 exit 1": 1,"echo "[info] $1" } #": 1,"file: launch_gemini_cli.sh # # usage:": 1,"# ============================================================================== # # file:": 1,"to change directory to $gemini_cli_dir"": 1,"log "entering gemini-cli devshell..." cd": 1,"exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,">&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"cli # from within a": 1,"is the entry point for": 1,"# file: launch_gemini_cli.sh # #": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"errors error() { echo "[error]": 1,"log errors error() { echo": 1,"a `nix-shell`. # # ==============================================================================": 1,"./scripts/cli/launch_gemini_cli.sh # # description: this": 1,"============================================================================== # # file: launch_gemini_cli.sh": 1,"log "launching gemini..." gemini log": 1,"$1" >&2 exit 1 }": 1,"} # function to log": 1,"to log messages log() {": 1,"for launching the gemini cli": 1,"entry point for launching the": 1,"description: this script is the": 1,"gemini..." gemini log "exiting gemini-cli": 1,"devshell..." cd "$gemini_cli_dir" || error": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell."": 1,"`nix-shell`. # # ============================================================================== #": 1,"this script is the entry": 1,"launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh": 1,"gemini-cli devshell." log "launching gemini..."": 1,"rust-nix devshell." log "entering gemini-cli": 1,"function to log messages log()": 1,"# function to log messages": 1,"the gemini cli # from": 1,"launching the gemini cli #": 1,"script is the entry point": 1,"log "inside gemini-cli devshell." log": 1,""$gemini_cli_dir" || error "failed to": 1,"echo "[error] $1" >&2 exit": 1,"messages log() { echo "[info]": 1,"gemini cli # from within": 1,"bash # ============================================================================== # #": 1,"change directory to $gemini_cli_dir" log": 1,"error "failed to change directory": 1,"gemini-cli devshell..." cd "$gemini_cli_dir" ||": 1,"$1" } # function to": 1,"log() { echo "[info] $1"": 1,"# ============================================================================== # function to": 1,"# description: this script is": 1,"# # usage: ./scripts/cli/launch_gemini_cli.sh #": 1,"# # file: launch_gemini_cli.sh #": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,"to log errors error() {": 1,"within a `nix-shell`. # #": 1,"point for launching the gemini": 1,"directory to $gemini_cli_dir" log "inside": 1,"|| error "failed to change": 1,"function to log errors error()": 1,"============================================================================== # function to log": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh # #": 1,"$gemini_cli_dir" log "inside gemini-cli devshell."": 1,"to $gemini_cli_dir" log "inside gemini-cli": 1,"cd "$gemini_cli_dir" || error "failed": 1,""inside rust-nix devshell." log "entering": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix": 1,"{ echo "[error] $1" >&2": 1,"# function to log errors": 1,"# from within a `nix-shell`.": 1,"usage: ./scripts/cli/launch_gemini_cli.sh # # description:": 1,""failed to change directory to": 1,"{ echo "[info] $1" }": 1,"the entry point for launching": 1,"# # description: this script": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"devshell." log "launching gemini..." gemini": 1,""inside gemini-cli devshell." log "launching": 1,"devshell." log "entering gemini-cli devshell..."": 1,"error() { echo "[error] $1"": 1,""[info] $1" } # function": 1,"log messages log() { echo": 1,"# # ============================================================================== # function": 1,"from within a `nix-shell`. #": 1      }
,
      "7-gram": {
"log "inside gemini-cli devshell." log "launching gemini..."": 1,"to $gemini_cli_dir" log "inside gemini-cli devshell." log": 1,"log "entering gemini-cli devshell..." cd "$gemini_cli_dir" ||": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix": 1,""[info] $1" } # function to log": 1,"============================================================================== # function to log messages log()": 1,"# from within a `nix-shell`. # #": 1,"# description: this script is the entry": 1,"# file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh": 1,"rust-nix devshell." log "entering gemini-cli devshell..." cd": 1,"log "inside rust-nix devshell." log "entering gemini-cli": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log": 1,"$1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"{ echo "[info] $1" } # function": 1,"to log messages log() { echo "[info]": 1,"function to log messages log() { echo": 1,"# ============================================================================== # function to log messages": 1,"{ echo "[error] $1" >&2 exit 1": 1,"# function to log errors error() {": 1,"messages log() { echo "[info] $1" }": 1,"for launching the gemini cli # from": 1,"entry point for launching the gemini cli": 1,"description: this script is the entry point": 1,"$1" } # function to log errors": 1,"log() { echo "[info] $1" } #": 1,"usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script": 1,"function to log errors error() { echo": 1,"script is the entry point for launching": 1,"============================================================================== # # file: launch_gemini_cli.sh # #": 1,""launching gemini..." gemini log "exiting gemini-cli devshell."": 1,""inside rust-nix devshell." log "entering gemini-cli devshell..."": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell."": 1,"echo "[error] $1" >&2 exit 1 }": 1,"log errors error() { echo "[error] $1"": 1,"cli # from within a `nix-shell`. #": 1,"# # usage: ./scripts/cli/launch_gemini_cli.sh # # description:": 1,"gemini-cli devshell." log "launching gemini..." gemini log": 1,"change directory to $gemini_cli_dir" log "inside gemini-cli": 1,""failed to change directory to $gemini_cli_dir" log": 1,""entering gemini-cli devshell..." cd "$gemini_cli_dir" || error": 1,"exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,">&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"# function to log messages log() {": 1,"launching the gemini cli # from within": 1,"the entry point for launching the gemini": 1,""$gemini_cli_dir" || error "failed to change directory": 1,"gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed": 1,"to log errors error() { echo "[error]": 1,"} # function to log errors error()": 1,"# # ============================================================================== # function to log": 1,"within a `nix-shell`. # # ============================================================================== #": 1,"the gemini cli # from within a": 1,"# ============================================================================== # # file: launch_gemini_cli.sh #": 1,"devshell." log "launching gemini..." gemini log "exiting": 1,"to change directory to $gemini_cli_dir" log "inside": 1,"error "failed to change directory to $gemini_cli_dir"": 1,"`nix-shell`. # # ============================================================================== # function to": 1,"launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # #": 1,"cd "$gemini_cli_dir" || error "failed to change": 1,"a `nix-shell`. # # ============================================================================== # function": 1,"this script is the entry point for": 1,"# # file: launch_gemini_cli.sh # # usage:": 1,"bash # ============================================================================== # # file: launch_gemini_cli.sh": 1,"log "launching gemini..." gemini log "exiting gemini-cli": 1,"$gemini_cli_dir" log "inside gemini-cli devshell." log "launching": 1,"directory to $gemini_cli_dir" log "inside gemini-cli devshell."": 1,"devshell..." cd "$gemini_cli_dir" || error "failed to": 1,"devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir"": 1,""[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"errors error() { echo "[error] $1" >&2": 1,"gemini cli # from within a `nix-shell`.": 1,"point for launching the gemini cli #": 1,"is the entry point for launching the": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering": 1,"# # description: this script is the": 1,"./scripts/cli/launch_gemini_cli.sh # # description: this script is": 1,""inside gemini-cli devshell." log "launching gemini..." gemini": 1,"|| error "failed to change directory to": 1,"error() { echo "[error] $1" >&2 exit": 1,"echo "[info] $1" } # function to": 1,"log messages log() { echo "[info] $1"": 1,"from within a `nix-shell`. # # ==============================================================================": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh # # description: this": 1,"file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh #": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1      }
,
      "11-gram": {
"$gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting": 1,"|| error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli": 1,"# function to log errors error() { echo "[error] $1" >&2": 1,"function to log messages log() { echo "[info] $1" } #": 1,"./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry": 1,"# file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this": 1,"============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # #": 1,"log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli": 1,"to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching": 1,"gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to": 1,"errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"to log errors error() { echo "[error] $1" >&2 exit 1": 1,"} # function to log errors error() { echo "[error] $1"": 1,"log messages log() { echo "[info] $1" } # function to": 1,"for launching the gemini cli # from within a `nix-shell`. #": 1,"entry point for launching the gemini cli # from within a": 1,"this script is the entry point for launching the gemini cli": 1,"directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini": 1,"echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,"{ echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"{ echo "[info] $1" } # function to log errors error()": 1,"to log messages log() { echo "[info] $1" } # function": 1,"from within a `nix-shell`. # # ============================================================================== # function to log": 1,"to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log": 1,""$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside": 1,""entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory": 1,""inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error": 1,"error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"`nix-shell`. # # ============================================================================== # function to log messages log() {": 1,"a `nix-shell`. # # ============================================================================== # function to log messages log()": 1,"log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change": 1,""[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix": 1,"$1" } # function to log errors error() { echo "[error]": 1,""[info] $1" } # function to log errors error() { echo": 1,"point for launching the gemini cli # from within a `nix-shell`.": 1,"error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell."": 1,"rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..."": 1,"exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering": 1,"messages log() { echo "[info] $1" } # function to log": 1,"cli # from within a `nix-shell`. # # ============================================================================== # function": 1,"# # description: this script is the entry point for launching": 1,"devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to": 1,"# ============================================================================== # function to log messages log() { echo "[info]": 1,"# # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the": 1,""failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log": 1,"log() { echo "[info] $1" } # function to log errors": 1,"============================================================================== # function to log messages log() { echo "[info] $1"": 1,"the gemini cli # from within a `nix-shell`. # # ==============================================================================": 1,"script is the entry point for launching the gemini cli #": 1,"# description: this script is the entry point for launching the": 1,"file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script": 1,"# ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh #": 1,""inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli devshell."": 1,"devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir"": 1,"log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" ||": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli": 1,"echo "[info] $1" } # function to log errors error() {": 1,"change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..."": 1,"cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd": 1,"function to log errors error() { echo "[error] $1" >&2 exit": 1,"# function to log messages log() { echo "[info] $1" }": 1,"the entry point for launching the gemini cli # from within": 1,"$1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell."": 1,"within a `nix-shell`. # # ============================================================================== # function to log messages": 1,"launching the gemini cli # from within a `nix-shell`. # #": 1,"description: this script is the entry point for launching the gemini": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir"": 1,"log errors error() { echo "[error] $1" >&2 exit 1 }": 1,"# # ============================================================================== # function to log messages log() { echo": 1,"usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point": 1,"# # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description:": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage:": 1,">&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log": 1,"# from within a `nix-shell`. # # ============================================================================== # function to": 1,"gemini cli # from within a `nix-shell`. # # ============================================================================== #": 1,"is the entry point for launching the gemini cli # from": 1,"launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is": 1,"bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh": 1      }
,
      "13-gram": {
"error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching": 1,""$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell."": 1,"rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change": 1,"for launching the gemini cli # from within a `nix-shell`. # # ==============================================================================": 1,"script is the entry point for launching the gemini cli # from within": 1,"to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli": 1,"exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..."": 1,"============================================================================== # function to log messages log() { echo "[info] $1" } #": 1,"launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry": 1,"change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" ||": 1,"gemini cli # from within a `nix-shell`. # # ============================================================================== # function to": 1,"# # description: this script is the entry point for launching the gemini": 1,"$gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli devshell."": 1,"directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting": 1,">&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli": 1,"the gemini cli # from within a `nix-shell`. # # ============================================================================== # function": 1,"description: this script is the entry point for launching the gemini cli #": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir"": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd": 1,"# function to log errors error() { echo "[error] $1" >&2 exit 1": 1,""[info] $1" } # function to log errors error() { echo "[error] $1"": 1,"to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini": 1,"log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"function to log errors error() { echo "[error] $1" >&2 exit 1 }": 1,"function to log messages log() { echo "[info] $1" } # function to": 1,"within a `nix-shell`. # # ============================================================================== # function to log messages log() {": 1,"launching the gemini cli # from within a `nix-shell`. # # ============================================================================== #": 1,"the entry point for launching the gemini cli # from within a `nix-shell`.": 1,"this script is the entry point for launching the gemini cli # from": 1,"# # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script": 1,"============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this": 1,"{ echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix": 1,"echo "[info] $1" } # function to log errors error() { echo "[error]": 1,"# description: this script is the entry point for launching the gemini cli": 1,"# ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description:": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh #": 1,"|| error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log": 1,"devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside": 1,"log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed": 1,"errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"$1" } # function to log errors error() { echo "[error] $1" >&2": 1,"{ echo "[info] $1" } # function to log errors error() { echo": 1,"messages log() { echo "[info] $1" } # function to log errors error()": 1,"# function to log messages log() { echo "[info] $1" } # function": 1,"from within a `nix-shell`. # # ============================================================================== # function to log messages log()": 1,"usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching": 1,"gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log": 1,""entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir"": 1,"`nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info]": 1,"a `nix-shell`. # # ============================================================================== # function to log messages log() { echo": 1,"entry point for launching the gemini cli # from within a `nix-shell`. #": 1,"cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli": 1,""inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to": 1,"to log messages log() { echo "[info] $1" } # function to log": 1,"# from within a `nix-shell`. # # ============================================================================== # function to log messages": 1,"./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the": 1,"bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # #": 1,"log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to": 1,"$1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering": 1,"} # function to log errors error() { echo "[error] $1" >&2 exit": 1,"log() { echo "[info] $1" } # function to log errors error() {": 1,"# ============================================================================== # function to log messages log() { echo "[info] $1" }": 1,"point for launching the gemini cli # from within a `nix-shell`. # #": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error": 1,"echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell."": 1,"log messages log() { echo "[info] $1" } # function to log errors": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for": 1,"# # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point": 1,"file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the": 1,"# file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is": 1,""failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..."": 1,"devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory": 1,""[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log": 1,"error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,"# # ============================================================================== # function to log messages log() { echo "[info] $1"": 1,"cli # from within a `nix-shell`. # # ============================================================================== # function to log": 1,"is the entry point for launching the gemini cli # from within a": 1      }
,
      "19-gram": {
"gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..."": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to": 1,">&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed": 1,"function to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error]": 1,"{ echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd": 1,"function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell."": 1,"to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1"": 1,"entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log": 1,""inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside": 1,"} # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,"a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to": 1,"# description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. #": 1,"log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log": 1,"# # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors": 1,"cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1"": 1,"point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages": 1,"is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function": 1,"bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry": 1,"cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log": 1,"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory": 1,"exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to": 1,"# # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli #": 1,"# file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the": 1,"============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for": 1,"devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell."": 1,"log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2": 1,"# ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change": 1,"# function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix": 1,""[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"this script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ==============================================================================": 1,"file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini": 1,"devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini": 1,""entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching": 1,"echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir"": 1,"# function to log messages log() { echo "[info] $1" } # function to log errors error() { echo": 1,"gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info]": 1,"for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log()": 1,"# # description: this script is the entry point for launching the gemini cli # from within a `nix-shell`.": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from": 1,""$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting": 1,"rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli": 1,"============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error() {": 1,"launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the": 1,"log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log": 1,""[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" ||": 1,"error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..."": 1,"errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli": 1,"log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1": 1,"# ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error()": 1,"`nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log": 1,"within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function": 1,"# from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" }": 1,"launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() {": 1,"# # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir"": 1,"log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering": 1,"to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log": 1,"{ echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 }": 1,"messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit": 1,"from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } #": 1,"script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== #": 1,"./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within a": 1,"error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli devshell."": 1,"|| error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli": 1,"$1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error": 1,"$1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo": 1,"the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to": 1,"description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. # #": 1,"usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within": 1      }
,
      "23-gram": {
"} project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside": 1,"function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..."": 1,"to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 }": 1,"a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error() {": 1,"./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ==============================================================================": 1,"usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. # #": 1,"# # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within a `nix-shell`.": 1,"log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log": 1,"within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error()": 1,"cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to": 1,"# file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from": 1,"bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the": 1,"exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir"": 1,"{ echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside": 1,"is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log()": 1,"devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini": 1,"1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log": 1,">&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to": 1,"echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix": 1,"log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log": 1,"messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli"": 1,"point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info]": 1,""entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting": 1,"project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli": 1,"# function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli": 1,"the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() {": 1,"devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli devshell."": 1,"gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..." gemini log "exiting gemini-cli": 1,""[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change": 1,"echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to": 1,"for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1"": 1,"# usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. #": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching": 1,"rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching gemini..."": 1,"log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir"": 1,"$1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log": 1,""[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell."": 1,"log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix"": 1,"# ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1"": 1,"gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function": 1,"script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages": 1,"# description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function": 1,"launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within a": 1,"$1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory": 1,"{ echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed": 1,"errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" ||": 1,"to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd": 1,"} # function to log errors error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering": 1,"# # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error]": 1,"`nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error() { echo": 1,"entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo": 1,"this script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log": 1,"# # description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== #": 1,"============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli": 1,"log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log": 1,"function to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit 1": 1,"from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors": 1,"file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli # from within": 1,"# ============================================================================== # # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini": 1,"gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell."": 1,"error() { echo "[error] $1" >&2 exit 1 } project_root="/data/data/com.termux.nix/files/home/pick-up-nix" gemini_cli_dir="$project_root/vendor/external/gemini-cli" log "inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error": 1,"# function to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2 exit": 1,"description: this script is the entry point for launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to": 1,""inside rust-nix devshell." log "entering gemini-cli devshell..." cd "$gemini_cli_dir" || error "failed to change directory to $gemini_cli_dir" log "inside gemini-cli devshell." log "launching": 1,"============================================================================== # function to log messages log() { echo "[info] $1" } # function to log errors error() { echo "[error] $1" >&2": 1,"# from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } # function to log": 1,"the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" } #": 1,"launching the gemini cli # from within a `nix-shell`. # # ============================================================================== # function to log messages log() { echo "[info] $1" }": 1,"# # file: launch_gemini_cli.sh # # usage: ./scripts/cli/launch_gemini_cli.sh # # description: this script is the entry point for launching the gemini cli #": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/cli/run_gemini_cli_pinned.sh": {
      "1-gram": {
"from": 1,"runs": 1,"script": 1,"run_gemini_cli_pinned.sh": 1,"file:": 1,"this": 1,"run": 1,"==============================================================================": 2,"`gemini-cli`": 1,"the": 1,"./scripts/cli/run_gemini_cli_pinned.sh": 1,""$@"": 1,"nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"a": 1,"bash": 1,"package": 1,"nix": 2,"specific": 1,"description:": 1,"usage:": 1,"#": 10,"#!/usr/bin/env": 1,"version.": 1      }
,
      "2-gram": {
"nix run": 1,"from a": 1,"the `gemini-cli`": 1,"# description:": 1,"./scripts/cli/run_gemini_cli_pinned.sh #": 1,"# usage:": 1,"run_gemini_cli_pinned.sh #": 1,"============================================================================== nix": 1,"package #": 1,"description: this": 1,"script runs": 1,"nix package": 1,"`gemini-cli` from": 1,"this script": 1,"version. #": 1,"bash #": 1,"# version.": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh": 1,"a specific": 1,"# #": 4,"# file:": 1,"#!/usr/bin/env bash": 1,"nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"============================================================================== #": 1,"specific nix": 1,"runs the": 1,"# ==============================================================================": 2,"file: run_gemini_cli_pinned.sh": 1      }
,
      "3-gram": {
"# # usage:": 1,"run_gemini_cli_pinned.sh # #": 1,"# file: run_gemini_cli_pinned.sh": 1,"nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"nix package #": 1,"# description: this": 1,"#!/usr/bin/env bash #": 1,"============================================================================== # #": 1,"./scripts/cli/run_gemini_cli_pinned.sh # #": 1,"version. # #": 1,"from a specific": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh": 1,"bash # ==============================================================================": 1,"runs the `gemini-cli`": 1,"file: run_gemini_cli_pinned.sh #": 1,"# ============================================================================== #": 1,"# ============================================================================== nix": 1,"# # ==============================================================================": 1,"specific nix package": 1,"`gemini-cli` from a": 1,"this script runs": 1,"# # description:": 1,"# # file:": 1,"script runs the": 1,"description: this script": 1,"the `gemini-cli` from": 1,"# version. #": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh #": 1,"run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"============================================================================== nix run": 1,"a specific nix": 1,"package # version.": 1      }
,
      "5-gram": {
"# ============================================================================== # # file:": 1,"version. # # ============================================================================== nix": 1,"# version. # # ==============================================================================": 1,"script runs the `gemini-cli` from": 1,"============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"# # ============================================================================== nix run": 1,"specific nix package # version.": 1,"# description: this script runs": 1,"============================================================================== # # file: run_gemini_cli_pinned.sh": 1,"nix package # version. #": 1,"from a specific nix package": 1,"a specific nix package #": 1,"`gemini-cli` from a specific nix": 1,"runs the `gemini-cli` from a": 1,"description: this script runs the": 1,"bash # ============================================================================== # #": 1,"package # version. # #": 1,"file: run_gemini_cli_pinned.sh # # usage:": 1,"# ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh # #": 1,"# # file: run_gemini_cli_pinned.sh #": 1,"the `gemini-cli` from a specific": 1,"this script runs the `gemini-cli`": 1,"# file: run_gemini_cli_pinned.sh # #": 1,"# # description: this script": 1,"run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"./scripts/cli/run_gemini_cli_pinned.sh # # description: this": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description:": 1,"# # usage: ./scripts/cli/run_gemini_cli_pinned.sh #": 1      }
,
      "7-gram": {
"# # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"from a specific nix package # version.": 1,"./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs": 1,"bash # ============================================================================== # # file: run_gemini_cli_pinned.sh": 1,"specific nix package # version. # #": 1,"runs the `gemini-cli` from a specific nix": 1,"# # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description:": 1,"run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # #": 1,"script runs the `gemini-cli` from a specific": 1,"# # description: this script runs the": 1,"============================================================================== # # file: run_gemini_cli_pinned.sh # #": 1,"version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"this script runs the `gemini-cli` from a": 1,"description: this script runs the `gemini-cli` from": 1,"# description: this script runs the `gemini-cli`": 1,"# file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this": 1,"# ============================================================================== # # file: run_gemini_cli_pinned.sh #": 1,"`gemini-cli` from a specific nix package #": 1,"file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh #": 1,"package # version. # # ============================================================================== nix": 1,"the `gemini-cli` from a specific nix package": 1,"a specific nix package # version. #": 1,"nix package # version. # # ==============================================================================": 1,"# # file: run_gemini_cli_pinned.sh # # usage:": 1,"# version. # # ============================================================================== nix run": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1      }
,
      "11-gram": {
"usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from": 1,"nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"a specific nix package # version. # # ============================================================================== nix run": 1,"description: this script runs the `gemini-cli` from a specific nix package": 1,"# # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the": 1,"# description: this script runs the `gemini-cli` from a specific nix": 1,"bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh": 1,"specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"`gemini-cli` from a specific nix package # version. # # ==============================================================================": 1,"# file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this": 1,"from a specific nix package # version. # # ============================================================================== nix": 1,"# # description: this script runs the `gemini-cli` from a specific": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli`": 1,"script runs the `gemini-cli` from a specific nix package # version.": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage:": 1,"run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs": 1,"# # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description:": 1,"the `gemini-cli` from a specific nix package # version. # #": 1,"============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # #": 1,"runs the `gemini-cli` from a specific nix package # version. #": 1,"this script runs the `gemini-cli` from a specific nix package #": 1,"./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a": 1,"file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script": 1,"# ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh #": 1      }
,
      "13-gram": {
"a specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"from a specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # #": 1,"script runs the `gemini-cli` from a specific nix package # version. # #": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh #": 1,"`gemini-cli` from a specific nix package # version. # # ============================================================================== nix run": 1,"# description: this script runs the `gemini-cli` from a specific nix package #": 1,"./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix": 1,"file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a": 1,"# # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script": 1,"runs the `gemini-cli` from a specific nix package # version. # # ==============================================================================": 1,"# # description: this script runs the `gemini-cli` from a specific nix package": 1,"# ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description:": 1,"run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli`": 1,"# file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs": 1,"============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this": 1,"the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix": 1,"this script runs the `gemini-cli` from a specific nix package # version. #": 1,"description: this script runs the `gemini-cli` from a specific nix package # version.": 1,"# # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific": 1      }
,
      "19-gram": {
"# # description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix": 1,"# ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from": 1,"description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # # ==============================================================================": 1,"bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli`": 1,"this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package": 1,"# file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix": 1,"# # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version.": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. #": 1,"============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # #": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the": 1,"# # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific": 1,"# description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix run": 1,"run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package #": 1      }
,
      "23-gram": {
"# ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package": 1,"run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # # ==============================================================================": 1,"./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli "$@"": 1,"# usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix run": 1,"# file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. #": 1,"============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package #": 1,"file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # #": 1,"usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix run nixpkgs/26833ad1dad83826ef7cc52e0009ca9b7097c79f#gemini-cli": 1,"# # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version.": 1,"bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_cli_pinned.sh # # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific": 1,"# # usage: ./scripts/cli/run_gemini_cli_pinned.sh # # description: this script runs the `gemini-cli` from a specific nix package # version. # # ============================================================================== nix": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/cli/launch_gemini_split.sh": {
      "1-gram": {
"determine": 1,"[": 2,"script": 1,"window": 1,"gemini_command="$gemini_invocation": 1,"'$task_file'": 1,""usage:": 1,"with": 1,"subtask.sh": 2,"after": 1,"npx": 1,"bun": 1,"launches": 1,"file:": 1,"new": 1,"--model=gemini-2.5-flash": 1,"--prompt-interactive": 2,"exit": 2,"file.": 1,"terminal": 1,"this": 2,"launch": 1,"gemini_invocation="npx": 1,"/dev/null;": 2,"or": 1,"-f": 1,"==============================================================================": 2,"absolute": 1,"gemini_invocation="bunx": 1,""error:": 1,""$task_file"": 2,"gemini": 3,"the": 5,""$gemini_command"": 1,"continue": 1,"to": 2,"using": 1,"method": 1,"<task_file>"": 1,"$0": 1,"task_file="$1"": 1,"given": 1,"a": 2,"cli": 2,"and": 1,"current": 1,"<task_file>": 1,"bash": 1,"for": 1,"split": 1,"in": 1,"loading": 1,"elif": 1,"-v": 2,"gemini_invocation="gemini"": 1,"npx)": 1,"!": 1,"then": 4,"path": 1,"use": 1,"command": 4,"description:": 1,"/data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"call": 1,"\"@$task_file\""": 1,"&>": 2,"found."": 1,"file": 2,"echo": 2,"];": 2,"task": 3,"usage:": 1,"#": 15,"invocation": 1,"not": 1,"1": 2,"launch_gemini_split.sh": 1,"full": 1,"(bunx": 1,"-z": 1,"./scripts/cli/launch_gemini_split.sh": 1,"#!/usr/bin/env": 1,"session": 1,"construct": 1,"@google/gemini-cli"": 2,"fi": 3,"if": 3,"splits": 1      }
,
      "2-gram": {
"subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"split window": 1,"new split": 1,"to launch": 1,"the task": 1,"# using": 1,"gemini_invocation="npx @google/gemini-cli"": 1,"then gemini_invocation="npx": 1,"npx &>": 1,"bun &>": 1,"method (bunx": 1,"gemini cli": 1,"# determine": 1,"[ !": 1,"exit 1": 2,"usage: ./scripts/cli/launch_gemini_split.sh": 1,"file: launch_gemini_split.sh": 1,"using --prompt-interactive": 1,"found." exit": 1,"not found."": 1,""$task_file" ];": 2,"[ -z": 1,"with a": 1,"current terminal": 1,"# description:": 1,"# usage:": 1,"window #": 1,"the full": 1,"construct the": 1,"&> /dev/null;": 2,"gemini_invocation="gemini" if": 1,"(bunx or": 1,"invocation method": 1,"echo "usage:": 1,"# cli": 1,"launches the": 1,"absolute path": 1,"use absolute": 1,"in a": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"command #": 1,"-v npx": 1,"-v bun": 1,"1 fi": 2,"$0 <task_file>"": 1,"cli with": 1,"splits the": 1,"description: this": 1,"launch_gemini_split.sh #": 1,"# use": 1,"\"@$task_file\"" #": 1,"loading the": 1,"continue the": 1,"npx) gemini_invocation="gemini"": 1,"terminal and": 1,"the current": 1,"./scripts/cli/launch_gemini_split.sh <task_file>": 1,"--model=gemini-2.5-flash --prompt-interactive": 1,""error: task": 1,"-z "$task_file"": 1,"this script": 1,"a new": 1,"this command": 1,"# call": 1,"--prompt-interactive \"@$task_file\""": 1,"determine gemini": 1,"echo "error:": 1,"a given": 1,"bash #": 1,"path for": 1,"--prompt-interactive to": 1,"/dev/null; then": 2,"task file": 2,"! -f": 1,""usage: $0": 1,"task_file="$1" if": 1,"<task_file> #": 1,"gemini command": 1,"full gemini": 1,"# construct": 1,"if command": 1,"'$task_file' not": 1,"fi if": 1,"then echo": 2,"============================================================================== task_file="$1"": 1,"gemini #": 1,"and launches": 1,"script splits": 1,"# #": 4,"for subtask.sh": 1,"command in": 1,"launch this": 1,"call subtask.sh": 1,"file gemini_command="$gemini_invocation": 1,"session after": 1,"command -v": 2,"if [": 2,"# file:": 1,"#!/usr/bin/env bash": 1,"subtask.sh to": 1,"the session": 1,"elif command": 1,"@google/gemini-cli" elif": 1,"gemini_invocation="bunx @google/gemini-cli"": 1,"fi #": 2,"file. #": 1,"given task": 1,"============================================================================== #": 1,"to continue": 1,"then gemini_invocation="bunx": 1,"or npx)": 1,"task file.": 1,"the gemini": 1,"# ==============================================================================": 2,"/data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"after loading": 1,"@google/gemini-cli" fi": 1,"cli invocation": 1,"file '$task_file'": 1,"-f "$task_file"": 1,"<task_file>" exit": 1,"]; then": 2      }
,
      "3-gram": {
"@google/gemini-cli" fi #": 1,"&> /dev/null; then": 2,"1 fi #": 1,"file '$task_file' not": 1,"this script splits": 1,"# # usage:": 1,"launch_gemini_split.sh # #": 1,"file: launch_gemini_split.sh #": 1,"a new split": 1,"construct the full": 1,"gemini_invocation="npx @google/gemini-cli" fi": 1,"bun &> /dev/null;": 1,"echo "error: task": 1,"<task_file>" exit 1": 1,"============================================================================== task_file="$1" if": 1,"with a given": 1,"current terminal and": 1,"splits the current": 1,"# description: this": 1,"#!/usr/bin/env bash #": 1,"subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"in a new": 1,"command in a": 1,"subtask.sh to launch": 1,"the session after": 1,"not found." exit": 1,"# cli with": 1,"============================================================================== # #": 1,"use absolute path": 1,"-v npx &>": 1,"-v bun &>": 1,"gemini cli invocation": 1,"# determine gemini": 1,"[ ! -f": 1,""$task_file" ]; then": 2,"the current terminal": 1,"path for subtask.sh": 1,"\"@$task_file\"" # call": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"task file gemini_command="$gemini_invocation": 1,"--prompt-interactive to continue": 1,"or npx) gemini_invocation="gemini"": 1,"fi if [": 1,"if [ -z": 1,"launches the gemini": 1,"bash # ==============================================================================": 1,"--prompt-interactive \"@$task_file\"" #": 1,"fi # construct": 1,"npx &> /dev/null;": 1,"npx) gemini_invocation="gemini" if": 1,"! -f "$task_file"": 1,"1 fi if": 1,"exit 1 fi": 2,"]; then echo": 2,"-z "$task_file" ];": 1,"and launches the": 1,"# ============================================================================== #": 1,"using --prompt-interactive to": 1,"gemini command #": 1,"determine gemini cli": 1,"then echo "usage:": 1,"# # ==============================================================================": 1,"cli with a": 1,"terminal and launches": 1,"# # description:": 1,"<task_file> # #": 1,"# file: launch_gemini_split.sh": 1,"# # file:": 1,"new split window": 1,"# call subtask.sh": 1,"# using --prompt-interactive": 1,"gemini_invocation="gemini" if command": 1,"cli invocation method": 1,"found." exit 1": 1,"[ -z "$task_file"": 1,"file. # #": 1,"description: this script": 1,"for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"to launch this": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"the full gemini": 1,"then gemini_invocation="bunx @google/gemini-cli"": 1,"(bunx or npx)": 1,"method (bunx or": 1,"# use absolute": 1,"this command in": 1,"call subtask.sh to": 1,"file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"session after loading": 1,"continue the session": 1,"then gemini_invocation="npx @google/gemini-cli"": 1,"@google/gemini-cli" elif command": 1,"/dev/null; then gemini_invocation="bunx": 1,"-f "$task_file" ];": 1,"# ============================================================================== task_file="$1"": 1,"given task file.": 1,"to continue the": 1,"command # using": 1,"full gemini command": 1,"command -v npx": 1,"command -v bun": 1,"fi # determine": 1,"'$task_file' not found."": 1,"task file '$task_file'": 1,""error: task file": 1,"then echo "error:": 1,"if [ !": 1,""usage: $0 <task_file>"": 1,"echo "usage: $0": 1,"task_file="$1" if [": 1,"the gemini #": 1,"# usage: ./scripts/cli/launch_gemini_split.sh": 1,"absolute path for": 1,"window # use": 1,"split window #": 1,"after loading the": 1,"# construct the": 1,"/dev/null; then gemini_invocation="npx": 1,"elif command -v": 1,"gemini_invocation="bunx @google/gemini-cli" elif": 1,"invocation method (bunx": 1,"task file. #": 1,"gemini # cli": 1,"./scripts/cli/launch_gemini_split.sh <task_file> #": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file>": 1,"launch this command": 1,"the task file": 1,"loading the task": 1,"if command -v": 1,"$0 <task_file>" exit": 1,"a given task": 1,"script splits the": 1      }
,
      "5-gram": {
"file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"after loading the task file": 1,"@google/gemini-cli" fi # construct the": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"command -v npx &> /dev/null;": 1,"npx) gemini_invocation="gemini" if command -v": 1,"task file '$task_file' not found."": 1,""$task_file" ]; then echo "error:": 1,"[ ! -f "$task_file" ];": 1,"exit 1 fi if [": 1,"echo "usage: $0 <task_file>" exit": 1,"task_file="$1" if [ -z "$task_file"": 1,"with a given task file.": 1,"this script splits the current": 1,"# ============================================================================== # # file:": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"the session after loading the": 1,"if command -v bun &>": 1,"(bunx or npx) gemini_invocation="gemini" if": 1,"1 fi if [ !": 1,"the gemini # cli with": 1,"file: launch_gemini_split.sh # # usage:": 1,"in a new split window": 1,"loading the task file gemini_command="$gemini_invocation": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"or npx) gemini_invocation="gemini" if command": 1,"gemini cli invocation method (bunx": 1,"determine gemini cli invocation method": 1,"'$task_file' not found." exit 1": 1,"file '$task_file' not found." exit": 1,"]; then echo "error: task": 1,"! -f "$task_file" ]; then": 1,"task file. # # ==============================================================================": 1,"script splits the current terminal": 1,"launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh": 1,"command in a new split": 1,"to continue the session after": 1,"construct the full gemini command": 1,"elif command -v npx &>": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"gemini_invocation="gemini" if command -v bun": 1,"cli invocation method (bunx or": 1,"# determine gemini cli invocation": 1,"not found." exit 1 fi": 1,""usage: $0 <task_file>" exit 1": 1,"use absolute path for subtask.sh": 1,"subtask.sh to launch this command": 1,"\"@$task_file\"" # call subtask.sh to": 1,"the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"continue the session after loading": 1,"@google/gemini-cli" elif command -v npx": 1,"-v bun &> /dev/null; then": 1,"fi # determine gemini cli": 1,"if [ ! -f "$task_file"": 1,"fi if [ ! -f": 1,"if [ -z "$task_file" ];": 1,"given task file. # #": 1,"the current terminal and launches": 1,"task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"session after loading the task": 1,"full gemini command # using": 1,"fi # construct the full": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"npx &> /dev/null; then gemini_invocation="npx": 1,"bun &> /dev/null; then gemini_invocation="bunx": 1,"exit 1 fi # determine": 1,"current terminal and launches the": 1,"# # file: launch_gemini_split.sh #": 1,"============================================================================== # # file: launch_gemini_split.sh": 1,"call subtask.sh to launch this": 1,"command # using --prompt-interactive to": 1,"the full gemini command #": 1,"then echo "error: task file": 1,"-z "$task_file" ]; then echo": 1,"# cli with a given": 1,"splits the current terminal and": 1,"# description: this script splits": 1,"bash # ============================================================================== # #": 1,"this command in a new": 1,"gemini command # using --prompt-interactive": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"then gemini_invocation="npx @google/gemini-cli" fi #": 1,""error: task file '$task_file' not": 1,"<task_file>" exit 1 fi if": 1,"gemini # cli with a": 1,"new split window # use": 1,"to launch this command in": 1,"using --prompt-interactive to continue the": 1,"-v npx &> /dev/null; then": 1,"invocation method (bunx or npx)": 1,"============================================================================== task_file="$1" if [ -z": 1,"terminal and launches the gemini": 1,"launch this command in a": 1,"# call subtask.sh to launch": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"--prompt-interactive to continue the session": 1,"# using --prompt-interactive to continue": 1,"command -v bun &> /dev/null;": 1,"then echo "usage: $0 <task_file>"": 1,"]; then echo "usage: $0": 1,""$task_file" ]; then echo "usage:": 1,"a given task file. #": 1,"split window # use absolute": 1,"--prompt-interactive \"@$task_file\"" # call subtask.sh": 1,"method (bunx or npx) gemini_invocation="gemini"": 1,"-f "$task_file" ]; then echo": 1,"# ============================================================================== task_file="$1" if [": 1,"cli with a given task": 1,"launches the gemini # cli": 1,"and launches the gemini #": 1,"description: this script splits the": 1,"path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"# use absolute path for": 1,"window # use absolute path": 1,"a new split window #": 1,"# construct the full gemini": 1,"1 fi # determine gemini": 1,"echo "error: task file '$task_file'": 1,"file. # # ============================================================================== task_file="$1"": 1,"# # description: this script": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file> # #": 1,"# usage: ./scripts/cli/launch_gemini_split.sh <task_file> #": 1,"# # usage: ./scripts/cli/launch_gemini_split.sh <task_file>": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"found." exit 1 fi #": 1,"$0 <task_file>" exit 1 fi": 1,"[ -z "$task_file" ]; then": 1,"# # ============================================================================== task_file="$1" if": 1,"<task_file> # # description: this": 1,"./scripts/cli/launch_gemini_split.sh <task_file> # # description:": 1,"# file: launch_gemini_split.sh # #": 1      }
,
      "7-gram": {
"to launch this command in a new": 1,"subtask.sh to launch this command in a": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to": 1,"to continue the session after loading the": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"command -v npx &> /dev/null; then gemini_invocation="npx": 1,"elif command -v npx &> /dev/null; then": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"npx) gemini_invocation="gemini" if command -v bun &>": 1,"! -f "$task_file" ]; then echo "error:": 1,""$task_file" ]; then echo "usage: $0 <task_file>"": 1,"this script splits the current terminal and": 1,"bash # ============================================================================== # # file: launch_gemini_split.sh": 1,"# call subtask.sh to launch this command": 1,"the session after loading the task file": 1,"--prompt-interactive to continue the session after loading": 1,"full gemini command # using --prompt-interactive to": 1,"fi # construct the full gemini command": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"(bunx or npx) gemini_invocation="gemini" if command -v": 1,"not found." exit 1 fi # determine": 1,"$0 <task_file>" exit 1 fi if [": 1,""usage: $0 <task_file>" exit 1 fi if": 1,"launch this command in a new split": 1,"gemini command # using --prompt-interactive to continue": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"if command -v bun &> /dev/null; then": 1,"fi # determine gemini cli invocation method": 1,"exit 1 fi # determine gemini cli": 1,"task file '$task_file' not found." exit 1": 1,"then echo "error: task file '$task_file' not": 1,"echo "usage: $0 <task_file>" exit 1 fi": 1,"script splits the current terminal and launches": 1,"description: this script splits the current terminal": 1,"# # description: this script splits the": 1,"============================================================================== # # file: launch_gemini_split.sh # #": 1,"call subtask.sh to launch this command in": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"# determine gemini cli invocation method (bunx": 1,"'$task_file' not found." exit 1 fi #": 1,"<task_file> # # description: this script splits": 1,"# # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # #": 1,"this command in a new split window": 1,"or npx) gemini_invocation="gemini" if command -v bun": 1,"[ ! -f "$task_file" ]; then echo": 1,"1 fi if [ ! -f "$task_file"": 1,"exit 1 fi if [ ! -f": 1,"gemini # cli with a given task": 1,"the gemini # cli with a given": 1,"# ============================================================================== # # file: launch_gemini_split.sh #": 1,"new split window # use absolute path": 1,"the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"if [ ! -f "$task_file" ]; then": 1,"then echo "usage: $0 <task_file>" exit 1": 1,"file. # # ============================================================================== task_file="$1" if [": 1,"# description: this script splits the current": 1,"# # file: launch_gemini_split.sh # # usage:": 1,"use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"\"@$task_file\"" # call subtask.sh to launch this": 1,"task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"the full gemini command # using --prompt-interactive": 1,"============================================================================== task_file="$1" if [ -z "$task_file" ];": 1,"# # ============================================================================== task_file="$1" if [ -z": 1,"in a new split window # use": 1,"command in a new split window #": 1,"--prompt-interactive \"@$task_file\"" # call subtask.sh to launch": 1,"# construct the full gemini command #": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"method (bunx or npx) gemini_invocation="gemini" if command": 1,"invocation method (bunx or npx) gemini_invocation="gemini" if": 1,""error: task file '$task_file' not found." exit": 1,"echo "error: task file '$task_file' not found."": 1,"with a given task file. # #": 1,"# cli with a given task file.": 1,"terminal and launches the gemini # cli": 1,"after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"session after loading the task file gemini_command="$gemini_invocation": 1,"construct the full gemini command # using": 1,"determine gemini cli invocation method (bunx or": 1,"given task file. # # ============================================================================== task_file="$1"": 1,"cli with a given task file. #": 1,"launches the gemini # cli with a": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this": 1,"# use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"# using --prompt-interactive to continue the session": 1,"@google/gemini-cli" fi # construct the full gemini": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"cli invocation method (bunx or npx) gemini_invocation="gemini"": 1,"1 fi # determine gemini cli invocation": 1,"the current terminal and launches the gemini": 1,"splits the current terminal and launches the": 1,"./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script": 1,"# usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description:": 1,"window # use absolute path for subtask.sh": 1,"using --prompt-interactive to continue the session after": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"gemini cli invocation method (bunx or npx)": 1,""$task_file" ]; then echo "error: task file": 1,"fi if [ ! -f "$task_file" ];": 1,"<task_file>" exit 1 fi if [ !": 1,"]; then echo "usage: $0 <task_file>" exit": 1,"[ -z "$task_file" ]; then echo "usage:": 1,"launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> #": 1,"file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file>": 1,"# file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh": 1,"split window # use absolute path for": 1,"a new split window # use absolute": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh": 1,"continue the session after loading the task": 1,"found." exit 1 fi # determine gemini": 1,"-f "$task_file" ]; then echo "error: task": 1,"if [ -z "$task_file" ]; then echo": 1,"task_file="$1" if [ -z "$task_file" ]; then": 1,"loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"command # using --prompt-interactive to continue the": 1,"@google/gemini-cli" elif command -v npx &> /dev/null;": 1,"file '$task_file' not found." exit 1 fi": 1,"]; then echo "error: task file '$task_file'": 1,"-z "$task_file" ]; then echo "usage: $0": 1,"# ============================================================================== task_file="$1" if [ -z "$task_file"": 1,"task file. # # ============================================================================== task_file="$1" if": 1,"a given task file. # # ==============================================================================": 1,"and launches the gemini # cli with": 1,"current terminal and launches the gemini #": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1      }
,
      "11-gram": {
"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command": 1,"file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this": 1,"after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"full gemini command # using --prompt-interactive to continue the session after": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"\"@$task_file\"" # call subtask.sh to launch this command in a new": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command": 1,"fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini"": 1,""error: task file '$task_file' not found." exit 1 fi # determine": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"--prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a": 1,"gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current": 1,"# file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description:": 1,"a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"this command in a new split window # use absolute path": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in": 1,"the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ];": 1,"bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_split.sh # # usage:": 1,"command in a new split window # use absolute path for": 1,"gemini command # using --prompt-interactive to continue the session after loading": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"task file '$task_file' not found." exit 1 fi # determine gemini": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"# ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"launches the gemini # cli with a given task file. #": 1,"terminal and launches the gemini # cli with a given task": 1,"# description: this script splits the current terminal and launches the": 1,"<task_file> # # description: this script splits the current terminal and": 1,"# ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file>": 1,"in a new split window # use absolute path for subtask.sh": 1,"the full gemini command # using --prompt-interactive to continue the session": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file"": 1,"current terminal and launches the gemini # cli with a given": 1,"this script splits the current terminal and launches the gemini #": 1,"# # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &>": 1,"echo "error: task file '$task_file' not found." exit 1 fi #": 1,"if [ ! -f "$task_file" ]; then echo "error: task file": 1,"with a given task file. # # ============================================================================== task_file="$1" if [": 1,"# call subtask.sh to launch this command in a new split": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"# determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if": 1,"1 fi # determine gemini cli invocation method (bunx or npx)": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"cli with a given task file. # # ============================================================================== task_file="$1" if": 1,"# cli with a given task file. # # ============================================================================== task_file="$1"": 1,"the current terminal and launches the gemini # cli with a": 1,"./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal": 1,"to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"construct the full gemini command # using --prompt-interactive to continue the": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"]; then echo "error: task file '$task_file' not found." exit 1": 1,"# # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo": 1,"description: this script splits the current terminal and launches the gemini": 1,"to launch this command in a new split window # use": 1,"subtask.sh to launch this command in a new split window #": 1,"continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"--prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"a given task file. # # ============================================================================== task_file="$1" if [ -z": 1,"script splits the current terminal and launches the gemini # cli": 1,"file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this": 1,"============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> #": 1,"new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"call subtask.sh to launch this command in a new split window": 1,"loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh": 1,"using --prompt-interactive to continue the session after loading the task file": 1,"# construct the full gemini command # using --prompt-interactive to continue": 1,"fi # construct the full gemini command # using --prompt-interactive to": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"not found." exit 1 fi # determine gemini cli invocation method": 1,"then echo "error: task file '$task_file' not found." exit 1 fi": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"and launches the gemini # cli with a given task file.": 1,"# usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the": 1,"the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to": 1,"command # using --prompt-interactive to continue the session after loading the": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"exit 1 fi # determine gemini cli invocation method (bunx or": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"gemini # cli with a given task file. # # ==============================================================================": 1,"the gemini # cli with a given task file. # #": 1,"# # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # #": 1,"launch this command in a new split window # use absolute": 1,"task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch": 1,"# using --prompt-interactive to continue the session after loading the task": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"(bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"splits the current terminal and launches the gemini # cli with": 1,"# # description: this script splits the current terminal and launches": 1,"launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script": 1      }
,
      "13-gram": {
"after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to": 1,"fi # construct the full gemini command # using --prompt-interactive to continue the": 1,"cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"echo "error: task file '$task_file' not found." exit 1 fi # determine gemini": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"# # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current": 1,"launch this command in a new split window # use absolute path for": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"and launches the gemini # cli with a given task file. # #": 1,"task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command": 1,"continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"the full gemini command # using --prompt-interactive to continue the session after loading": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,""error: task file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"gemini # cli with a given task file. # # ============================================================================== task_file="$1" if": 1,"script splits the current terminal and launches the gemini # cli with a": 1,"# usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal": 1,"in a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # determine": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"cli with a given task file. # # ============================================================================== task_file="$1" if [ -z": 1,"launches the gemini # cli with a given task file. # # ==============================================================================": 1,"splits the current terminal and launches the gemini # cli with a given": 1,"# description: this script splits the current terminal and launches the gemini #": 1,"# # description: this script splits the current terminal and launches the gemini": 1,"launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the": 1,"file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits": 1,"# ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # #": 1,"to launch this command in a new split window # use absolute path": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"# determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v": 1,"fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx or npx)": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new": 1,"the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"full gemini command # using --prompt-interactive to continue the session after loading the": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"# # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ];": 1,"this command in a new split window # use absolute path for subtask.sh": 1,"# call subtask.sh to launch this command in a new split window #": 1,"--prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"# using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation": 1,"gemini command # using --prompt-interactive to continue the session after loading the task": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini"": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"current terminal and launches the gemini # cli with a given task file.": 1,"the current terminal and launches the gemini # cli with a given task": 1,"<task_file> # # description: this script splits the current terminal and launches the": 1,"============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description:": 1,"command in a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"--prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split": 1,"the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this": 1,"# construct the full gemini command # using --prompt-interactive to continue the session": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"# # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this": 1,"command # using --prompt-interactive to continue the session after loading the task file": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &>": 1,"determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli invocation method": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"# ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"# cli with a given task file. # # ============================================================================== task_file="$1" if [": 1,"description: this script splits the current terminal and launches the gemini # cli": 1,"./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches": 1,"# file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file>": 1,"subtask.sh to launch this command in a new split window # use absolute": 1,"call subtask.sh to launch this command in a new split window # use": 1,"\"@$task_file\"" # call subtask.sh to launch this command in a new split window": 1,"file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in": 1,"(bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file"": 1,"the gemini # cli with a given task file. # # ============================================================================== task_file="$1"": 1,"loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch": 1,"session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh": 1,"using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"construct the full gemini command # using --prompt-interactive to continue the session after": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if": 1,"task file '$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo": 1,"given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then": 1,"terminal and launches the gemini # cli with a given task file. #": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"not found." exit 1 fi # determine gemini cli invocation method (bunx or": 1,"============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to": 1,"this script splits the current terminal and launches the gemini # cli with": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and": 1,"bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> #": 1      }
,
      "19-gram": {
"call subtask.sh to launch this command in a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"\"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path for subtask.sh": 1,"construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"(bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"# ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z": 1,"./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with a": 1,"bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the": 1,"full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"# construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session": 1,"cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"# cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then": 1,"and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file"": 1,"the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"description: this script splits the current terminal and launches the gemini # cli with a given task file. #": 1,"after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new": 1,"--prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch": 1,"invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &>": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to": 1,"method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"# determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"# # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini #": 1,"# # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and": 1,"loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split": 1,"the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo": 1,"--prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path for": 1,"the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in": 1,"determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"# # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ];": 1,"============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute": 1,"command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v": 1,"echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx)": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine": 1,"script splits the current terminal and launches the gemini # cli with a given task file. # # ==============================================================================": 1,"# ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current": 1,"continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command": 1,"gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"# description: this script splits the current terminal and launches the gemini # cli with a given task file.": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with": 1,"# usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli": 1,"# file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches": 1,"# using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh": 1,"fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file": 1,""error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini"": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"<task_file> # # description: this script splits the current terminal and launches the gemini # cli with a given": 1,"launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path": 1,"task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window #": 1,"the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"splits the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1"": 1,"# call subtask.sh to launch this command in a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use": 1,"to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"# # description: this script splits the current terminal and launches the gemini # cli with a given task": 1,"file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the": 1,"using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [": 1,"this script splits the current terminal and launches the gemini # cli with a given task file. # #": 1      }
,
      "23-gram": {
"# construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"script splits the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z": 1,"description: this script splits the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if": 1,"bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches": 1,"the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh": 1,"task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &>": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini": 1,"task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path for": 1,"# using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v": 1,"# ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"# cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then": 1,"the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window": 1,"full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to": 1,"(bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini"": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"<task_file> # # description: this script splits the current terminal and launches the gemini # cli with a given task file. # #": 1,"launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with a": 1,"# # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini #": 1,"loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute": 1,"to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"# determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"# ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh "$gemini_command"": 1,"session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window #": 1,"construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,""error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"# # description: this script splits the current terminal and launches the gemini # cli with a given task file. # # ==============================================================================": 1,"the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path": 1,"after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use": 1,"continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split": 1,"fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"this script splits the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [": 1,"./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with a given task file. #": 1,"usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with a given task file.": 1,"# usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with a given task": 1,"file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path for subtask.sh": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ];": 1,"splits the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file"": 1,"# file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_split.sh # # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a new split window # use absolute path for subtask.sh /data/data/com.termux.nix/files/home/pick-up-nix/subtask.sh": 1,"using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in": 1,"or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini": 1,"the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"gemini command # using --prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo": 1,"# description: this script splits the current terminal and launches the gemini # cli with a given task file. # # ============================================================================== task_file="$1"": 1,"--prompt-interactive to continue the session after loading the task file gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call subtask.sh to launch this command in a": 1,"invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx)": 1,"# # ============================================================================== task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"# # usage: ./scripts/cli/launch_gemini_split.sh <task_file> # # description: this script splits the current terminal and launches the gemini # cli with a given": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/cli/run_gemini_with_task.sh": {
      "1-gram": {
"arguments,": 1,"runs": 1,"script": 1,"run_gemini_with_task.sh": 1,"interactive": 1,"mode,": 1,"with": 2,"@task.md": 1,"checkpointing,": 1,"file:": 1,"--prompt-interactive": 1,"--model=gemini-2.5-flash": 1,"this": 1,"==============================================================================": 2,"prompt": 1,"gemini": 1,"the": 1,"default": 1,"and": 1,"pinned": 1,"a": 1,"cli": 1,"bash": 1,"--checkpointing": 1,"specific": 1,"description:": 1,"--approval-mode": 1,"~/nix2/gemini_cli_recent.sh": 1,"approval": 1,"usage:": 1,"#": 11,"including": 1,"./scripts/cli/run_gemini_with_task.sh": 1,"#!/usr/bin/env": 1,"--": 1,"`task.md`.": 1,"an": 1,"model,": 1      }
,
      "2-gram": {
"prompt with": 1,"gemini cli": 1,"a pinned": 1,"specific arguments,": 1,"# description:": 1,"# usage:": 1,"~/nix2/gemini_cli_recent.sh --": 1,"checkpointing, and": 1,"--model=gemini-2.5-flash --approval-mode": 1,"pinned model,": 1,"cli with": 1,"description: this": 1,"approval mode,": 1,"script runs": 1,"--checkpointing --prompt-interactive": 1,"# interactive": 1,"and an": 1,"with specific": 1,"this script": 1,"./scripts/cli/run_gemini_with_task.sh #": 1,"usage: ./scripts/cli/run_gemini_with_task.sh": 1,"default --checkpointing": 1,"`task.md`. #": 1,"mode, checkpointing,": 1,"# including": 1,"bash #": 1,"--prompt-interactive @task.md": 1,"--approval-mode default": 1,"interactive prompt": 1,"an #": 1,"arguments, #": 1,"file: run_gemini_with_task.sh": 1,"# #": 4,"run_gemini_with_task.sh #": 1,"# file:": 1,"#!/usr/bin/env bash": 1,"============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"model, approval": 1,"============================================================================== #": 1,"with `task.md`.": 1,"including a": 1,"the gemini": 1,"runs the": 1,"# ==============================================================================": 2,"-- --model=gemini-2.5-flash": 1      }
,
      "3-gram": {
"# interactive prompt": 1,"# # usage:": 1,"file: run_gemini_with_task.sh #": 1,"# description: this": 1,"#!/usr/bin/env bash #": 1,"--model=gemini-2.5-flash --approval-mode default": 1,"============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"with specific arguments,": 1,"usage: ./scripts/cli/run_gemini_with_task.sh #": 1,"============================================================================== # #": 1,"prompt with `task.md`.": 1,"the gemini cli": 1,"bash # ==============================================================================": 1,"arguments, # including": 1,"# ============================================================================== #": 1,"# # ==============================================================================": 1,"`task.md`. # #": 1,"mode, checkpointing, and": 1,"this script runs": 1,"# # description:": 1,"# # file:": 1,"an # interactive": 1,"approval mode, checkpointing,": 1,"script runs the": 1,"description: this script": 1,"runs the gemini": 1,"# file: run_gemini_with_task.sh": 1,"default --checkpointing --prompt-interactive": 1,"-- --model=gemini-2.5-flash --approval-mode": 1,"model, approval mode,": 1,"gemini cli with": 1,"interactive prompt with": 1,"cli with specific": 1,"./scripts/cli/run_gemini_with_task.sh # #": 1,"--checkpointing --prompt-interactive @task.md": 1,"--approval-mode default --checkpointing": 1,"# ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"and an #": 1,"checkpointing, and an": 1,"pinned model, approval": 1,"a pinned model,": 1,"# including a": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh": 1,"run_gemini_with_task.sh # #": 1,"~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"with `task.md`. #": 1,"including a pinned": 1,"specific arguments, #": 1      }
,
      "5-gram": {
"~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default": 1,"an # interactive prompt with": 1,"checkpointing, and an # interactive": 1,"# file: run_gemini_with_task.sh # #": 1,"# ============================================================================== # # file:": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"cli with specific arguments, #": 1,"script runs the gemini cli": 1,"./scripts/cli/run_gemini_with_task.sh # # description: this": 1,"file: run_gemini_with_task.sh # # usage:": 1,"# ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"`task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"with `task.md`. # # ==============================================================================": 1,"runs the gemini cli with": 1,"this script runs the gemini": 1,"run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh": 1,"# description: this script runs": 1,"============================================================================== # # file: run_gemini_with_task.sh": 1,"mode, checkpointing, and an #": 1,"pinned model, approval mode, checkpointing,": 1,"with specific arguments, # including": 1,"# # usage: ./scripts/cli/run_gemini_with_task.sh #": 1,"-- --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"prompt with `task.md`. # #": 1,"and an # interactive prompt": 1,"--approval-mode default --checkpointing --prompt-interactive @task.md": 1,"============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode": 1,"interactive prompt with `task.md`. #": 1,"# interactive prompt with `task.md`.": 1,"description: this script runs the": 1,"usage: ./scripts/cli/run_gemini_with_task.sh # # description:": 1,"bash # ============================================================================== # #": 1,"model, approval mode, checkpointing, and": 1,"a pinned model, approval mode,": 1,"the gemini cli with specific": 1,"gemini cli with specific arguments,": 1,"# # file: run_gemini_with_task.sh #": 1,"# # ============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"approval mode, checkpointing, and an": 1,"including a pinned model, approval": 1,"# including a pinned model,": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh # #": 1,"arguments, # including a pinned": 1,"# # description: this script": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"specific arguments, # including a": 1      }
,
      "7-gram": {
"`task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"# including a pinned model, approval mode,": 1,"gemini cli with specific arguments, # including": 1,"this script runs the gemini cli with": 1,"./scripts/cli/run_gemini_with_task.sh # # description: this script runs": 1,"============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"# # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode": 1,"with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"and an # interactive prompt with `task.md`.": 1,"including a pinned model, approval mode, checkpointing,": 1,"the gemini cli with specific arguments, #": 1,"# interactive prompt with `task.md`. # #": 1,"pinned model, approval mode, checkpointing, and an": 1,"-- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive @task.md": 1,"runs the gemini cli with specific arguments,": 1,"# # description: this script runs the": 1,"prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"a pinned model, approval mode, checkpointing, and": 1,"script runs the gemini cli with specific": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh # # description: this": 1,"checkpointing, and an # interactive prompt with": 1,"model, approval mode, checkpointing, and an #": 1,"# # usage: ./scripts/cli/run_gemini_with_task.sh # # description:": 1,"arguments, # including a pinned model, approval": 1,"# file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh": 1,"# ============================================================================== # # file: run_gemini_with_task.sh #": 1,"# description: this script runs the gemini": 1,"# # file: run_gemini_with_task.sh # # usage:": 1,"mode, checkpointing, and an # interactive prompt": 1,"with specific arguments, # including a pinned": 1,"run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # #": 1,"file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh #": 1,"approval mode, checkpointing, and an # interactive": 1,"cli with specific arguments, # including a": 1,"============================================================================== # # file: run_gemini_with_task.sh # #": 1,"# ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default": 1,"an # interactive prompt with `task.md`. #": 1,"description: this script runs the gemini cli": 1,"usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script": 1,"~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"interactive prompt with `task.md`. # # ==============================================================================": 1,"specific arguments, # including a pinned model,": 1,"bash # ============================================================================== # # file: run_gemini_with_task.sh": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1      }
,
      "11-gram": {
"a pinned model, approval mode, checkpointing, and an # interactive prompt": 1,"# file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this": 1,"# # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description:": 1,"an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"# including a pinned model, approval mode, checkpointing, and an #": 1,"gemini cli with specific arguments, # including a pinned model, approval": 1,"this script runs the gemini cli with specific arguments, # including": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini": 1,"bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh": 1,"with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"including a pinned model, approval mode, checkpointing, and an # interactive": 1,"run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs": 1,"# ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh #": 1,"`task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"specific arguments, # including a pinned model, approval mode, checkpointing, and": 1,"with specific arguments, # including a pinned model, approval mode, checkpointing,": 1,"script runs the gemini cli with specific arguments, # including a": 1,"# # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the": 1,"# # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive @task.md": 1,"prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default": 1,"runs the gemini cli with specific arguments, # including a pinned": 1,"description: this script runs the gemini cli with specific arguments, #": 1,"# # description: this script runs the gemini cli with specific": 1,"approval mode, checkpointing, and an # interactive prompt with `task.md`. #": 1,"cli with specific arguments, # including a pinned model, approval mode,": 1,"the gemini cli with specific arguments, # including a pinned model,": 1,"pinned model, approval mode, checkpointing, and an # interactive prompt with": 1,"# description: this script runs the gemini cli with specific arguments,": 1,"# interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"checkpointing, and an # interactive prompt with `task.md`. # # ==============================================================================": 1,"usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli": 1,"and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"model, approval mode, checkpointing, and an # interactive prompt with `task.md`.": 1,"============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # #": 1,"mode, checkpointing, and an # interactive prompt with `task.md`. # #": 1,"interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage:": 1,"arguments, # including a pinned model, approval mode, checkpointing, and an": 1,"./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with": 1,"file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script": 1      }
,
      "13-gram": {
"pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. #": 1,"# ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description:": 1,"and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"# interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default": 1,"including a pinned model, approval mode, checkpointing, and an # interactive prompt with": 1,"with specific arguments, # including a pinned model, approval mode, checkpointing, and an": 1,"runs the gemini cli with specific arguments, # including a pinned model, approval": 1,"# # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script": 1,"prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"arguments, # including a pinned model, approval mode, checkpointing, and an # interactive": 1,"specific arguments, # including a pinned model, approval mode, checkpointing, and an #": 1,"cli with specific arguments, # including a pinned model, approval mode, checkpointing, and": 1,"script runs the gemini cli with specific arguments, # including a pinned model,": 1,"usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific": 1,"============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this": 1,"bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # #": 1,"checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"this script runs the gemini cli with specific arguments, # including a pinned": 1,"mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ==============================================================================": 1,"the gemini cli with specific arguments, # including a pinned model, approval mode,": 1,"description: this script runs the gemini cli with specific arguments, # including a": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with": 1,"file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the": 1,"# description: this script runs the gemini cli with specific arguments, # including": 1,"run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh #": 1,"# including a pinned model, approval mode, checkpointing, and an # interactive prompt": 1,"# # description: this script runs the gemini cli with specific arguments, #": 1,"gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing,": 1,"# file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs": 1,"with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive @task.md": 1,"interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode": 1,"model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # #": 1,"a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`.": 1,"./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments,": 1,"# # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli": 1      }
,
      "19-gram": {
"runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive": 1,"./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval": 1,"# # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific": 1,"a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`.": 1,"this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an": 1,"usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model,": 1,"# # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a": 1,"file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, #": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the": 1,"arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ==============================================================================": 1,"script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an #": 1,"# including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default": 1,"# description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing,": 1,"approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode": 1,"# # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode,": 1,"checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive @task.md": 1,"mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned": 1,"# file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments,": 1,"bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini": 1,"specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # #": 1,"with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. #": 1,"run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including": 1,"============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with": 1,"# ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli": 1,"including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with": 1,"description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and": 1,"the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt": 1      }
,
      "23-gram": {
"pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive @task.md": 1,"specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash": 1,"this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with": 1,"run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval": 1,"# # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an #": 1,"./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an": 1,"usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and": 1,"runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. #": 1,"bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments,": 1,"a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode": 1,"gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ==============================================================================": 1,"# # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode,": 1,"# # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a": 1,"including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh": 1,"script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`.": 1,"file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model,": 1,"============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including": 1,"# ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, #": 1,"with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh --": 1,"# usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing,": 1,"# including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # # ============================================================================== ~/nix2/gemini_cli_recent.sh -- --model=gemini-2.5-flash --approval-mode default": 1,"the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt with `task.md`. # #": 1,"# file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific arguments, # including a pinned": 1,"# description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive": 1,"description: this script runs the gemini cli with specific arguments, # including a pinned model, approval mode, checkpointing, and an # interactive prompt": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_with_task.sh # # usage: ./scripts/cli/run_gemini_with_task.sh # # description: this script runs the gemini cli with specific": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/cli/launch_gemini_with_poetry_task.sh": {
      "1-gram": {
"launch_gemini_with_poetry_task.sh": 1,"good": 1,"specifically": 1,":.+1": 1,"treated": 1,""poetry_task.md"": 1,"launch_gemini_in_split": 2,"after": 1,""$tmux"": 1,"to": 6,"file:": 1,"as": 1,"construct": 1,"main": 1,"(launching": 1,"using": 1,"gemini_command="$gemini_invocation": 1,""launching": 1,"function": 3,"created": 1,"exit": 4,"'$task_file'": 1,"run_in_tmux_split": 2,"`poetry_task.md`.": 1,"tmux": 7,"if": 6,"window..."": 1,"bun": 1,"and": 1,"file": 4,"pane": 2,"@google/gemini-cli"": 2,"newly": 1,"determine": 1,"launch_gemini_in_split()": 1,"the": 9,"gemini_split.sh": 1,"but": 1,"in": 2,"!": 1,"--prompt-interactive": 2,"#": 26,"split)": 1,"npx": 1,""$job_command"": 2,"description:": 1,"(optional,": 1,"it": 1,"gemini_invocation="gemini"": 1,"local": 4,"are": 1,"inside": 2,"split": 2,"`gemini_split.sh`": 1,"with": 3,"specific": 1,"launch_gemini_in_split."": 1,"script": 2,"logic": 2,"of": 1,"--model=gemini-2.5-flash": 1,"usage:": 1,"task": 5,"$1": 2,"'$job_command'": 1,"1": 4,"loading": 1,"elif": 1,"c-m": 1,"part": 1,"found."": 1,"or": 1,"new": 3,"launches": 1,"=": 2,"task_file": 1,"#!/usr/bin/env": 1,"select-pane": 1,"\"@$task_file\""": 1,"be": 1,"(bunx": 1,"job_command": 1,"original": 1,"];": 4,"experience)": 1,"&>": 2,"npx)": 1,"create": 1,"-f": 1,"then": 6,"==============================================================================": 2,"we": 1,"check": 1,"subtask.sh": 1,"cli": 2,"fi": 5,"combines": 1,"ensuring": 1,"-t": 1,"run_in_tmux_split()": 1,"select": 1,"encapsulate": 2,"-v": 3,"pane,": 1,"send": 1,"invocation": 1,"test.sh)": 1,"-z": 3,"job": 1,"must": 1,"bash": 1,"/dev/null;": 2,"this": 2,"[": 4,"not": 1,"run": 1,"gemini": 4,"(from": 1,"a": 8,"run_in_tmux_split."": 1,"split-window": 1,"session": 2,"session."": 1,"arguments:": 2,"file).": 1,"call": 2,"method": 1,"functionality": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh": 1,""$gemini_command"": 1,"(running": 1,"command": 8,"vertical": 1,"`subtask.sh`": 1,""error:": 4,"gemini_invocation="npx": 1,""$task_file"": 2,"job_command="$1"": 1,"single": 1,"no": 2,"full": 1,"it's": 1,"gemini_invocation="bunx": 1,"user": 1,"for": 1,"echo": 5,"task_file="$1"": 1,"{": 2,"continue": 1,"send-keys": 1,"provided": 2,"execution": 1,"}": 2      }
,
      "2-gram": {
"using --prompt-interactive": 1,"found." exit": 1,"user experience)": 1,"tmux split)": 1,"for user": 1,"to continue": 1,"pane (optional,": 1,"to the": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh #": 1,"# ==============================================================================": 2,"echo "launching": 1,""$tmux" ];": 1,"/dev/null; then": 2,"to launch_gemini_in_split."": 1,""error: this": 1,"run_in_tmux_split function": 1,"launch_gemini_with_poetry_task.sh #": 1,"(from test.sh)": 1,"#!/usr/bin/env bash": 1,"launch_gemini_in_split." exit": 1,"============================================================================== #": 2,"tmux split": 1,"file launch_gemini_in_split": 1,"-f "$task_file"": 1,"-v bun": 1,"created pane,": 1,"a single": 1,"be run": 1,"-z "$job_command"": 1,"provided to": 2,"# send": 1,"good for": 1,""launching command": 1,"we are": 1,"# arguments:": 2,"-z "$task_file"": 1,"description: this": 1,"or npx)": 1,"call launch_gemini_in_split": 1,"run_in_tmux_split "$gemini_command"": 1,"no task": 1,"split window..."": 1,"tmux split-window": 1,"[ !": 1,"-v npx": 1,"file provided": 1,"select-pane -t": 1,"it's treated": 1,"a tmux": 2,"encapsulate subtask.sh": 1,"'$task_file' not": 1,"the task": 1,"send the": 1,"tmux session": 1,"tmux session."": 1,"bun &>": 1,"--prompt-interactive \"@$task_file\""": 1,"{ local": 2,"with the": 1,"@google/gemini-cli" elif": 1,""$task_file" ];": 2,""$job_command" ];": 1,"echo "error:": 4,"window..." #": 1,"single command": 1,"# call": 2,"--model=gemini-2.5-flash --prompt-interactive": 1,"local job_command="$1"": 1,"local task_file="$1"": 1,"command tmux": 1,"# file:": 1,"but good": 1,"the session": 1,"task_file launch_gemini_in_split()": 1,"main execution": 1,"# using": 1,"command to": 1,"fi echo": 1,"\"@$task_file\"" #": 1,"gemini_split.sh logic": 1,"the specific": 1,"# (running": 1,"# description:": 1,"full gemini": 1,"loading the": 1,"a task": 1,"(running a": 1,"the job": 1,"[ -z": 3,"&> /dev/null;": 2,"tmux send-keys": 1,"command #": 1,"gemini_invocation="gemini" if": 1,"not found."": 1,"split pane": 1,"then echo": 4,"with a": 1,"launch_gemini_in_split "poetry_task.md"": 1,"local gemini_command="$gemini_invocation": 1,"pane, ensuring": 1,"# main": 1,"the run_in_tmux_split": 1,"then gemini_invocation="npx": 1,"elif command": 1,"! -f": 1,"experience) tmux": 1,"to encapsulate": 2,"# (launching": 1,"must be": 1,"send-keys "$job_command"": 1,"run inside": 1,"newly created": 1,":.+1 }": 1,"(optional, but": 1,"split-window -v": 1,"functionality of": 1,"call the": 1,"= task_file": 1,"with `poetry_task.md`.": 1,"gemini with": 1,"after loading": 1,""$job_command" c-m": 1,"the newly": 1,"script combines": 1,"of `subtask.sh`": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"continue the": 1,"vertical split": 1,"command in": 1,"split) and": 1,"-v #": 1,"the original": 1,"test.sh) #": 1,"@google/gemini-cli" fi": 1,"`poetry_task.md`. #": 1,"a new": 3,"logic #": 2,"run_in_tmux_split." exit": 1,"task file": 4,"# function": 2,""error: no": 2,"to run_in_tmux_split."": 1,"if command": 1,"fi #": 3,"'$job_command' in": 1,"bash #": 1,"gemini cli": 2,"cli invocation": 1,"it specifically": 1,"launches gemini": 1,"task file).": 1,"# construct": 1,"job_command="$1" if": 1,"specific task": 1,"# usage:": 1,"# determine": 1,"session." exit": 1,"part (from": 1,"new vertical": 1,"create a": 1,"command provided": 1,"specifically #": 1,"1 fi": 4,"gemini_invocation="bunx @google/gemini-cli"": 1,"npx) local": 1,"determine gemini": 1,"job_command run_in_tmux_split()": 1,"script must": 1,"construct the": 1,"run_in_tmux_split() {": 1,""$gemini_command" }": 1,"function run_in_tmux_split": 1,"launch_gemini_in_split() {": 1,"subtask.sh logic": 1,"} #": 2,"new tmux": 2,"command '$job_command'": 1,"file). it": 1,"$1 =": 2,"launch_gemini_in_split with": 1,"job command": 1,"npx &>": 1,"invocation method": 1,""error: task": 1,"--prompt-interactive to": 1,"pane tmux": 1,"this script": 2,"in a": 2,"-t :.+1": 1,"original pane": 1,"the full": 1,"(bunx or": 1,"fi if": 1,"]; then": 4,"`subtask.sh` #": 1,"file: launch_gemini_with_poetry_task.sh": 1,"gemini_invocation="npx @google/gemini-cli"": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh": 1,"file '$task_file'": 1,"execution part": 1,"# create": 1,"session if": 1,"function to": 2,"arguments: $1": 2,"check if": 1,"file local": 1,"combines the": 1,"and `gemini_split.sh`": 1,"`gemini_split.sh` #": 1,"= job_command": 1,"gemini command": 1,"inside a": 2,"# check": 1,"# #": 4,"exit 1": 4,"c-m #": 1,"# launches": 1,"tmux select-pane": 1,"session after": 1,"then gemini_invocation="bunx": 1,"a command": 1,"(launching gemini": 1,"cli with": 1,"if we": 1,"as a": 1,"# select": 1,"local gemini_invocation="gemini"": 1,"if [": 4,"treated as": 1,"command -v": 2,"are inside": 1,"method (bunx": 1,"-z "$tmux"": 1,"no command": 1,"task_file="$1" if": 1,"encapsulate gemini_split.sh": 1,"select the": 1,"the functionality": 1,"ensuring it's": 1      }
,
      "3-gram": {
"]; then echo": 4,"created pane, ensuring": 1,"the functionality of": 1,"description: this script": 1,"combines the functionality": 1,"command # using": 1,"task file). it": 1,"echo "error: task": 1,"with `poetry_task.md`. #": 1,"bun &> /dev/null;": 1,"-z "$job_command" ];": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh": 1,"check if we": 1,"} # main": 1,"# determine gemini": 1,"the original pane": 1,"the job command": 1,"-v npx &>": 1,"-f "$task_file" ];": 1,"file launch_gemini_in_split "poetry_task.md"": 1,"# call the": 1,"npx &> /dev/null;": 1,"original pane (optional,": 1,"launch_gemini_with_poetry_task.sh # #": 1,"tmux split window..."": 1,"# # usage:": 1,"the session after": 1,"to continue the": 1,"treated as a": 1,"npx) local gemini_invocation="gemini"": 1,""error: task file": 1,""$tmux" ]; then": 1,"method (bunx or": 1,""error: no command": 1,"# arguments: $1": 2,"local gemini_invocation="gemini" if": 1,"or npx) local": 1,""$task_file" ]; then": 2,"for user experience)": 1,"are inside a": 1,"a new tmux": 2,"# launches gemini": 1,"command to the": 1,"# (launching gemini": 1,"$1 = task_file": 1,"arguments: $1 =": 2,"determine gemini cli": 1,"function to encapsulate": 2,"= job_command run_in_tmux_split()": 1,"exit 1 fi": 4,"pane, ensuring it's": 1,"split) and `gemini_split.sh`": 1,"&> /dev/null; then": 2,"(launching gemini cli": 1,"job_command run_in_tmux_split() {": 1,"run_in_tmux_split "$gemini_command" }": 1,"construct the full": 1,"run inside a": 1,"run_in_tmux_split() { local": 1,"the task file": 1,"to launch_gemini_in_split." exit": 1,"if [ !": 1,""error: no task": 1,"this script must": 1,"functionality of `subtask.sh`": 1,"# create a": 1,"(bunx or npx)": 1,"file: launch_gemini_with_poetry_task.sh #": 1,"# file: launch_gemini_with_poetry_task.sh": 1,"pane (optional, but": 1,"local job_command="$1" if": 1,"# function to": 2,"# select the": 1,"launches gemini with": 1,"provided to launch_gemini_in_split."": 1,"# check if": 1,"we are inside": 1,"! -f "$task_file"": 1,"no task file": 1,"gemini_invocation="gemini" if command": 1,"task_file launch_gemini_in_split() {": 1,"launch_gemini_in_split with the": 1,"experience) tmux select-pane": 1,"encapsulate subtask.sh logic": 1,"to run_in_tmux_split." exit": 1,"file provided to": 1,"of `subtask.sh` #": 1,"tmux session if": 1,"[ -z "$tmux"": 1,"-z "$tmux" ];": 1,"with the specific": 1,"`poetry_task.md`. # #": 1,"then echo "error:": 4,"gemini command #": 1,"a new vertical": 1,"a tmux session."": 1,"new tmux split": 1,"tmux select-pane -t": 1,"invocation method (bunx": 1,"fi if [": 1,"send the job": 1,"command -v bun": 1,"echo "error: this": 1,"echo "error: no": 2,"then gemini_invocation="bunx @google/gemini-cli"": 1,"split-window -v #": 1,"be run inside": 1,"to encapsulate subtask.sh": 1,"select the original": 1,"tmux send-keys "$job_command"": 1,"# main execution": 1,"/dev/null; then gemini_invocation="bunx": 1,"to encapsulate gemini_split.sh": 1,"job_command="$1" if [": 1,"# description: this": 1,"{ local job_command="$1"": 1,"found." exit 1": 1,"(optional, but good": 1,"no command provided": 1,"main execution part": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"# # description:": 1,"tmux split-window -v": 1,"command -v npx": 1,""$job_command" c-m #": 1,"gemini cli with": 1,"$1 = job_command": 1,"script must be": 1,"loading the task": 1,"create a new": 1,"pane tmux split-window": 1,"call launch_gemini_in_split with": 1,"@google/gemini-cli" fi #": 1,"-v # send": 1,""$gemini_command" } #": 1,"full gemini command": 1,"logic # arguments:": 2,"it specifically #": 1,"\"@$task_file\"" # call": 1,"a single command": 1,"provided to run_in_tmux_split."": 1,"fi # check": 1,"using --prompt-interactive to": 1,"then gemini_invocation="npx @google/gemini-cli"": 1,"good for user": 1,"continue the session": 1,"the run_in_tmux_split function": 1,"file local gemini_command="$gemini_invocation": 1,"split window..." #": 1,"ensuring it's treated": 1,"# using --prompt-interactive": 1,"script combines the": 1,"user experience) tmux": 1,"command '$job_command' in": 1,"1 fi echo": 1,":.+1 } #": 1,"cli invocation method": 1,"'$job_command' in a": 1,"test.sh) # call": 1,"-v bun &>": 1,"1 fi if": 1,"fi # construct": 1,"task file provided": 1,"task_file="$1" if [": 1,"{ local task_file="$1"": 1,"execution part (from": 1,"fi # determine": 1,"============================================================================== # function": 1,"/dev/null; then gemini_invocation="npx": 1,"`subtask.sh` # (running": 1,"after loading the": 1,"run_in_tmux_split function run_in_tmux_split": 1,"@google/gemini-cli" elif command": 1,"= task_file launch_gemini_in_split()": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # #": 1,""$job_command" ]; then": 1,"must be run": 1,"bash # ==============================================================================": 1,"fi echo "launching": 1,"c-m # select": 1,"part (from test.sh)": 1,"# send the": 1,"file). it specifically": 1,"it's treated as": 1,"split pane tmux": 1,"# (running a": 1,"-z "$task_file" ];": 1,"run_in_tmux_split." exit 1": 1,"this script combines": 1,"(from test.sh) #": 1,"not found." exit": 1,"a command in": 1,"a task file).": 1,"function run_in_tmux_split "$gemini_command"": 1,"--prompt-interactive to continue": 1,"new vertical split": 1,"task file local": 1,"if command -v": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh #": 1,""launching command '$job_command'": 1,"as a single": 1,"local task_file="$1" if": 1,"session if [": 1,"tmux session." exit": 1,"command tmux send-keys": 1,"the newly created": 1,"#!/usr/bin/env bash #": 1,"gemini_invocation="npx @google/gemini-cli" fi": 1,"launch_gemini_in_split() { local": 1,"(running a command": 1,"file '$task_file' not": 1,"launch_gemini_in_split." exit 1": 1,"session." exit 1": 1,"single command tmux": 1,"if we are": 1,"task file launch_gemini_in_split": 1,"the specific task": 1,"task file '$task_file'": 1,"subtask.sh logic #": 1,"# # ==============================================================================": 1,"job command to": 1,"============================================================================== # #": 1,"the full gemini": 1,"} # function": 1,"send-keys "$job_command" c-m": 1,"[ ! -f": 1,"and `gemini_split.sh` #": 1,"call the run_in_tmux_split": 1,"gemini_split.sh logic #": 1,"gemini_invocation="bunx @google/gemini-cli" elif": 1,"-t :.+1 }": 1,"but good for": 1,"new tmux split)": 1,"[ -z "$task_file"": 1,"encapsulate gemini_split.sh logic": 1,"if [ -z": 3,"in a new": 2,""error: this script": 1,"command in a": 1,"command provided to": 1,"# call launch_gemini_in_split": 1,"elif command -v": 1,"'$task_file' not found."": 1,"a tmux session": 1,"tmux split) and": 1,"`gemini_split.sh` # (launching": 1,"--prompt-interactive \"@$task_file\"" #": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"# ============================================================================== #": 2,"echo "launching command": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"window..." # create": 1,"cli with a": 1,"with a task": 1,"to the newly": 1,"gemini with `poetry_task.md`.": 1,"specific task file": 1,"specifically # launches": 1,"# # file:": 1,"newly created pane,": 1,"# construct the": 1,"session after loading": 1,"gemini cli invocation": 1,"inside a tmux": 2,"1 fi #": 2,"[ -z "$job_command"": 1,"select-pane -t :.+1": 1,"vertical split pane": 1      }
,
      "5-gram": {
"command -v npx &> /dev/null;": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"select the original pane (optional,": 1,"split pane tmux split-window -v": 1,"npx &> /dev/null; then gemini_invocation="npx": 1,"encapsulate subtask.sh logic # arguments:": 1,"launches gemini with `poetry_task.md`. #": 1,"[ -z "$job_command" ]; then": 1,"run_in_tmux_split function run_in_tmux_split "$gemini_command" }": 1,"window..." # create a new": 1,"function to encapsulate gemini_split.sh logic": 1,"launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh": 1,"if [ -z "$task_file" ];": 1,"specifically # launches gemini with": 1,"# description: this script combines": 1,"to run_in_tmux_split." exit 1 fi": 1,"# ============================================================================== # function to": 1,"# main execution part (from": 1,"are inside a tmux session": 1,"npx) local gemini_invocation="gemini" if command": 1,"provided to launch_gemini_in_split." exit 1": 1,"tmux send-keys "$job_command" c-m #": 1,"-v # send the job": 1,"command # using --prompt-interactive to": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,""error: no command provided to": 1,"part (from test.sh) # call": 1,"the session after loading the": 1,"@google/gemini-cli" elif command -v npx": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"elif command -v npx &>": 1,"echo "error: task file '$task_file'": 1,"method (bunx or npx) local": 1,"found." exit 1 fi #": 1,"task file provided to launch_gemini_in_split."": 1,"} # function to encapsulate": 1,""error: this script must be": 1,"-z "$job_command" ]; then echo": 1,"then echo "error: task file": 1,"[ -z "$task_file" ]; then": 1,"bash # ============================================================================== # #": 1,"command provided to run_in_tmux_split." exit": 1,"1 fi # check if": 1,"@google/gemini-cli" fi # construct the": 1,"launch_gemini_in_split() { local task_file="$1" if": 1,"# launches gemini with `poetry_task.md`.": 1,"create a new vertical split": 1,"the newly created pane, ensuring": 1,"[ -z "$tmux" ]; then": 1,"-f "$task_file" ]; then echo": 1,"-t :.+1 } # function": 1,"using --prompt-interactive to continue the": 1,"# construct the full gemini": 1,"job_command run_in_tmux_split() { local job_command="$1"": 1,"(launching gemini cli with a": 1,""error: task file '$task_file' not": 1,"to encapsulate gemini_split.sh logic #": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"loading the task file local": 1,"inside a tmux session if": 1,"call the run_in_tmux_split function run_in_tmux_split": 1,"1 fi if [ !": 1,"exit 1 fi if [": 1,"'$task_file' not found." exit 1": 1,"new vertical split pane tmux": 1,"if command -v bun &>": 1,"echo "launching command '$job_command' in": 1,"function run_in_tmux_split "$gemini_command" } #": 1,"with the specific task file": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"invocation method (bunx or npx)": 1,"user experience) tmux select-pane -t": 1,"pane, ensuring it's treated as": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"# # ============================================================================== # function": 1,"# create a new vertical": 1,"echo "error: this script must": 1,"tmux session if [ -z": 1,"session if [ -z "$tmux"": 1,"a single command tmux send-keys": 1,"cli with a task file).": 1,"if [ -z "$tmux" ];": 1,"vertical split pane tmux split-window": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # #": 1,"session after loading the task": 1,"exit 1 fi # determine": 1,"to launch_gemini_in_split." exit 1 fi": 1,"send the job command to": 1,""$tmux" ]; then echo "error:": 1,"`gemini_split.sh` # (launching gemini cli": 1,"run_in_tmux_split() { local job_command="$1" if": 1,"local gemini_invocation="gemini" if command -v": 1,"to the newly created pane,": 1,"$1 = task_file launch_gemini_in_split() {": 1,"exit 1 fi echo "launching": 1,"script combines the functionality of": 1,"ensuring it's treated as a": 1,"(optional, but good for user": 1,"not found." exit 1 fi": 1,"arguments: $1 = task_file launch_gemini_in_split()": 1,"c-m # select the original": 1,"inside a tmux session." exit": 1,"select-pane -t :.+1 } #": 1,"= job_command run_in_tmux_split() { local": 1,"script must be run inside": 1,""$job_command" c-m # select the": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"# determine gemini cli invocation": 1,"file provided to launch_gemini_in_split." exit": 1,""$task_file" ]; then echo "error:": 2,"combines the functionality of `subtask.sh`": 1,"} # main execution part": 1,""error: no task file provided": 1,"# function to encapsulate subtask.sh": 1,"fi echo "launching command '$job_command'": 1,"run_in_tmux_split." exit 1 fi #": 1,"specific task file launch_gemini_in_split "poetry_task.md"": 1,"after loading the task file": 1,"task_file launch_gemini_in_split() { local task_file="$1"": 1,"{ local job_command="$1" if [": 1,"(from test.sh) # call launch_gemini_in_split": 1,"# arguments: $1 = job_command": 1,"this script combines the functionality": 1,""$gemini_command" } # main execution": 1,"description: this script combines the": 1,"launch_gemini_in_split with the specific task": 1,"file '$task_file' not found." exit": 1,"`poetry_task.md`. # # ============================================================================== #": 1,"'$job_command' in a new tmux": 1,"new tmux split window..." #": 1,"{ local task_file="$1" if [": 1,":.+1 } # function to": 1,"file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"fi # determine gemini cli": 1,"with `poetry_task.md`. # # ==============================================================================": 1,""launching command '$job_command' in a": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"a command in a new": 1,"pane (optional, but good for": 1,"# # description: this script": 1,"file: launch_gemini_with_poetry_task.sh # # usage:": 1,"(running a command in a": 1,"]; then echo "error: no": 2,"this script must be run": 1,"if [ ! -f "$task_file"": 1,"= task_file launch_gemini_in_split() { local": 1,"run_in_tmux_split "$gemini_command" } # main": 1,"--prompt-interactive to continue the session": 1,"# function to encapsulate gemini_split.sh": 1,"file). it specifically # launches": 1,"functionality of `subtask.sh` # (running": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"encapsulate gemini_split.sh logic # arguments:": 1,"# call launch_gemini_in_split with the": 1,"-v bun &> /dev/null; then": 1,"or npx) local gemini_invocation="gemini" if": 1,"gemini cli with a task": 1,"call launch_gemini_in_split with the specific": 1,"\"@$task_file\"" # call the run_in_tmux_split": 1,"cli invocation method (bunx or": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this": 1,"-v npx &> /dev/null; then": 1,"-z "$task_file" ]; then echo": 1,"gemini_split.sh logic # arguments: $1": 1,"tmux split window..." # create": 1,"created pane, ensuring it's treated": 1,"command in a new tmux": 1,"test.sh) # call launch_gemini_in_split with": 1,"the job command to the": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"continue the session after loading": 1,"# using --prompt-interactive to continue": 1,"the full gemini command #": 1,"in a new tmux split)": 1,"newly created pane, ensuring it's": 1,"if [ -z "$job_command" ];": 1,"]; then echo "error: task": 1,"command tmux send-keys "$job_command" c-m": 1,"with a task file). it": 1,"check if we are inside": 1,"good for user experience) tmux": 1,"logic # arguments: $1 =": 2,"provided to run_in_tmux_split." exit 1": 1,"launch_gemini_in_split." exit 1 fi if": 1,"============================================================================== # # file: launch_gemini_with_poetry_task.sh": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description:": 1,"then echo "error: this script": 1,"the functionality of `subtask.sh` #": 1,"and `gemini_split.sh` # (launching gemini": 1,"it's treated as a single": 1,"be run inside a tmux": 1,"must be run inside a": 1,"a tmux session." exit 1": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"# (launching gemini cli with": 1,"$1 = job_command run_in_tmux_split() {": 1,"split) and `gemini_split.sh` # (launching": 1,"# file: launch_gemini_with_poetry_task.sh # #": 1,"# ============================================================================== # # file:": 1,"fi # construct the full": 1,"no task file provided to": 1,"arguments: $1 = job_command run_in_tmux_split()": 1,"session." exit 1 fi echo": 1,"the run_in_tmux_split function run_in_tmux_split "$gemini_command"": 1,"then gemini_invocation="npx @google/gemini-cli" fi #": 1,"gemini cli invocation method (bunx": 1,"! -f "$task_file" ]; then": 1,"for user experience) tmux select-pane": 1,"as a single command tmux": 1,"a new vertical split pane": 1,"local job_command="$1" if [ -z": 1,"but good for user experience)": 1,"original pane (optional, but good": 1,"single command tmux send-keys "$job_command"": 1,"no command provided to run_in_tmux_split."": 1,"the task file local gemini_command="$gemini_invocation": 1,"pane tmux split-window -v #": 1,"then echo "error: no command": 1,"a task file). it specifically": 1,"new tmux split) and `gemini_split.sh`": 1,"# send the job command": 1,"gemini_invocation="gemini" if command -v bun": 1,"# arguments: $1 = task_file": 1,"# check if we are": 1,"main execution part (from test.sh)": 1,"echo "error: no task file": 1,"run inside a tmux session."": 1,"[ ! -f "$task_file" ];": 1,"a new tmux split) and": 1,"fi # check if we": 1,"then echo "error: no task": 1,"we are inside a tmux": 1,""$job_command" ]; then echo "error:": 1,"--prompt-interactive \"@$task_file\"" # call the": 1,"1 fi # determine gemini": 1,"`subtask.sh` # (running a command": 1,"the specific task file launch_gemini_in_split": 1,"construct the full gemini command": 1,"tmux select-pane -t :.+1 }": 1,"function to encapsulate subtask.sh logic": 1,"tmux split-window -v # send": 1,"exit 1 fi # check": 1,"it specifically # launches gemini": 1,"if we are inside a": 1,"-z "$tmux" ]; then echo": 1,"a new tmux split window..."": 1,"tmux split) and `gemini_split.sh` #": 1,"to encapsulate subtask.sh logic #": 1,"split window..." # create a": 1,"gemini command # using --prompt-interactive": 1,"# select the original pane": 1,"treated as a single command": 1,"task file). it specifically #": 1,"============================================================================== # function to encapsulate": 1,"a tmux session if [": 1,"subtask.sh logic # arguments: $1": 1,"echo "error: no command provided": 1,"tmux session." exit 1 fi": 1,"the original pane (optional, but": 1,"command '$job_command' in a new": 1,"in a new tmux split": 1,"split-window -v # send the": 1,"full gemini command # using": 1,"determine gemini cli invocation method": 1,"task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"fi if [ ! -f": 1,"# (running a command in": 1,"gemini with `poetry_task.md`. # #": 1,"(bunx or npx) local gemini_invocation="gemini"": 1,"task file '$task_file' not found."": 1,"to continue the session after": 1,"local task_file="$1" if [ -z": 1,"# # file: launch_gemini_with_poetry_task.sh #": 1,"]; then echo "error: this": 1,"job command to the newly": 1,"job_command="$1" if [ -z "$job_command"": 1,"execution part (from test.sh) #": 1,"task_file="$1" if [ -z "$task_file"": 1,"of `subtask.sh` # (running a": 1,"# call the run_in_tmux_split function": 1,"command -v bun &> /dev/null;": 1,"experience) tmux select-pane -t :.+1": 1,"command to the newly created": 1,"1 fi echo "launching command": 1,"bun &> /dev/null; then gemini_invocation="bunx": 1,"send-keys "$job_command" c-m # select": 1,"# # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh #": 1      }
,
      "7-gram": {
"{ local task_file="$1" if [ -z "$task_file"": 1,"$1 = job_command run_in_tmux_split() { local job_command="$1"": 1,"script must be run inside a tmux": 1,"-z "$job_command" ]; then echo "error: no": 1,""$job_command" ]; then echo "error: no command": 1,"launch_gemini_in_split with the specific task file launch_gemini_in_split": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the": 1,"-z "$task_file" ]; then echo "error: no": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1,"# function to encapsulate subtask.sh logic #": 1,"arguments: $1 = job_command run_in_tmux_split() { local": 1,"@google/gemini-cli" elif command -v npx &> /dev/null;": 1,"job_command run_in_tmux_split() { local job_command="$1" if [": 1,"command -v npx &> /dev/null; then gemini_invocation="npx": 1,"file). it specifically # launches gemini with": 1,"echo "error: this script must be run": 1,"in a new tmux split window..." #": 1,"exit 1 fi # check if we": 1,"# using --prompt-interactive to continue the session": 1,"# arguments: $1 = task_file launch_gemini_in_split() {": 1,"# function to encapsulate gemini_split.sh logic #": 1,"with `poetry_task.md`. # # ============================================================================== # function": 1,"session after loading the task file local": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"(from test.sh) # call launch_gemini_in_split with the": 1,"fi # determine gemini cli invocation method": 1,"# (launching gemini cli with a task": 1,"# arguments: $1 = job_command run_in_tmux_split() {": 1,"# ============================================================================== # function to encapsulate subtask.sh": 1,"split window..." # create a new vertical": 1,"# launches gemini with `poetry_task.md`. # #": 1,"the original pane (optional, but good for": 1,"this script must be run inside a": 1,"1 fi echo "launching command '$job_command' in": 1,"to run_in_tmux_split." exit 1 fi # check": 1,"execution part (from test.sh) # call launch_gemini_in_split": 1,"split pane tmux split-window -v # send": 1,"the session after loading the task file": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"if command -v bun &> /dev/null; then": 1,"send the job command to the newly": 1,"(running a command in a new tmux": 1,"full gemini command # using --prompt-interactive to": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"split) and `gemini_split.sh` # (launching gemini cli": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"launch_gemini_in_split." exit 1 fi if [ !": 1,"pane (optional, but good for user experience)": 1,"gemini cli with a task file). it": 1,"newly created pane, ensuring it's treated as": 1,"user experience) tmux select-pane -t :.+1 }": 1,"file '$task_file' not found." exit 1 fi": 1,"logic # arguments: $1 = job_command run_in_tmux_split()": 1,""$task_file" ]; then echo "error: no task": 1,"[ -z "$task_file" ]; then echo "error:": 1,"it's treated as a single command tmux": 1,"$1 = task_file launch_gemini_in_split() { local task_file="$1"": 1,"experience) tmux select-pane -t :.+1 } #": 1,"task file provided to launch_gemini_in_split." exit 1": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split": 1,"= job_command run_in_tmux_split() { local job_command="$1" if": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"to the newly created pane, ensuring it's": 1,"fi echo "launching command '$job_command' in a": 1,"a new tmux split window..." # create": 1,"command # using --prompt-interactive to continue the": 1,"============================================================================== # # file: launch_gemini_with_poetry_task.sh # #": 1,"`subtask.sh` # (running a command in a": 1,"a new tmux split) and `gemini_split.sh` #": 1,"command to the newly created pane, ensuring": 1,""$task_file" ]; then echo "error: task file": 1,"-f "$task_file" ]; then echo "error: task": 1,"provided to launch_gemini_in_split." exit 1 fi if": 1,"gemini_split.sh logic # arguments: $1 = task_file": 1,"session." exit 1 fi echo "launching command": 1,"'$job_command' in a new tmux split window..."": 1,"no command provided to run_in_tmux_split." exit 1": 1,"'$task_file' not found." exit 1 fi #": 1,"if [ ! -f "$task_file" ]; then": 1,"! -f "$task_file" ]; then echo "error:": 1,"it specifically # launches gemini with `poetry_task.md`.": 1,"to continue the session after loading the": 1,"then echo "error: task file '$task_file' not": 1,"} # function to encapsulate gemini_split.sh logic": 1,"c-m # select the original pane (optional,": 1,"treated as a single command tmux send-keys": 1,"command in a new tmux split) and": 1,"call the run_in_tmux_split function run_in_tmux_split "$gemini_command" }": 1,"--prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function": 1,"tmux send-keys "$job_command" c-m # select the": 1,"run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main": 1,"the full gemini command # using --prompt-interactive": 1,"exit 1 fi if [ ! -f": 1,"select the original pane (optional, but good": 1,"launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # #": 1,"[ -z "$job_command" ]; then echo "error:": 1,"============================================================================== # function to encapsulate subtask.sh logic": 1,"or npx) local gemini_invocation="gemini" if command -v": 1,"cli invocation method (bunx or npx) local": 1,"to encapsulate gemini_split.sh logic # arguments: $1": 1,"]; then echo "error: no command provided": 1,"launches gemini with `poetry_task.md`. # # ==============================================================================": 1,"construct the full gemini command # using": 1,"logic # arguments: $1 = task_file launch_gemini_in_split()": 1,"then echo "error: this script must be": 1,"function to encapsulate gemini_split.sh logic # arguments:": 1,"split-window -v # send the job command": 1,"a tmux session if [ -z "$tmux"": 1,"using --prompt-interactive to continue the session after": 1,"job_command="$1" if [ -z "$job_command" ]; then": 1,"be run inside a tmux session." exit": 1,"if [ -z "$task_file" ]; then echo": 1,"# select the original pane (optional, but": 1,"check if we are inside a tmux": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"# check if we are inside a": 1,"inside a tmux session." exit 1 fi": 1,"single command tmux send-keys "$job_command" c-m #": 1,"inside a tmux session if [ -z": 1,"call launch_gemini_in_split with the specific task file": 1,"tmux session." exit 1 fi echo "launching": 1,"but good for user experience) tmux select-pane": 1,"created pane, ensuring it's treated as a": 1,"exit 1 fi # determine gemini cli": 1,"to encapsulate subtask.sh logic # arguments: $1": 1,"the newly created pane, ensuring it's treated": 1,"]; then echo "error: no task file": 1,"a command in a new tmux split)": 1,"script combines the functionality of `subtask.sh` #": 1,"if [ -z "$job_command" ]; then echo": 1,"window..." # create a new vertical split": 1,"task_file="$1" if [ -z "$task_file" ]; then": 1,"create a new vertical split pane tmux": 1,""$tmux" ]; then echo "error: this script": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this": 1,"# send the job command to the": 1,"arguments: $1 = task_file launch_gemini_in_split() { local": 1,"exit 1 fi echo "launching command '$job_command'": 1,""error: no command provided to run_in_tmux_split." exit": 1,"task_file launch_gemini_in_split() { local task_file="$1" if [": 1,"in a new tmux split) and `gemini_split.sh`": 1,"# construct the full gemini command #": 1,"task file '$task_file' not found." exit 1": 1,"after loading the task file local gemini_command="$gemini_invocation": 1,"-z "$tmux" ]; then echo "error: this": 1,"-v # send the job command to": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"= task_file launch_gemini_in_split() { local task_file="$1" if": 1,"fi # check if we are inside": 1,"1 fi # check if we are": 1,"no task file provided to launch_gemini_in_split." exit": 1,"and `gemini_split.sh` # (launching gemini cli with": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"# # description: this script combines the": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"tmux select-pane -t :.+1 } # function": 1,"fi if [ ! -f "$task_file" ];": 1,"function to encapsulate subtask.sh logic # arguments:": 1,"must be run inside a tmux session."": 1,"functionality of `subtask.sh` # (running a command": 1,"task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"echo "error: task file '$task_file' not found."": 1,"]; then echo "error: task file '$task_file'": 1,"then echo "error: no command provided to": 1,"vertical split pane tmux split-window -v #": 1,"run inside a tmux session." exit 1": 1,"local task_file="$1" if [ -z "$task_file" ];": 1,"main execution part (from test.sh) # call": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,":.+1 } # function to encapsulate gemini_split.sh": 1,"a single command tmux send-keys "$job_command" c-m": 1,"tmux split-window -v # send the job": 1,"bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh": 1,"of `subtask.sh` # (running a command in": 1,"# main execution part (from test.sh) #": 1,"for user experience) tmux select-pane -t :.+1": 1,"the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,""$job_command" c-m # select the original pane": 1,"# file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh": 1,"file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh #": 1,"ensuring it's treated as a single command": 1,"# description: this script combines the functionality": 1,"tmux session if [ -z "$tmux" ];": 1,"are inside a tmux session if [": 1,"} # main execution part (from test.sh)": 1,"a new vertical split pane tmux split-window": 1,"# (running a command in a new": 1,"run_in_tmux_split "$gemini_command" } # main execution part": 1,"launch_gemini_in_split() { local task_file="$1" if [ -z": 1,"echo "launching command '$job_command' in a new": 1,"tmux split window..." # create a new": 1,"[ -z "$tmux" ]; then echo "error:": 1,""error: this script must be run inside": 1,"combines the functionality of `subtask.sh` # (running": 1,"part (from test.sh) # call launch_gemini_in_split with": 1,"(launching gemini cli with a task file).": 1,"job command to the newly created pane,": 1,"the job command to the newly created": 1,"new tmux split) and `gemini_split.sh` # (launching": 1,"local gemini_invocation="gemini" if command -v bun &>": 1,"the functionality of `subtask.sh` # (running a": 1,"select-pane -t :.+1 } # function to": 1,"# # ============================================================================== # function to encapsulate": 1,"provided to run_in_tmux_split." exit 1 fi #": 1,"pane tmux split-window -v # send the": 1,"{ local job_command="$1" if [ -z "$job_command"": 1,"a tmux session." exit 1 fi echo": 1,"test.sh) # call launch_gemini_in_split with the specific": 1,"# determine gemini cli invocation method (bunx": 1,"new vertical split pane tmux split-window -v": 1,"# # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description:": 1,"as a single command tmux send-keys "$job_command"": 1,"we are inside a tmux session if": 1,"# ============================================================================== # # file: launch_gemini_with_poetry_task.sh #": 1,""$gemini_command" } # main execution part (from": 1,"gemini cli invocation method (bunx or npx)": 1,"-t :.+1 } # function to encapsulate": 1,"# call launch_gemini_in_split with the specific task": 1,""error: no task file provided to launch_gemini_in_split."": 1,"continue the session after loading the task": 1,"@google/gemini-cli" fi # construct the full gemini": 1,"method (bunx or npx) local gemini_invocation="gemini" if": 1,"original pane (optional, but good for user": 1,"command '$job_command' in a new tmux split": 1,"not found." exit 1 fi # determine": 1,""error: task file '$task_file' not found." exit": 1,"1 fi if [ ! -f "$task_file"": 1,"encapsulate gemini_split.sh logic # arguments: $1 =": 1,"if we are inside a tmux session": 1,"# call the run_in_tmux_split function run_in_tmux_split "$gemini_command"": 1,"elif command -v npx &> /dev/null; then": 1,"function run_in_tmux_split "$gemini_command" } # main execution": 1,"invocation method (bunx or npx) local gemini_invocation="gemini"": 1,"tmux split) and `gemini_split.sh` # (launching gemini": 1,"gemini command # using --prompt-interactive to continue": 1,""launching command '$job_command' in a new tmux": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"pane, ensuring it's treated as a single": 1,"loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"this script combines the functionality of `subtask.sh`": 1,"]; then echo "error: this script must": 1,"gemini with `poetry_task.md`. # # ============================================================================== #": 1,"run_in_tmux_split." exit 1 fi # check if": 1,"run_in_tmux_split() { local job_command="$1" if [ -z": 1,"[ ! -f "$task_file" ]; then echo": 1,"to launch_gemini_in_split." exit 1 fi if [": 1,"--prompt-interactive to continue the session after loading": 1,"subtask.sh logic # arguments: $1 = job_command": 1,"determine gemini cli invocation method (bunx or": 1,"# # file: launch_gemini_with_poetry_task.sh # # usage:": 1,"local job_command="$1" if [ -z "$job_command" ];": 1,"1 fi # determine gemini cli invocation": 1,"session if [ -z "$tmux" ]; then": 1,"task file). it specifically # launches gemini": 1,"# create a new vertical split pane": 1,"command provided to run_in_tmux_split." exit 1 fi": 1,"encapsulate subtask.sh logic # arguments: $1 =": 1,"command tmux send-keys "$job_command" c-m # select": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script": 1,"the run_in_tmux_split function run_in_tmux_split "$gemini_command" } #": 1,"specifically # launches gemini with `poetry_task.md`. #": 1,"file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"with a task file). it specifically #": 1,"if [ -z "$tmux" ]; then echo": 1,"`poetry_task.md`. # # ============================================================================== # function to": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"(bunx or npx) local gemini_invocation="gemini" if command": 1,"\"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split": 1,"good for user experience) tmux select-pane -t": 1,"with the specific task file launch_gemini_in_split "poetry_task.md"": 1,"echo "error: no task file provided to": 1,"description: this script combines the functionality of": 1,"fi # construct the full gemini command": 1,"found." exit 1 fi # determine gemini": 1,"a task file). it specifically # launches": 1,"echo "error: no command provided to run_in_tmux_split."": 1,"new tmux split window..." # create a": 1,"then echo "error: no task file provided": 1,"`gemini_split.sh` # (launching gemini cli with a": 1,"cli with a task file). it specifically": 1,"file provided to launch_gemini_in_split." exit 1 fi": 1,"send-keys "$job_command" c-m # select the original": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines": 1,"npx) local gemini_invocation="gemini" if command -v bun": 1,"(optional, but good for user experience) tmux": 1      }
,
      "11-gram": {
"using --prompt-interactive to continue the session after loading the task file": 1,"then echo "error: task file '$task_file' not found." exit 1 fi": 1,"a single command tmux send-keys "$job_command" c-m # select the original": 1,"inside a tmux session." exit 1 fi echo "launching command '$job_command'": 1,"split pane tmux split-window -v # send the job command to": 1,"split window..." # create a new vertical split pane tmux split-window": 1,"a command in a new tmux split) and `gemini_split.sh` # (launching": 1,"the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from": 1,"the full gemini command # using --prompt-interactive to continue the session": 1,""$tmux" ]; then echo "error: this script must be run inside": 1,"# construct the full gemini command # using --prompt-interactive to continue": 1,"the original pane (optional, but good for user experience) tmux select-pane": 1,"arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z": 1,"then echo "error: no command provided to run_in_tmux_split." exit 1 fi": 1,"task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split": 1,"launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate": 1,"# function to encapsulate subtask.sh logic # arguments: $1 = job_command": 1,"new vertical split pane tmux split-window -v # send the job": 1,"run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call": 1,""error: no task file provided to launch_gemini_in_split." exit 1 fi if": 1,"# # ============================================================================== # function to encapsulate subtask.sh logic # arguments:": 1,"# # description: this script combines the functionality of `subtask.sh` #": 1,"} # main execution part (from test.sh) # call launch_gemini_in_split with": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh`": 1,"split-window -v # send the job command to the newly created": 1,"} # function to encapsulate gemini_split.sh logic # arguments: $1 =": 1,"of `subtask.sh` # (running a command in a new tmux split)": 1,"(bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"# ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh #": 1,"# arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [": 1,""$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split": 1,"run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh)": 1,"{ local task_file="$1" if [ -z "$task_file" ]; then echo "error:": 1,"# select the original pane (optional, but good for user experience)": 1,"single command tmux send-keys "$job_command" c-m # select the original pane": 1,""error: this script must be run inside a tmux session." exit": 1,"to the newly created pane, ensuring it's treated as a single": 1,"pane tmux split-window -v # send the job command to the": 1,"logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if": 1,"# description: this script combines the functionality of `subtask.sh` # (running": 1,"echo "launching command '$job_command' in a new tmux split window..." #": 1,"a tmux session." exit 1 fi echo "launching command '$job_command' in": 1,""error: task file '$task_file' not found." exit 1 fi # determine": 1,"for user experience) tmux select-pane -t :.+1 } # function to": 1,"job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then": 1,"# (launching gemini cli with a task file). it specifically #": 1,"original pane (optional, but good for user experience) tmux select-pane -t": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split": 1,"then echo "error: this script must be run inside a tmux": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"1 fi # determine gemini cli invocation method (bunx or npx)": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 =": 1,"check if we are inside a tmux session if [ -z": 1,"to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() {": 1,"# determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini"": 1,"combines the functionality of `subtask.sh` # (running a command in a": 1,"vertical split pane tmux split-window -v # send the job command": 1,"gemini command # using --prompt-interactive to continue the session after loading": 1,"if [ -z "$task_file" ]; then echo "error: no task file": 1,"be run inside a tmux session." exit 1 fi echo "launching": 1,"it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== #": 1,"(from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split": 1,"function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) #": 1,"script combines the functionality of `subtask.sh` # (running a command in": 1,"after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function": 1,"user experience) tmux select-pane -t :.+1 } # function to encapsulate": 1,"fi # determine gemini cli invocation method (bunx or npx) local": 1,"]; then echo "error: task file '$task_file' not found." exit 1": 1,"a new vertical split pane tmux split-window -v # send the": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if we are inside a tmux session if [ -z "$tmux"": 1,"select the original pane (optional, but good for user experience) tmux": 1,"encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local": 1,"newly created pane, ensuring it's treated as a single command tmux": 1,"pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic": 1,"job_command="$1" if [ -z "$job_command" ]; then echo "error: no command": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "error: no task": 1,"the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"echo "error: this script must be run inside a tmux session."": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if": 1,"# # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description:": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"1 fi echo "launching command '$job_command' in a new tmux split": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"# (running a command in a new tmux split) and `gemini_split.sh`": 1,"cli with a task file). it specifically # launches gemini with": 1,"(launching gemini cli with a task file). it specifically # launches": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"no command provided to run_in_tmux_split." exit 1 fi # check if": 1,"-v # send the job command to the newly created pane,": 1,"this script must be run inside a tmux session." exit 1": 1,"(optional, but good for user experience) tmux select-pane -t :.+1 }": 1,"`gemini_split.sh` # (launching gemini cli with a task file). it specifically": 1,"new tmux split window..." # create a new vertical split pane": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"script must be run inside a tmux session." exit 1 fi": 1,"# file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this": 1,"1 fi # check if we are inside a tmux session": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"# arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [": 1,"we are inside a tmux session if [ -z "$tmux" ];": 1,""$job_command" c-m # select the original pane (optional, but good for": 1,"= job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ];": 1,"fi echo "launching command '$job_command' in a new tmux split window..."": 1,"method (bunx or npx) local gemini_invocation="gemini" if command -v bun &>": 1,"main execution part (from test.sh) # call launch_gemini_in_split with the specific": 1,"to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ];": 1,"good for user experience) tmux select-pane -t :.+1 } # function": 1,"gemini cli with a task file). it specifically # launches gemini": 1,"\"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main": 1,"session." exit 1 fi echo "launching command '$job_command' in a new": 1,"to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() {": 1,"the job command to the newly created pane, ensuring it's treated": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"exit 1 fi # check if we are inside a tmux": 1,"functionality of `subtask.sh` # (running a command in a new tmux": 1,"[ -z "$tmux" ]; then echo "error: this script must be": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command"": 1,"a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # #": 1,"specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function": 1,"tmux split-window -v # send the job command to the newly": 1,""launching command '$job_command' in a new tmux split window..." # create": 1,"run_in_tmux_split." exit 1 fi # check if we are inside a": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"then echo "error: no task file provided to launch_gemini_in_split." exit 1": 1,":.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1": 1,"and `gemini_split.sh` # (launching gemini cli with a task file). it": 1,"# check if we are inside a tmux session if [": 1,"# call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution": 1,"experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z": 1,"c-m # select the original pane (optional, but good for user": 1,"a task file). it specifically # launches gemini with `poetry_task.md`. #": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"task file provided to launch_gemini_in_split." exit 1 fi if [ !": 1,"the functionality of `subtask.sh` # (running a command in a new": 1,"if [ -z "$tmux" ]; then echo "error: this script must": 1,"-t :.+1 } # function to encapsulate gemini_split.sh logic # arguments:": 1,"launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"exit 1 fi # determine gemini cli invocation method (bunx or": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"exit 1 fi echo "launching command '$job_command' in a new tmux": 1,"the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the": 1,"to continue the session after loading the task file local gemini_command="$gemini_invocation": 1,"tmux session." exit 1 fi echo "launching command '$job_command' in a": 1,"call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part": 1,"task file '$task_file' not found." exit 1 fi # determine gemini": 1,"no task file provided to launch_gemini_in_split." exit 1 fi if [": 1,"are inside a tmux session if [ -z "$tmux" ]; then": 1,"determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if": 1,"if [ ! -f "$task_file" ]; then echo "error: task file": 1,""$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit": 1,"construct the full gemini command # using --prompt-interactive to continue the": 1,"function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split()": 1,"file). it specifically # launches gemini with `poetry_task.md`. # # ==============================================================================": 1,"{ local job_command="$1" if [ -z "$job_command" ]; then echo "error:": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1"": 1,"local job_command="$1" if [ -z "$job_command" ]; then echo "error: no": 1,"a new tmux split) and `gemini_split.sh` # (launching gemini cli with": 1,"command # using --prompt-interactive to continue the session after loading the": 1,"fi # construct the full gemini command # using --prompt-interactive to": 1,"or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"but good for user experience) tmux select-pane -t :.+1 } #": 1,"must be run inside a tmux session." exit 1 fi echo": 1,"# ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1": 1,"command in a new tmux split) and `gemini_split.sh` # (launching gemini": 1,"it's treated as a single command tmux send-keys "$job_command" c-m #": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality": 1,"window..." # create a new vertical split pane tmux split-window -v": 1,"execution part (from test.sh) # call launch_gemini_in_split with the specific task": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"inside a tmux session if [ -z "$tmux" ]; then echo": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic #": 1,"description: this script combines the functionality of `subtask.sh` # (running a": 1,""error: no command provided to run_in_tmux_split." exit 1 fi # check": 1,"# using --prompt-interactive to continue the session after loading the task": 1,"command tmux send-keys "$job_command" c-m # select the original pane (optional,": 1,"the newly created pane, ensuring it's treated as a single command": 1,"provided to run_in_tmux_split." exit 1 fi # check if we are": 1,"# send the job command to the newly created pane, ensuring": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage:": 1,"loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"echo "error: no command provided to run_in_tmux_split." exit 1 fi #": 1,"gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command": 1,""$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split."": 1,"with a task file). it specifically # launches gemini with `poetry_task.md`.": 1,"npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"create a new vertical split pane tmux split-window -v # send": 1,"if [ -z "$job_command" ]; then echo "error: no command provided": 1,"job command to the newly created pane, ensuring it's treated as": 1,"]; then echo "error: no task file provided to launch_gemini_in_split." exit": 1,"-z "$task_file" ]; then echo "error: no task file provided to": 1,"# create a new vertical split pane tmux split-window -v #": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"created pane, ensuring it's treated as a single command tmux send-keys": 1,"$1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file"": 1,"tmux split window..." # create a new vertical split pane tmux": 1,"run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo": 1,"'$job_command' in a new tmux split window..." # create a new": 1,"# launches gemini with `poetry_task.md`. # # ============================================================================== # function to": 1,"full gemini command # using --prompt-interactive to continue the session after": 1,"split) and `gemini_split.sh` # (launching gemini cli with a task file).": 1,"task file). it specifically # launches gemini with `poetry_task.md`. # #": 1,"= task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ];": 1,"as a single command tmux send-keys "$job_command" c-m # select the": 1,"in a new tmux split window..." # create a new vertical": 1,"part (from test.sh) # call launch_gemini_in_split with the specific task file": 1,"# main execution part (from test.sh) # call launch_gemini_in_split with the": 1,"--prompt-interactive to continue the session after loading the task file local": 1,"encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local": 1,"-z "$tmux" ]; then echo "error: this script must be run": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"-z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split."": 1,"(running a command in a new tmux split) and `gemini_split.sh` #": 1,"test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split "poetry_task.md"": 1,"local task_file="$1" if [ -z "$task_file" ]; then echo "error: no": 1,"]; then echo "error: this script must be run inside a": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"tmux split) and `gemini_split.sh` # (launching gemini cli with a task": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" }": 1,"--prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } #": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then": 1,"subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1"": 1,"ensuring it's treated as a single command tmux send-keys "$job_command" c-m": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"[ -z "$task_file" ]; then echo "error: no task file provided": 1,"task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then": 1,"gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh": 1,"file provided to launch_gemini_in_split." exit 1 fi if [ ! -f": 1,"to run_in_tmux_split." exit 1 fi # check if we are inside": 1,"pane, ensuring it's treated as a single command tmux send-keys "$job_command"": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file"": 1,"command to the newly created pane, ensuring it's treated as a": 1,"this script combines the functionality of `subtask.sh` # (running a command": 1,"send-keys "$job_command" c-m # select the original pane (optional, but good": 1,"# # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the": 1,"send the job command to the newly created pane, ensuring it's": 1,"run inside a tmux session." exit 1 fi echo "launching command": 1,"`subtask.sh` # (running a command in a new tmux split) and": 1,"session if [ -z "$tmux" ]; then echo "error: this script": 1,"cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v": 1,"not found." exit 1 fi # determine gemini cli invocation method": 1,"tmux send-keys "$job_command" c-m # select the original pane (optional, but": 1,"with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"fi # check if we are inside a tmux session if": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"$1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command"": 1,"treated as a single command tmux send-keys "$job_command" c-m # select": 1,"file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script": 1,"in a new tmux split) and `gemini_split.sh` # (launching gemini cli": 1,"echo "error: task file '$task_file' not found." exit 1 fi #": 1,"`poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic #": 1,"command '$job_command' in a new tmux split window..." # create a": 1,"# function to encapsulate gemini_split.sh logic # arguments: $1 = task_file": 1,"command provided to run_in_tmux_split." exit 1 fi # check if we": 1,"launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo": 1,"a new tmux split window..." # create a new vertical split": 1,"invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun": 1,"]; then echo "error: no command provided to run_in_tmux_split." exit 1": 1,"function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split()": 1,"new tmux split) and `gemini_split.sh` # (launching gemini cli with a": 1,"echo "error: no task file provided to launch_gemini_in_split." exit 1 fi": 1,"[ -z "$job_command" ]; then echo "error: no command provided to": 1,"bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh": 1      }
,
      "13-gram": {
"call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh)": 1,"file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command"": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) #": 1,"invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,""$job_command" c-m # select the original pane (optional, but good for user experience)": 1,"specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate": 1,"using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation": 1,"============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this": 1,"newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command"": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main": 1,"task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split": 1,""error: no command provided to run_in_tmux_split." exit 1 fi # check if we": 1,"send the job command to the newly created pane, ensuring it's treated as": 1,"# file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines": 1,"\"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided": 1,"session." exit 1 fi echo "launching command '$job_command' in a new tmux split": 1,"to the newly created pane, ensuring it's treated as a single command tmux": 1,"npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"cli with a task file). it specifically # launches gemini with `poetry_task.md`. #": 1,"user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic": 1,"launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality": 1,"must be run inside a tmux session." exit 1 fi echo "launching command": 1,"a tmux session if [ -z "$tmux" ]; then echo "error: this script": 1,"run inside a tmux session." exit 1 fi echo "launching command '$job_command' in": 1,"task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error:": 1,"window..." # create a new vertical split pane tmux split-window -v # send": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"(optional, but good for user experience) tmux select-pane -t :.+1 } # function": 1,"subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [": 1,"execution part (from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"fi # check if we are inside a tmux session if [ -z": 1,"launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic": 1,"the functionality of `subtask.sh` # (running a command in a new tmux split)": 1,"`poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx or npx)": 1,"tmux split-window -v # send the job command to the newly created pane,": 1,"]; then echo "error: this script must be run inside a tmux session."": 1,"{ local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command": 1,"main execution part (from test.sh) # call launch_gemini_in_split with the specific task file": 1,"# determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "error: no task file provided to": 1,"pane (optional, but good for user experience) tmux select-pane -t :.+1 } #": 1,"'$job_command' in a new tmux split window..." # create a new vertical split": 1,"the newly created pane, ensuring it's treated as a single command tmux send-keys": 1,"1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini"": 1,"not found." exit 1 fi # determine gemini cli invocation method (bunx or": 1,"-z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit": 1,"`subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` #": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"are inside a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"command tmux send-keys "$job_command" c-m # select the original pane (optional, but good": 1,"of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh`": 1,"a tmux session." exit 1 fi echo "launching command '$job_command' in a new": 1,"echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this script must": 1,"# ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command": 1,"task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file"": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"check if we are inside a tmux session if [ -z "$tmux" ];": 1,"run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue": 1,"} # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split()": 1,"functionality of `subtask.sh` # (running a command in a new tmux split) and": 1,"gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`.": 1,"# using --prompt-interactive to continue the session after loading the task file local": 1,"command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with": 1,"local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided": 1,"exit 1 fi # determine gemini cli invocation method (bunx or npx) local": 1,"provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" }": 1,"and `gemini_split.sh` # (launching gemini cli with a task file). it specifically #": 1,"= job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo": 1,"# ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description:": 1,"# description: this script combines the functionality of `subtask.sh` # (running a command": 1,""error: this script must be run inside a tmux session." exit 1 fi": 1,"# (launching gemini cli with a task file). it specifically # launches gemini": 1,"then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check": 1,"arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ];": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"`gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches": 1,"it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to": 1,"============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split()": 1,"vertical split pane tmux split-window -v # send the job command to the": 1,"then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if": 1,"it's treated as a single command tmux send-keys "$job_command" c-m # select the": 1,"1 fi echo "launching command '$job_command' in a new tmux split window..." #": 1,"]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi": 1,"exit 1 fi echo "launching command '$job_command' in a new tmux split window..."": 1,"# function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() {": 1,"# create a new vertical split pane tmux split-window -v # send the": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"treated as a single command tmux send-keys "$job_command" c-m # select the original": 1,"bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # #": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"inside a tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically": 1,"tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux": 1,"we are inside a tmux session if [ -z "$tmux" ]; then echo": 1,"# main execution part (from test.sh) # call launch_gemini_in_split with the specific task": 1,"with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments:": 1,"create a new vertical split pane tmux split-window -v # send the job": 1,"pane tmux split-window -v # send the job command to the newly created": 1,"session if [ -z "$tmux" ]; then echo "error: this script must be": 1,""$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"# # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script": 1,"function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local": 1,"(running a command in a new tmux split) and `gemini_split.sh` # (launching gemini": 1,"to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if": 1,"split-window -v # send the job command to the newly created pane, ensuring": 1,"fi echo "launching command '$job_command' in a new tmux split window..." # create": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh #": 1,"if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split."": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"send-keys "$job_command" c-m # select the original pane (optional, but good for user": 1,"single command tmux send-keys "$job_command" c-m # select the original pane (optional, but": 1,"function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local": 1,"--prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"tmux send-keys "$job_command" c-m # select the original pane (optional, but good for": 1,"launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no": 1,"select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1": 1,"created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m": 1,"to run_in_tmux_split." exit 1 fi # check if we are inside a tmux": 1,"encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if": 1,"[ -z "$tmux" ]; then echo "error: this script must be run inside": 1,"no command provided to run_in_tmux_split." exit 1 fi # check if we are": 1,"-z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } #": 1,"method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"# launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh": 1,"$1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then": 1,"]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi #": 1,"script must be run inside a tmux session." exit 1 fi echo "launching": 1,"provided to run_in_tmux_split." exit 1 fi # check if we are inside a": 1,"in a new tmux split window..." # create a new vertical split pane": 1,"command to the newly created pane, ensuring it's treated as a single command": 1,"# construct the full gemini command # using --prompt-interactive to continue the session": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &>": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z": 1,"file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the": 1,"local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file": 1,"a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli": 1,"$1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then": 1,"then echo "error: this script must be run inside a tmux session." exit": 1,"gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun": 1,"good for user experience) tmux select-pane -t :.+1 } # function to encapsulate": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task": 1,"# (running a command in a new tmux split) and `gemini_split.sh` # (launching": 1,"fi # construct the full gemini command # using --prompt-interactive to continue the": 1,"select the original pane (optional, but good for user experience) tmux select-pane -t": 1,"ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select": 1,"in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a": 1,"(launching gemini cli with a task file). it specifically # launches gemini with": 1,"but good for user experience) tmux select-pane -t :.+1 } # function to": 1,"c-m # select the original pane (optional, but good for user experience) tmux": 1,"a task file). it specifically # launches gemini with `poetry_task.md`. # # ==============================================================================": 1,"after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the": 1,"for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh": 1,"full gemini command # using --prompt-interactive to continue the session after loading the": 1,"the full gemini command # using --prompt-interactive to continue the session after loading": 1,"to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1"": 1,"new tmux split window..." # create a new vertical split pane tmux split-window": 1,"-z "$tmux" ]; then echo "error: this script must be run inside a": 1,"a new vertical split pane tmux split-window -v # send the job command": 1,"part (from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split "poetry_task.md"": 1,"tmux split window..." # create a new vertical split pane tmux split-window -v": 1,"pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m #": 1,"a single command tmux send-keys "$job_command" c-m # select the original pane (optional,": 1,"{ local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task": 1,"a new tmux split window..." # create a new vertical split pane tmux": 1,"split window..." # create a new vertical split pane tmux split-window -v #": 1,"if [ -z "$tmux" ]; then echo "error: this script must be run": 1,"be run inside a tmux session." exit 1 fi echo "launching command '$job_command'": 1,"run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call": 1,"run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no": 1,""launching command '$job_command' in a new tmux split window..." # create a new": 1,"echo "error: this script must be run inside a tmux session." exit 1": 1,"loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split": 1,"# function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() {": 1,"tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments:": 1,"this script combines the functionality of `subtask.sh` # (running a command in a": 1,"description: this script combines the functionality of `subtask.sh` # (running a command in": 1,""$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1": 1,"exit 1 fi # check if we are inside a tmux session if": 1,"with a task file). it specifically # launches gemini with `poetry_task.md`. # #": 1,"job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error:": 1,""error: no task file provided to launch_gemini_in_split." exit 1 fi if [ !": 1,"# select the original pane (optional, but good for user experience) tmux select-pane": 1,"the job command to the newly created pane, ensuring it's treated as a": 1,"function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1"": 1,"echo "launching command '$job_command' in a new tmux split window..." # create a": 1,"to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to": 1,"command '$job_command' in a new tmux split window..." # create a new vertical": 1,"split pane tmux split-window -v # send the job command to the newly": 1,"# call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # determine": 1,"tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it": 1,"this script must be run inside a tmux session." exit 1 fi echo": 1,"echo "error: task file '$task_file' not found." exit 1 fi # determine gemini": 1,"no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f": 1,"# check if we are inside a tmux session if [ -z "$tmux"": 1,"logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"combines the functionality of `subtask.sh` # (running a command in a new tmux": 1,"new vertical split pane tmux split-window -v # send the job command to": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"task file '$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running": 1,"1 fi # check if we are inside a tmux session if [": 1,"new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file).": 1,"the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function": 1,"command # using --prompt-interactive to continue the session after loading the task file": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"gemini command # using --prompt-interactive to continue the session after loading the task": 1,"as a single command tmux send-keys "$job_command" c-m # select the original pane": 1,"# arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command"": 1,"gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic #": 1,"command provided to run_in_tmux_split." exit 1 fi # check if we are inside": 1,"inside a tmux session." exit 1 fi echo "launching command '$job_command' in a": 1,"continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"[ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit": 1,"# send the job command to the newly created pane, ensuring it's treated": 1,"session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ];": 1,"gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [": 1,"determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v": 1,"if we are inside a tmux session if [ -z "$tmux" ]; then": 1,""$tmux" ]; then echo "error: this script must be run inside a tmux": 1,"script combines the functionality of `subtask.sh` # (running a command in a new": 1,"-v # send the job command to the newly created pane, ensuring it's": 1,"} # main execution part (from test.sh) # call launch_gemini_in_split with the specific": 1,"= task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo": 1,"# # description: this script combines the functionality of `subtask.sh` # (running a": 1,"the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ];": 1,"the original pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if": 1,""error: task file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"job command to the newly created pane, ensuring it's treated as a single": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== #": 1,"file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function": 1,"construct the full gemini command # using --prompt-interactive to continue the session after": 1,"launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"# # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of": 1,"# # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 =": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh`": 1,"encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if": 1,"# arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file"": 1,"original pane (optional, but good for user experience) tmux select-pane -t :.+1 }": 1,""$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi": 1,"(bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"[ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split."": 1,"--prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution": 1,":.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli invocation method": 1,"-t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 =": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` #": 1,"run_in_tmux_split." exit 1 fi # check if we are inside a tmux session": 1,"experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic #": 1      }
,
      "19-gram": {
"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ];": 1,"--prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split": 1,":.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [": 1,"a new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring": 1,"# create a new vertical split pane tmux split-window -v # send the job command to the newly created": 1,"tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a single": 1,"logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no": 1,"function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ];": 1,"inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh)": 1,"echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx)": 1,"the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli": 1,"new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command": 1,"'$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send": 1,"inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create": 1,"new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's": 1,"local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file": 1,"# function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command"": 1,"# send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after": 1,"created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional,": 1,"[ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session": 1,"to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split": 1,"no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [": 1,"[ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ !": 1,"# description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and": 1,"# # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if": 1,"the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution": 1,"construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic": 1,"]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command": 1,"the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original": 1,"vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated": 1,"(bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,""$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } #": 1,"a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux": 1,"it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for": 1,"not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v": 1,"(running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it": 1,"split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific": 1,"# ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [": 1,"echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session": 1,"split-window -v # send the job command to the newly created pane, ensuring it's treated as a single command": 1,"window..." # create a new vertical split pane tmux split-window -v # send the job command to the newly": 1,"a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic": 1,"newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane": 1,"arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file": 1,"`gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ==============================================================================": 1,"loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main": 1,"gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit": 1,"# function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file"": 1,"file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a": 1,"launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to": 1,""launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v": 1,"# arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task": 1,""error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue": 1,"cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"$1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to": 1,"then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then": 1,"= task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to": 1,"-v # send the job command to the newly created pane, ensuring it's treated as a single command tmux": 1,"echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window": 1,"command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically #": 1,"single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane": 1,"run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." #": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no": 1,"then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux": 1,"split window..." # create a new vertical split pane tmux split-window -v # send the job command to the": 1,"create a new vertical split pane tmux split-window -v # send the job command to the newly created pane,": 1,"split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. #": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if": 1,"(launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method": 1,"(optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments:": 1,"gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &>": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the": 1,"to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"{ local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi": 1,""$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching": 1,"1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane": 1,"c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function": 1,"the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"} # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z": 1,"the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh": 1,"experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() {": 1,"good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 =": 1,"command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux"": 1,"-z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f": 1,"arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided": 1,"select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate": 1,"tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new": 1,"# using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo": 1,"command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select": 1,"# (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file).": 1,"1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical": 1,"to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the": 1,"command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the": 1,"\"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with": 1,"the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command"": 1,"send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command"": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a": 1,"a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a": 1,"script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux": 1,"# ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of": 1,"session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit": 1,"`poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1"": 1,"to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then": 1,"task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic #": 1,"the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task": 1,""$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside": 1,"# arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command": 1,"job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m #": 1,"tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`.": 1,"`subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task": 1,"with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local": 1,""error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local": 1,"provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,""error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if": 1,"with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh": 1,"file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches": 1,"echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in": 1,"if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be": 1,"a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini": 1,"and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # #": 1,"send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 }": 1,"# file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running": 1,"gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() {": 1,"this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new": 1,"pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or": 1,"launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task file": 1,"task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new": 1,"specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 =": 1,"functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with": 1,"it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1": 1,"combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini": 1,"bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality": 1,"# # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split)": 1,"we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run": 1,"command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"$1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided": 1,"a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job": 1,"# # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` #": 1,"gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to": 1,"function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split": 1,"gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error:": 1,"pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session."": 1,"be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..."": 1,"description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh`": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split()": 1,"invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1,"run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then": 1,"select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1"": 1,""$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file"": 1,"function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ];": 1,"then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command'": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command": 1,"if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [": 1,"new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with": 1,"task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split."": 1,"command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v #": 1,"============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z": 1,"if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if": 1,"fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux": 1,"-z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are": 1,"script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching": 1,"determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ];": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the": 1,"check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,"= job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split."": 1,"user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split()": 1,"a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"-t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if": 1,"# select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to": 1,"local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi #": 1,"exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if": 1,"============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh`": 1,"encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo": 1,"or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"# (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== #": 1,"to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then": 1,"tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux": 1,""error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a": 1,"# # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in": 1,"# check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script": 1,"full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience)": 1,"this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` #": 1,"[ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we": 1,"are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside": 1,"# determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini": 1,"fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file": 1,"file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments:": 1,"the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m": 1,"run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split "poetry_task.md"": 1,"method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini"": 1,"file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from": 1,"a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically": 1,"task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"{ local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1": 1,"job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit": 1,"continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split": 1,"pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic #": 1,"job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check": 1,"tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good": 1,"but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1": 1,"cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate": 1,"# call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) #": 1,"if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1": 1,"local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi": 1,"fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading": 1,"run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1": 1,"after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } #": 1,"--prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split": 1,"# construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local": 1,"fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a": 1,"tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command to": 1,"session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" }": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun": 1,"-z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo": 1,"# launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command": 1,"exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split": 1,"using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error:": 1      }
,
      "23-gram": {
"# # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching": 1,"# usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and": 1,"# using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split": 1,"(optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split()": 1,"npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the": 1,"-v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command": 1,"as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical": 1,"full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the": 1,"# ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a": 1,"-z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session": 1,"command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after": 1,"gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue": 1,"task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun": 1,"then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux": 1,"split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function": 1,"must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a": 1,"\"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task file": 1,"fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run": 1,"split window..." # create a new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring": 1,"determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx": 1,"command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo": 1,"# # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split)": 1,"echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane": 1,"# check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside": 1,"[ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command'": 1,"command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function": 1,"subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to": 1,"`subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically #": 1,"'$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command to": 1,"file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &>": 1,"in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. #": 1,"the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution": 1,"for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1"": 1,"and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to": 1,"arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1": 1,"run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script": 1,"# function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error:": 1,"]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new": 1,"task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method": 1,"exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v": 1,"echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command": 1,"local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are": 1,"split-window -v # send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m": 1,"with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1": 1,"job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane": 1,"after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from": 1,"file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit": 1,"the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call": 1,"original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 =": 1,"# file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a": 1,"to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command": 1,"encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file": 1,"if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a": 1,"split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a single command tmux": 1,"(bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli"": 1,""$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a": 1,"{ local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ !": 1,"bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command #": 1,""$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh": 1,"if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command": 1,"we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session."": 1,"elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session": 1,""launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job": 1,"gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the": 1,"launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [": 1,"cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments:": 1,"a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # #": 1,"send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the": 1,"task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"# (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches": 1,"a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi": 1,"continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main": 1,"function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no": 1,"= job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi #": 1,"gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided": 1,"# description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini": 1,"# # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ];": 1,"tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z": 1,"loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh)": 1,"pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file": 1,"combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task": 1,"{ local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we": 1,"this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with": 1,"[ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then": 1,"the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1": 1,"usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh`": 1,"provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command to the newly created": 1,"--prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" }": 1,""error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo": 1,"cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null;": 1,"exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli"": 1,"fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send": 1,"description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli": 1,"]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [": 1,""error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx)": 1,"# send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select": 1,"-v # send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m #": 1,"not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then": 1,"tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command to the newly created pane,": 1,"this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." #": 1,"============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo": 1,"then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z": 1,"/dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file": 1,"command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional,": 1,"to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux": 1,"a new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a": 1,"# select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic #": 1,"run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if": 1,"(running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini": 1,"the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original": 1,"launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux": 1,"session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching": 1,"@google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash": 1,"&> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using": 1,"but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() {": 1,"tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to": 1,"file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split()": 1,"inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1": 1,"create a new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as": 1,"select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file"": 1,"of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically": 1,"the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file).": 1,"task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command": 1,"a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command to the newly": 1,"created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user": 1,"in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command to the": 1,"# arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit": 1,"'$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null;": 1,"if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ];": 1,"exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must": 1,"-v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading": 1,"gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic #": 1,"./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` #": 1,"then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"-z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in": 1,""error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..."": 1,"session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part": 1,"1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif": 1,"# function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error:": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli": 1,"1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v #": 1,"construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" #": 1,"treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` #": 1,"the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good": 1,"a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 }": 1,"encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided": 1,"1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be": 1,"experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [": 1,"job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check": 1,""$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic": 1,"check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a": 1,"$1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi": 1,"fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command": 1,"to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but": 1,"echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split": 1,"`gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate": 1,"new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a single": 1,"gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation": 1,"function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no": 1,"a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 =": 1,"no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() {": 1,"new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ==============================================================================": 1,"logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split."": 1,"with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z": 1,"newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for": 1,"provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command": 1,"pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys": 1,"vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a single command": 1,"gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [": 1,"method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx": 1,"file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in a new": 1,"[ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux": 1,"script must be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local": 1,"pane, ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience)": 1,"inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split": 1,"launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine": 1,"user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if": 1,"specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local": 1,"--model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini"": 1,"# (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh": 1,"a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane": 1,"call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split "poetry_task.md"": 1,"command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`.": 1,"/dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini cli invocation method (bunx or": 1,"window..." # create a new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's": 1,"functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it": 1,"or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi": 1,"ensuring it's treated as a single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux": 1,"script combines the functionality of `subtask.sh` # (running a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a": 1,"local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct": 1,"# # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running a command in": 1,"-z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"# ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command" ]; then": 1,"tmux split-window -v # send the job command to the newly created pane, ensuring it's treated as a single command tmux send-keys "$job_command"": 1,"npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi #": 1,"found." exit 1 fi # determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx": 1,"task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if": 1,""error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ];": 1,"tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux": 1,"command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function": 1,"good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local": 1,"gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the": 1,":.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then": 1,"be run inside a tmux session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new": 1,"# construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\""": 1,"&> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task": 1,"then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to": 1,"]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"bash # ============================================================================== # # file: launch_gemini_with_poetry_task.sh # # usage: ./scripts/cli/launch_gemini_with_poetry_task.sh # # description: this script combines the functionality of `subtask.sh` # (running": 1,"a command in a new tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with": 1,"fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive": 1,"single command tmux send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } #": 1,"local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file"": 1,"# arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split."": 1,"logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to": 1,""$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if": 1,"# create a new vertical split pane tmux split-window -v # send the job command to the newly created pane, ensuring it's treated": 1,"then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the session after loading the task file local": 1,"arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit": 1,"-t :.+1 } # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ];": 1,"# call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task file launch_gemini_in_split": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # determine gemini": 1,"= task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi": 1,"echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux"": 1,"echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the": 1,"invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then": 1,"to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task": 1,"job_command="$1" if [ -z "$job_command" ]; then echo "error: no command provided to run_in_tmux_split." exit 1 fi # check if we are inside": 1,"the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) #": 1,"to launch_gemini_in_split." exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"(launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic": 1,"if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full": 1,"} # function to encapsulate gemini_split.sh logic # arguments: $1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo": 1,"gemini command # using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split": 1,"send-keys "$job_command" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate": 1,"session." exit 1 fi echo "launching command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window": 1,"select the original pane (optional, but good for user experience) tmux select-pane -t :.+1 } # function to encapsulate gemini_split.sh logic # arguments:": 1,"command '$job_command' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job command": 1,"to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } #": 1,"using --prompt-interactive to continue the session after loading the task file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command"": 1,"@google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini command # using --prompt-interactive to continue the": 1,"gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &>": 1,"`poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if [ -z "$job_command"": 1,"file local gemini_command="$gemini_invocation --model=gemini-2.5-flash --prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split": 1,"command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v npx &> /dev/null; then gemini_invocation="npx @google/gemini-cli" fi # construct the full gemini": 1,"no command provided to run_in_tmux_split." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then": 1,"local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1 fi if [ ! -f": 1,"$1 = task_file launch_gemini_in_split() { local task_file="$1" if [ -z "$task_file" ]; then echo "error: no task file provided to launch_gemini_in_split." exit 1": 1,"# launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1"": 1,"launches gemini with `poetry_task.md`. # # ============================================================================== # function to encapsulate subtask.sh logic # arguments: $1 = job_command run_in_tmux_split() { local job_command="$1" if": 1,"tmux split) and `gemini_split.sh` # (launching gemini cli with a task file). it specifically # launches gemini with `poetry_task.md`. # # ============================================================================== #": 1,"--prompt-interactive \"@$task_file\"" # call the run_in_tmux_split function run_in_tmux_split "$gemini_command" } # main execution part (from test.sh) # call launch_gemini_in_split with the specific task": 1,"# determine gemini cli invocation method (bunx or npx) local gemini_invocation="gemini" if command -v bun &> /dev/null; then gemini_invocation="bunx @google/gemini-cli" elif command -v": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/session/start_development_session.sh": {
      "1-gram": {
"+"%y%m%d_%h%m%s")": 1,"unique": 1,"log": 1,"[": 2,""${log_dir}"": 1,"session_name": 1,"script": 2,"wait": 1,"\"$session_name\"": 1,""$log_dir"": 1,"directory": 2,"'$task_file'": 1,""usage:": 1,"-p": 2,"with": 1,"(i.e.,": 1,"\"$asciinema_rec_file\"": 1,"asciinema": 4,"exists": 1,"used": 1,"define": 1,"session_name="gemini-dev-session"": 1,"configured": 1,"launches": 1,"file:": 1,"finishes": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"rec": 1,"exit": 2,"here": 2,"orchestrates": 1,"this": 2,"timestamp=$(date": 1,"-f": 1,"be": 2,"configuration": 1,"asciinema,": 1,"==============================================================================": 2,"asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,""error:": 1,""$task_file"": 2,"gemini": 2,"of": 1,"the": 8,"\"$task_file\""": 1,"<task_file>"": 1,"$0": 1,"task_file="$1"": 1,"to": 2,"cli": 2,"and": 1,"tmux": 2,"a": 2,"bash": 1,"output": 1,"in": 2,"!": 1,"project.": 1,"for": 1,"then": 3,"recording": 3,"start_development_session.sh": 1,"until": 1,"saved": 1,"start": 2,"ensure": 1,"description:": 1,"found."": 1,"echo": 2,"];": 2,"file": 3,"task": 2,"that": 1,"within": 1,"usage:": 1,"#": 19,"exits)": 1,"--command": 1,"will": 2,"not": 1,"1": 2,"./scripts/session/start_development_session.sh": 1,"background": 1,"-z": 1,"by": 1,"mkdir": 2,"#!/usr/bin/env": 1,""$asciinema_rec_file"": 1,"logs": 1,"fi": 2,"if": 2,"log_dir="${home}/logs/gemini"": 1,"session,": 1,"session": 2      }
,
      "2-gram": {
""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"recording asciinema": 1,"logs directory": 1,"# ensure": 1,"[ !": 1,"exit 1": 2,"define session_name": 1,"configuration session_name="gemini-dev-session"": 1,"# configuration": 1,"gemini cli": 2,"asciinema, and": 1,"script will": 1,"\"$asciinema_rec_file\" \"$session_name\"": 1,""$asciinema_rec_file" --command": 1,"# the": 2,"found." exit": 1,"not found."": 1,""$task_file" ];": 2,"[ -z": 1,"cli within": 1,"# description:": 1,"# usage:": 1,"session exits)": 1,"here until": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"timestamp=$(date +"%y%m%d_%h%m%s")": 1,"directory timestamp=$(date": 1,"be saved": 1,"# start": 2,""$log_dir" #": 1,"echo "usage:": 1,"session_name here": 1,"for this": 1,"launches the": 1,"then launches": 1,"wait here": 1,"rec "$asciinema_rec_file"": 1,"the logs": 1,"directory exists": 1,"1 fi": 2,"$0 <task_file>"": 1,"by the": 1,"used by": 1,"this project.": 1,"the recording": 1,"orchestrates the": 1,"description: this": 1,"the output": 1,""${log_dir}" #": 1,"configured for": 1,"within that": 1,"with #": 1,"script orchestrates": 1,"file: start_development_session.sh": 1,"\"$session_name\" \"$task_file\""": 1,""error: task": 1,"-z "$task_file"": 1,"of a": 1,"this script": 1,"start_development_session.sh #": 1,"the script": 1,"background #": 1,"in the": 2,"exists mkdir": 1,"echo "error:": 1,"# task": 1,"mkdir -p": 2,"session, configured": 1,"bash #": 1,"ensure log": 1,"! -f": 1,""usage: $0": 1,"task_file="$1" if": 1,"task file": 2,"log_dir="${home}/logs/gemini" mkdir": 1,"# define": 1,"session_name="gemini-dev-session" #": 1,"project. #": 1,"# asciinema,": 1,"session with": 1,"a tmux": 1,"recording of": 1,"until asciinema": 1,"asciinema rec": 1,"unique file": 1,"a unique": 1,"saved to": 1,"will be": 1,"log directory": 1,"'$task_file' not": 1,"fi if": 1,"then echo": 2,"-p "${log_dir}"": 1,"./scripts/session/start_development_session.sh #": 1,"# #": 4,"(i.e., the": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"recording in": 1,"-p "$log_dir"": 1,"if [": 2,"file to": 1,"tmux session": 2,"# file:": 1,"#!/usr/bin/env bash": 1,"the tmux": 1,"file in": 1,"start asciinema": 2,"fi #": 1,"cli task_file="$1"": 1,"be used": 1,"that #": 1,"and then": 1,"============================================================================== #": 2,"will wait": 1,"\"$task_file\"" #": 1,"output will": 1,"the background": 1,"# session,": 1,"the gemini": 2,"usage: ./scripts/session/start_development_session.sh": 1,"# ==============================================================================": 2,"finishes (i.e.,": 1,"asciinema finishes": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"to a": 1,"asciinema recording": 2,"file '$task_file'": 1,"-f "$task_file"": 1,"<task_file>" exit": 1,"]; then": 2,"to be": 1,"here log_dir="${home}/logs/gemini"": 1      }
,
      "3-gram": {
"]; then echo": 2,"description: this script": 1,"will wait here": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"to a unique": 1,"log_dir="${home}/logs/gemini" mkdir -p": 1,"echo "error: task": 1,"orchestrates the recording": 1,"# start asciinema": 2,"the gemini cli": 2,"within that #": 1,"-p "$log_dir" #": 1,"-f "$task_file" ];": 1,"(i.e., the tmux": 1,"log directory exists": 1,"# # usage:": 1,""error: task file": 1,"usage: ./scripts/session/start_development_session.sh #": 1,"<task_file>" exit 1": 1,"tmux session exits)": 1,""$task_file" ]; then": 2,"# task file": 1,"in the background": 1,"-p "${log_dir}" #": 1,"exit 1 fi": 2,"# file: start_development_session.sh": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"this project. #": 1,"start_development_session.sh # #": 1,"asciinema rec "$asciinema_rec_file"": 1,"the recording of": 1,"the logs directory": 1,"asciinema, and then": 1,"gemini cli within": 1,"rec "$asciinema_rec_file" --command": 1,"recording of a": 1,"directory exists mkdir": 1,"script orchestrates the": 1,"here log_dir="${home}/logs/gemini" mkdir": 1,"if [ !": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"# configuration session_name="gemini-dev-session"": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"! -f "$task_file"": 1,"recording in the": 1,"project. # #": 1,"launches the gemini": 1,"ensure log directory": 1,"output will be": 1,"cli within that": 1,""${log_dir}" # task": 1,"then echo "error:": 1,"and then launches": 1,"./scripts/session/start_development_session.sh # #": 1,"to be used": 1,"session with #": 1,"the script will": 1,"fi if [": 1,""usage: $0 <task_file>"": 1,""$log_dir" # start": 1,"in the logs": 1,"# asciinema, and": 1,"# description: this": 1,"with # asciinema,": 1,"found." exit 1": 1,"# # description:": 1,"used by the": 1,"will be saved": 1,"be used by": 1,"asciinema recording asciinema": 1,"start asciinema recording": 2,"tmux session with": 1,"that # session,": 1,"unique file in": 1,"$0 <task_file>" exit": 1,"a unique file": 1,"session_name="gemini-dev-session" # define": 1,"file to be": 1,"then echo "usage:": 1,"recording asciinema rec": 1,"1 fi if": 1,"task_file="$1" if [": 1,"this script orchestrates": 1,"mkdir -p "${log_dir}"": 1,"logs directory timestamp=$(date": 1,"exists mkdir -p": 1,"for this project.": 1,"until asciinema finishes": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"session, configured for": 1,"task file to": 1,"asciinema finishes (i.e.,": 1,"configuration session_name="gemini-dev-session" #": 1,"bash # ==============================================================================": 1,"be saved to": 1,"of a tmux": 1,"-z "$task_file" ];": 1,"gemini cli task_file="$1"": 1,"asciinema recording in": 1,"not found." exit": 1,"script will wait": 1,"# the script": 1,"# the output": 1,"configured for this": 1,"# session, configured": 1,"echo "usage: $0": 1,"the tmux session": 1,"define session_name here": 1,"session_name here log_dir="${home}/logs/gemini"": 1,"#!/usr/bin/env bash #": 1,"mkdir -p "$log_dir"": 1,"file '$task_file' not": 1,"\"$session_name\" \"$task_file\"" #": 1,"file: start_development_session.sh #": 1,"task file '$task_file'": 1,"by the gemini": 1,"cli task_file="$1" if": 1,"\"$task_file\"" # the": 1,"# define session_name": 1,"# ensure log": 1,"============================================================================== # configuration": 1,"here until asciinema": 1,"# # ==============================================================================": 1,"then launches the": 1,"============================================================================== # #": 1,"background # the": 1,"finishes (i.e., the": 1,"[ ! -f": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"[ -z "$task_file"": 1,"if [ -z": 1,"the output will": 1,"# usage: ./scripts/session/start_development_session.sh": 1,"fi # ensure": 1,"'$task_file' not found."": 1,"a tmux session": 1,"# ============================================================================== #": 2,"wait here until": 1,"the background #": 1,"# # file:": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"file in the": 1,"saved to a": 1,"1 fi #": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1      }
,
      "5-gram": {
"start asciinema recording asciinema rec": 1,"\"$session_name\" \"$task_file\"" # the script": 1,"then launches the gemini cli": 1,"cli task_file="$1" if [ -z": 1,"# session, configured for this": 1,"be saved to a unique": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"saved to a unique file": 1,"if [ -z "$task_file" ];": 1,"directory exists mkdir -p "$log_dir"": 1,"# asciinema, and then launches": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh": 1,"of a tmux session with": 1,"<task_file>" exit 1 fi if": 1,"in the background # the": 1,"echo "error: task file '$task_file'": 1,"found." exit 1 fi #": 1,"then echo "error: task file": 1,"[ -z "$task_file" ]; then": 1,"bash # ============================================================================== # #": 1,""usage: $0 <task_file>" exit 1": 1,"-f "$task_file" ]; then echo": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"session_name="gemini-dev-session" # define session_name here": 1,"asciinema finishes (i.e., the tmux": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"project. # # ============================================================================== #": 1,""error: task file '$task_file' not": 1,"============================================================================== # # file: start_development_session.sh": 1,"============================================================================== # configuration session_name="gemini-dev-session" #": 1,"for this project. # #": 1,"1 fi if [ !": 1,"exit 1 fi if [": 1,"'$task_file' not found." exit 1": 1,"tmux session with # asciinema,": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"mkdir -p "${log_dir}" # task": 1,"# configuration session_name="gemini-dev-session" # define": 1,"wait here until asciinema finishes": 1,"the background # the output": 1,"recording in the background #": 1,"# file: start_development_session.sh # #": 1,"file: start_development_session.sh # # usage:": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"a tmux session with #": 1,"# start asciinema recording in": 1,"not found." exit 1 fi": 1,"this project. # # ==============================================================================": 1,"# # usage: ./scripts/session/start_development_session.sh #": 1,"# ensure log directory exists": 1,""$task_file" ]; then echo "error:": 1,"-p "$log_dir" # start asciinema": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"start asciinema recording in the": 1,"echo "usage: $0 <task_file>" exit": 1,"mkdir -p "$log_dir" # start": 1,"to a unique file in": 1,"\"$task_file\"" # the script will": 1,"this script orchestrates the recording": 1,"output will be saved to": 1,"background # the output will": 1,"file '$task_file' not found." exit": 1,"the output will be saved": 1,"launches the gemini cli within": 1,"configured for this project. #": 1,"orchestrates the recording of a": 1,"description: this script orchestrates the": 1,"# # description: this script": 1,"file to be used by": 1,"if [ ! -f "$task_file"": 1,"finishes (i.e., the tmux session": 1,"# # file: start_development_session.sh #": 1,"ensure log directory exists mkdir": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"task file to be used": 1,"will be saved to a": 1,"a unique file in the": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"be used by the gemini": 1,"-z "$task_file" ]; then echo": 1,"recording asciinema rec "$asciinema_rec_file" --command": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"# ============================================================================== # configuration session_name="gemini-dev-session"": 1,"1 fi # ensure log": 1,"]; then echo "error: task": 1,"here until asciinema finishes (i.e.,": 1,"recording of a tmux session": 1,"in the logs directory timestamp=$(date": 1,"fi # ensure log directory": 1,"usage: ./scripts/session/start_development_session.sh # # description:": 1,""${log_dir}" # task file to": 1,"# start asciinema recording asciinema": 1,"the recording of a tmux": 1,"# the output will be": 1,""$task_file" ]; then echo "usage:": 1,"until asciinema finishes (i.e., the": 1,"within that # session, configured": 1,"will wait here until asciinema": 1,"gemini cli within that #": 1,"$0 <task_file>" exit 1 fi": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"exists mkdir -p "$log_dir" #": 1,"# usage: ./scripts/session/start_development_session.sh # #": 1,"script orchestrates the recording of": 1,"# ============================================================================== # # file:": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,""$log_dir" # start asciinema recording": 1,"and then launches the gemini": 1,"! -f "$task_file" ]; then": 1,"the gemini cli within that": 1,"cli within that # session,": 1,"# define session_name here log_dir="${home}/logs/gemini"": 1,"(i.e., the tmux session exits)": 1,"unique file in the logs": 1,"asciinema, and then launches the": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"# # ============================================================================== # configuration": 1,"that # session, configured for": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"gemini cli task_file="$1" if [": 1,"configuration session_name="gemini-dev-session" # define session_name": 1,"exit 1 fi # ensure": 1,"the script will wait here": 1,"[ ! -f "$task_file" ];": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"then echo "usage: $0 <task_file>"": 1,"# task file to be": 1,"asciinema recording asciinema rec "$asciinema_rec_file"": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"to be used by the": 1,"# the script will wait": 1,"script will wait here until": 1,"session with # asciinema, and": 1,"./scripts/session/start_development_session.sh # # description: this": 1,"session, configured for this project.": 1,"]; then echo "usage: $0": 1,"log directory exists mkdir -p": 1,"-p "${log_dir}" # task file": 1,"fi if [ ! -f": 1,"the gemini cli task_file="$1" if": 1,"task file '$task_file' not found."": 1,"file in the logs directory": 1,"asciinema recording in the background": 1,"used by the gemini cli": 1,"# description: this script orchestrates": 1,"by the gemini cli task_file="$1"": 1,"task_file="$1" if [ -z "$task_file"": 1,"with # asciinema, and then": 1      }
,
      "7-gram": {
"the gemini cli task_file="$1" if [ -z": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1,""$log_dir" # start asciinema recording in the": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"start asciinema recording in the background #": 1,"the output will be saved to a": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"saved to a unique file in the": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"not found." exit 1 fi # ensure": 1,""usage: $0 <task_file>" exit 1 fi if": 1,"used by the gemini cli task_file="$1" if": 1,"# asciinema, and then launches the gemini": 1,"file '$task_file' not found." exit 1 fi": 1,"# the script will wait here until": 1,"with # asciinema, and then launches the": 1,""${log_dir}" # task file to be used": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates": 1,"# the output will be saved to": 1,"# # file: start_development_session.sh # # usage:": 1,"# # description: this script orchestrates the": 1,"# ============================================================================== # # file: start_development_session.sh #": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"cli within that # session, configured for": 1,"that # session, configured for this project.": 1,"of a tmux session with # asciinema,": 1,"-f "$task_file" ]; then echo "error: task": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,""$task_file" ]; then echo "error: task file": 1,"recording of a tmux session with #": 1,""$task_file" ]; then echo "usage: $0 <task_file>"": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"and then launches the gemini cli within": 1,"within that # session, configured for this": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"if [ ! -f "$task_file" ]; then": 1,"'$task_file' not found." exit 1 fi #": 1,"background # the output will be saved": 1,"! -f "$task_file" ]; then echo "error:": 1,"[ -z "$task_file" ]; then echo "usage:": 1,"description: this script orchestrates the recording of": 1,"then echo "error: task file '$task_file' not": 1,"exit 1 fi if [ ! -f": 1,"]; then echo "usage: $0 <task_file>" exit": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh": 1,"# task file to be used by": 1,"directory exists mkdir -p "$log_dir" # start": 1,"# # usage: ./scripts/session/start_development_session.sh # # description:": 1,"gemini cli within that # session, configured": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"if [ -z "$task_file" ]; then echo": 1,"wait here until asciinema finishes (i.e., the": 1,"output will be saved to a unique": 1,"to a unique file in the logs": 1,"\"$session_name\" \"$task_file\"" # the script will wait": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"-z "$task_file" ]; then echo "usage: $0": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"orchestrates the recording of a tmux session": 1,"# start asciinema recording in the background": 1,"be saved to a unique file in": 1,"recording in the background # the output": 1,"task_file="$1" if [ -z "$task_file" ]; then": 1,"session with # asciinema, and then launches": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"asciinema finishes (i.e., the tmux session exits)": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"be used by the gemini cli task_file="$1"": 1,"in the background # the output will": 1,"ensure log directory exists mkdir -p "$log_dir"": 1,"task file '$task_file' not found." exit 1": 1,"here until asciinema finishes (i.e., the tmux": 1,"$0 <task_file>" exit 1 fi if [": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this": 1,"echo "usage: $0 <task_file>" exit 1 fi": 1,"fi if [ ! -f "$task_file" ];": 1,"by the gemini cli task_file="$1" if [": 1,"will be saved to a unique file": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"mkdir -p "${log_dir}" # task file to": 1,"asciinema recording in the background # the": 1,"the script will wait here until asciinema": 1,"]; then echo "error: task file '$task_file'": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"echo "error: task file '$task_file' not found."": 1,"exit 1 fi # ensure log directory": 1,"found." exit 1 fi # ensure log": 1,"then echo "usage: $0 <task_file>" exit 1": 1,"fi # ensure log directory exists mkdir": 1,"this project. # # ============================================================================== # configuration": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"# description: this script orchestrates the recording": 1,"# ensure log directory exists mkdir -p": 1,"then launches the gemini cli within that": 1,"task file to be used by the": 1,"log directory exists mkdir -p "$log_dir" #": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script": 1,"a tmux session with # asciinema, and": 1,"script will wait here until asciinema finishes": 1,"-p "${log_dir}" # task file to be": 1,"tmux session with # asciinema, and then": 1,"unique file in the logs directory timestamp=$(date": 1,"the gemini cli within that # session,": 1,"until asciinema finishes (i.e., the tmux session": 1,""error: task file '$task_file' not found." exit": 1,"for this project. # # ============================================================================== #": 1,"1 fi if [ ! -f "$task_file"": 1,"exists mkdir -p "$log_dir" # start asciinema": 1,"mkdir -p "$log_dir" # start asciinema recording": 1,"session, configured for this project. # #": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"# session, configured for this project. #": 1,"-p "$log_dir" # start asciinema recording in": 1,"launches the gemini cli within that #": 1,"this script orchestrates the recording of a": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # #": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"the background # the output will be": 1,"1 fi # ensure log directory exists": 1,"[ ! -f "$task_file" ]; then echo": 1,"bash # ============================================================================== # # file: start_development_session.sh": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"file to be used by the gemini": 1,"\"$task_file\"" # the script will wait here": 1,"asciinema, and then launches the gemini cli": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"will wait here until asciinema finishes (i.e.,": 1,"============================================================================== # # file: start_development_session.sh # #": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"a unique file in the logs directory": 1,"<task_file>" exit 1 fi if [ !": 1,"gemini cli task_file="$1" if [ -z "$task_file"": 1,"# configuration session_name="gemini-dev-session" # define session_name here": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"to be used by the gemini cli": 1,"the recording of a tmux session with": 1,"configured for this project. # # ==============================================================================": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"cli task_file="$1" if [ -z "$task_file" ];": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh #": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"script orchestrates the recording of a tmux": 1      }
,
      "11-gram": {
"then echo "error: task file '$task_file' not found." exit 1 fi": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"in the background # the output will be saved to a": 1,"recording in the background # the output will be saved to": 1,""$log_dir" # start asciinema recording in the background # the output": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"then launches the gemini cli within that # session, configured for": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"# the output will be saved to a unique file in": 1,"-p "${log_dir}" # task file to be used by the gemini": 1,"found." exit 1 fi # ensure log directory exists mkdir -p": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage:": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"with # asciinema, and then launches the gemini cli within that": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh #": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"that # session, configured for this project. # # ============================================================================== #": 1,"not found." exit 1 fi # ensure log directory exists mkdir": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"# the script will wait here until asciinema finishes (i.e., the": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh": 1,"the output will be saved to a unique file in the": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"mkdir -p "${log_dir}" # task file to be used by the": 1,""${log_dir}" # task file to be used by the gemini cli": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"background # the output will be saved to a unique file": 1,"]; then echo "error: task file '$task_file' not found." exit 1": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description:": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"this script orchestrates the recording of a tmux session with #": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"task file to be used by the gemini cli task_file="$1" if": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # #": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"# start asciinema recording in the background # the output will": 1,"# # description: this script orchestrates the recording of a tmux": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"task file '$task_file' not found." exit 1 fi # ensure log": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"# asciinema, and then launches the gemini cli within that #": 1,"output will be saved to a unique file in the logs": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"description: this script orchestrates the recording of a tmux session with": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"cli within that # session, configured for this project. # #": 1,"and then launches the gemini cli within that # session, configured": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"-p "$log_dir" # start asciinema recording in the background # the": 1,"launches the gemini cli within that # session, configured for this": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"the recording of a tmux session with # asciinema, and then": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,"of a tmux session with # asciinema, and then launches the": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script": 1,"file '$task_file' not found." exit 1 fi # ensure log directory": 1,"tmux session with # asciinema, and then launches the gemini cli": 1,""error: task file '$task_file' not found." exit 1 fi # ensure": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"orchestrates the recording of a tmux session with # asciinema, and": 1,"asciinema, and then launches the gemini cli within that # session,": 1,"the script will wait here until asciinema finishes (i.e., the tmux": 1,"script will wait here until asciinema finishes (i.e., the tmux session": 1,"if [ ! -f "$task_file" ]; then echo "error: task file": 1,"the background # the output will be saved to a unique": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"# description: this script orchestrates the recording of a tmux session": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,"start asciinema recording in the background # the output will be": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"to be used by the gemini cli task_file="$1" if [ -z": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this": 1,"a tmux session with # asciinema, and then launches the gemini": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"file to be used by the gemini cli task_file="$1" if [": 1,"gemini cli within that # session, configured for this project. #": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"# session, configured for this project. # # ============================================================================== # configuration": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"be saved to a unique file in the logs directory timestamp=$(date": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"will be saved to a unique file in the logs directory": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"\"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"recording of a tmux session with # asciinema, and then launches": 1,"# task file to be used by the gemini cli task_file="$1"": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"session with # asciinema, and then launches the gemini cli within": 1,"within that # session, configured for this project. # # ==============================================================================": 1,"asciinema recording in the background # the output will be saved": 1,"script orchestrates the recording of a tmux session with # asciinema,": 1,"mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"\"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"echo "error: task file '$task_file' not found." exit 1 fi #": 1,"the gemini cli within that # session, configured for this project.": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1      }
,
      "13-gram": {
"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"# start asciinema recording in the background # the output will be saved": 1,"not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir": 1,""error: task file '$task_file' not found." exit 1 fi # ensure log directory": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording": 1,"the script will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"\"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the": 1,"background # the output will be saved to a unique file in the": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this": 1,"# the script will wait here until asciinema finishes (i.e., the tmux session": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"echo "error: task file '$task_file' not found." exit 1 fi # ensure log": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"file to be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"asciinema, and then launches the gemini cli within that # session, configured for": 1,"of a tmux session with # asciinema, and then launches the gemini cli": 1,"the recording of a tmux session with # asciinema, and then launches the": 1,"orchestrates the recording of a tmux session with # asciinema, and then launches": 1,"script orchestrates the recording of a tmux session with # asciinema, and then": 1,"# description: this script orchestrates the recording of a tmux session with #": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates": 1,"\"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,""$log_dir" # start asciinema recording in the background # the output will be": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"the gemini cli within that # session, configured for this project. # #": 1,"session with # asciinema, and then launches the gemini cli within that #": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"asciinema recording in the background # the output will be saved to a": 1,"-p "$log_dir" # start asciinema recording in the background # the output will": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background # the": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"task file to be used by the gemini cli task_file="$1" if [ -z": 1,"-p "${log_dir}" # task file to be used by the gemini cli task_file="$1"": 1,"tmux session with # asciinema, and then launches the gemini cli within that": 1,"a tmux session with # asciinema, and then launches the gemini cli within": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # #": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"recording in the background # the output will be saved to a unique": 1,"start asciinema recording in the background # the output will be saved to": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"within that # session, configured for this project. # # ============================================================================== # configuration": 1,"cli within that # session, configured for this project. # # ============================================================================== #": 1,"then launches the gemini cli within that # session, configured for this project.": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh #": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"# # description: this script orchestrates the recording of a tmux session with": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"output will be saved to a unique file in the logs directory timestamp=$(date": 1,"# the output will be saved to a unique file in the logs": 1,"in the background # the output will be saved to a unique file": 1,"task file '$task_file' not found." exit 1 fi # ensure log directory exists": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"to be used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"gemini cli within that # session, configured for this project. # # ==============================================================================": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"the background # the output will be saved to a unique file in": 1,"found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,""${log_dir}" # task file to be used by the gemini cli task_file="$1" if": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"# session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"# asciinema, and then launches the gemini cli within that # session, configured": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # ensure": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"# task file to be used by the gemini cli task_file="$1" if [": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini": 1,"launches the gemini cli within that # session, configured for this project. #": 1,"and then launches the gemini cli within that # session, configured for this": 1,"with # asciinema, and then launches the gemini cli within that # session,": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script": 1,"the output will be saved to a unique file in the logs directory": 1,"mkdir -p "$log_dir" # start asciinema recording in the background # the output": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"mkdir -p "${log_dir}" # task file to be used by the gemini cli": 1,"recording of a tmux session with # asciinema, and then launches the gemini": 1,"this script orchestrates the recording of a tmux session with # asciinema, and": 1,"description: this script orchestrates the recording of a tmux session with # asciinema,": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description:": 1      }
,
      "19-gram": {
"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will": 1,""error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1"": 1,"this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within": 1,"not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"with # asciinema, and then launches the gemini cli within that # session, configured for this project. # #": 1,"the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session,": 1,"description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this": 1,"of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"# task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"# session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"# asciinema, and then launches the gemini cli within that # session, configured for this project. # # ==============================================================================": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date": 1,"start asciinema recording in the background # the output will be saved to a unique file in the logs": 1,"found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project.": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"# # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with #": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"asciinema recording in the background # the output will be saved to a unique file in the logs directory": 1,""$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"# description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session": 1,"# the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"# start asciinema recording in the background # the output will be saved to a unique file in the": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== #": 1,"mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the": 1,"echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"-p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the": 1,"recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured": 1,"script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"-p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z": 1,"gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,""${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"session with # asciinema, and then launches the gemini cli within that # session, configured for this project. #": 1,"orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that #": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema,": 1      }
,
      "23-gram": {
"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"# task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if": 1,"the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. #": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"-p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the logs directory": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini": 1,"and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"# asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== #": 1,"orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with #": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the": 1,"background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"-p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # #": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"start asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ==============================================================================": 1,"the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project.": 1,"will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh": 1,"# the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"# start asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session": 1,"be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"# session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema,": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,""$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli": 1,"session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux": 1,""error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for": 1,"# description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that #": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will": 1,"task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1"": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the logs": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique": 1,"not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"# # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/dev_lifecycle/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log": 1,""${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session,": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/session/launch_crq_session.sh": {
      "1-gram": {
"manually:": 1,"created.": 1,"created": 1,"commands": 1,"session:": 3,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"from": 2,"[": 1,"pipefail": 1,"script": 2,"manually.": 1,"window": 1,"${submodule_name}": 1,"123"": 1,"vendor/nix/nixtract": 1,""usage:": 1,"context.": 2,"submodule's": 2,"newly": 1,"boot.sh": 1,"send-keys": 3,"send": 1,"-d": 1,"exists": 1,"submodule_path="$1"": 1,"launches": 2,"file:": 1,"${session_name}": 1,"user": 1,"do": 1,"new-session": 1,""creating": 1,"else": 1,"existing": 1,"check": 1,"exit": 1,"starts": 2,"new": 4,"this": 2,"please": 1,"run": 1,"lower": 1,"-s": 1,"(crq:": 1,"submodule_name=$(basename": 1,"<submodule_path>": 2,"==============================================================================": 2,""cd": 1,"navigate": 1,"split-window": 1,"-t": 6,"full_submodule_path="${root_dir}/${submodule_path}"": 1,""$submodule_path")": 1,"submodule": 1,"crq_number="$2"": 1,""$2"": 1,"gemini": 2,"the": 10,"./scripts/session/launch_crq_session.sh": 1,"to": 4,"$0": 2,"cli": 2,"and": 3,"tmux": 14,"a": 6,"launch_crq_session.sh": 1,"bash": 1,"split": 1,""attaching": 1,"session_name="crq-${crq_number}-${submodule_name}"": 1,"name": 1,"then": 2,"in": 3,"crq": 3,"for": 3,"-d"": 1,"2>/dev/null;": 1,""$session_name"": 6,"${session_name}"": 4,"path": 1,"specific": 2,"description:": 1,"./boot.sh"": 1,"select-pane": 1,"attach-session": 2,"already": 1,""launching": 1,""example:": 1,"<crq_number>"": 1,"echo": 6,"];": 1,"submodule,": 2,"within": 2,"usage:": 1,"#": 19,"will": 1,"not": 1,"${full_submodule_path}": 1,"${crq_number})": 1,"1": 1,"-euo": 1,"here.": 1,"attach": 3,"&&": 1,"horizontally": 1,"extract": 1,"-z": 1,"#!/usr/bin/env": 1,"pane": 1,"c-m": 3,"-h"": 1,""tmux": 3,"has-session": 1,"fi": 2,"if": 3,"set": 1,"window,": 2,"splits": 2,"session": 7,"<crq_number>": 1      }
,
      "2-gram": {
"to existing": 1,"$0 <submodule_path>": 1,"usage: ./scripts/session/launch_crq_session.sh": 1,"to the": 3,"$0 vendor/nix/nixtract": 1,"please attach": 1,"# ==============================================================================": 2,"# extract": 1,"&& ./boot.sh"": 1,"echo "launching": 1,"-h" c-m": 1,"from here.": 1,"<crq_number>" echo": 1,"boot.sh tmux": 1,"${session_name}" tmux": 2,"submodule, #": 1,"-t "$session_name"": 5,"crq #": 1,"select-pane -d"": 1,"exists if": 1,"send-keys -t": 3,"#!/usr/bin/env bash": 1,"submodule's context.": 2,"window, and": 2,"============================================================================== #": 2,"from path": 1,"manually. echo": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"crq_number="$2" #": 1,"# splits": 1,""creating new": 1,"./scripts/session/launch_crq_session.sh <submodule_path>": 1,"extract submodule": 1,"# send": 1,"${session_name}" #": 1,"<submodule_path> <crq_number>"": 1,"tmux new-session": 1,"else echo": 1,"will attach": 1,"and run": 1,"gemini #": 1,"description: this": 1,"session for": 3,""tmux session": 1,"the lower": 1,"the new": 1,""launching crq": 1,"context. #": 1,"# this": 1,"fi submodule_path="$1"": 1,"-t ${session_name}"": 1,"attach-session -t": 2,"tmux session": 4,"in the": 2,"cli in": 2,"existing tmux": 1,"created session": 1,"a submodule,": 2,""cd ${full_submodule_path}": 1,"attach to": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,""$session_name" else": 1,"specific crq": 2,"the submodule's": 2,"-euo pipefail": 1,"<crq_number> #": 1,"already exists": 1,"${crq_number}) in": 1,"echo "tmux": 1,"# file:": 1,"# within": 1,"# do": 1,"./boot.sh" c-m": 1,"script launches": 2,"crq session": 1,"<submodule_path> <crq_number>": 1,"# description:": 1,"-s "$session_name"": 1,""tmux select-pane": 1,"session #": 1,"launch_crq_session.sh #": 1,""$session_name" 2>/dev/null;": 1,"[ -z": 1,"tmux send-keys": 3,"tmux session:": 3,"then echo": 2,"pane and": 1,"submodule name": 1,"and starts": 2,""$2" ];": 1,"vendor/nix/nixtract 123"": 1,"session: ${session_name}"": 3,"newly created": 1,"tmux has-session": 1,"set -euo": 1,"crq within": 1,"the newly": 1,"not attach": 1,"(crq: ${crq_number})": 1,"session from": 1,"new-session -d": 1,"echo "usage:": 1,"for a": 2,"the window,": 2,"a new": 2,""$session_name" "cd": 1,"starts the": 2,"bash #": 1,"# split": 1,"gemini cli": 1,"echo "creating": 1,"here. the": 1,"submodule_name=$(basename "$submodule_path")": 1,"if tmux": 2,"# usage:": 1,"session already": 1,"${full_submodule_path} &&": 1,"1 fi": 1,"submodule_path="$1" crq_number="$2"": 1,"launches a": 2,"2>/dev/null; then": 1,"split-window -h"": 1,"path submodule_name=$(basename": 1,"has-session -t": 1,"new tmux": 4,"splits the": 2,"window horizontally": 1,"the gemini": 2,"tmux attach-session": 2,""example: $0": 1,"this script": 2,"${session_name} created.": 1,"the user": 1,"-d -s": 1,"attach manually.": 1,"]; then": 1,"split window": 1,"user will": 1,"file: launch_crq_session.sh": 1,""$session_name" "tmux": 2,"for ${submodule_name}": 1,""attaching to": 1,"context. set": 1,"check if": 1,"${session_name}" fi": 1,"within a": 2,"full_submodule_path="${root_dir}/${submodule_path}" echo": 1,""$session_name" #": 1,"run boot.sh": 1,"-d" c-m": 1,"123" exit": 1,"-z "$2"": 1,"a specific": 2,"attach manually:": 1,"echo "example:": 1,"in tmux": 1,"# check": 1,"# #": 4,"manually: tmux": 1,"exit 1": 1,"c-m #": 2,"c-m tmux": 1,"do not": 1,"${submodule_name} (crq:": 1,"submodule, splits": 1,"send commands": 1,""tmux split-window": 1,"pipefail if": 1,"lower pane": 1,"echo "attaching": 1,"created. please": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"if [": 1,"name from": 1,"# navigate": 1,"commands to": 1,"navigate to": 1,"# cli": 1,"session ${session_name}": 1,""usage: $0": 1,"horizontally tmux": 1      }
,
      "3-gram": {
"attach manually. echo": 1,"boot.sh tmux send-keys": 1,"split window horizontally": 1,"]; then echo": 1,"description: this script": 1,"name from path": 1,"launch_crq_session.sh # #": 1,"attach-session -t ${session_name}"": 1,"the gemini cli": 1,"will attach manually.": 1,"c-m tmux send-keys": 1,"echo "example: $0": 1,"if tmux has-session": 1,"${submodule_name} (crq: ${crq_number})": 1,"# send commands": 1,"specific crq #": 1,"lower pane and": 1,"tmux attach-session -t": 2,"else echo "creating": 1,"# # usage:": 1,"created. please attach": 1,"select-pane -d" c-m": 1,"<submodule_path> <crq_number>" echo": 1,"check if tmux": 1,"$0 vendor/nix/nixtract 123"": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,""tmux session ${session_name}": 1,"echo "tmux session": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,"if tmux session": 1,"# splits the": 1,"(crq: ${crq_number}) in": 1,"session: ${session_name}" #": 1,"a new tmux": 2,"path submodule_name=$(basename "$submodule_path")": 1,"to the new": 1,"exit 1 fi": 1,"&& ./boot.sh" c-m": 1,"-euo pipefail if": 1,"context. # #": 1,"<crq_number> # #": 1,"splits the window,": 2,""attaching to existing": 1,"and run boot.sh": 1,"# this script": 1,"session # split": 1,"echo "creating new": 1,"pane and run": 1,"# do not": 1,"submodule, splits the": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,""example: $0 vendor/nix/nixtract": 1,"not attach to": 1,"./boot.sh" c-m #": 1,"the gemini #": 1,"specific crq within": 1,"gemini cli in": 1,"for ${submodule_name} (crq:": 1,"crq_number="$2" # extract": 1,"c-m # navigate": 1,"submodule name from": 1,"# check if": 1,"# within a": 1,"echo "launching crq": 1,"horizontally tmux send-keys": 1,"the user will": 1,"${crq_number}) in tmux": 1,"session already exists": 1,"has-session -t "$session_name"": 1,""$session_name" # send": 1,"manually: tmux attach-session": 1,"fi submodule_path="$1" crq_number="$2"": 1,"# usage: ./scripts/session/launch_crq_session.sh": 1,"-t "$session_name" else": 1,"within a submodule,": 2,""$session_name" 2>/dev/null; then": 1,"here. the user": 1,"# extract submodule": 1,"${full_submodule_path} && ./boot.sh"": 1,"the lower pane": 1,"-z "$2" ];": 1,"# navigate to": 1,"attach-session -t "$session_name"": 1,"send-keys -t "$session_name"": 3,"# description: this": 1,"context. set -euo": 1,"# # description:": 1,"script launches a": 2,"session for a": 2,"crq # within": 1,"the window, and": 2,"submodule, # splits": 1,"-t "$session_name" 2>/dev/null;": 1,"-s "$session_name" #": 1,"from here. the": 1,"attach to the": 1,"created session from": 1,"-t "$session_name" "cd": 1,"vendor/nix/nixtract 123" exit": 1,"# file: launch_crq_session.sh": 1,"exists if tmux": 1,"tmux send-keys -t": 3,"usage: ./scripts/session/launch_crq_session.sh <submodule_path>": 1,"# cli in": 1,"this script launches": 2,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number>": 1,"extract submodule name": 1,"-d" c-m tmux": 1,""tmux select-pane -d"": 1,"then echo "usage:": 1,"tmux session already": 1,"session: ${session_name}" tmux": 2,"tmux session for": 2,"commands to the": 1,"in the submodule's": 2,"2>/dev/null; then echo": 1,"file: launch_crq_session.sh #": 1,"window, and starts": 2,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"from path submodule_name=$(basename": 1,"attach manually: tmux": 1,"submodule's context. #": 1,"user will attach": 1,"1 fi submodule_path="$1"": 1,"pipefail if [": 1,"submodule's context. set": 1,"bash # ==============================================================================": 1,""$session_name" "tmux split-window": 1,""$session_name" else echo": 1,""cd ${full_submodule_path} &&": 1,"gemini # cli": 1,"new tmux session": 3,"newly created session": 1,"session from here.": 1,""$session_name" "cd ${full_submodule_path}": 1,"and starts the": 2,"a submodule, splits": 1,"to the lower": 1,""usage: $0 <submodule_path>": 1,"to existing tmux": 1,"run boot.sh tmux": 1,"cli in the": 2,"a submodule, #": 1,"-t ${session_name}" fi": 1,"$0 <submodule_path> <crq_number>"": 1,"crq session for": 1,"split-window -h" c-m": 1,"the new tmux": 1,"echo "usage: $0": 1,"${session_name} created. please": 1,"new-session -d -s": 1,"the newly created": 1,"in tmux session:": 1,"<crq_number>" echo "example:": 1,"#!/usr/bin/env bash #": 1,"session for ${submodule_name}": 1,"tmux new-session -d": 1,""creating new tmux": 1,"already exists if": 1,"crq within a": 1,"set -euo pipefail": 1,"then echo "attaching": 1,"<submodule_path> <crq_number> #": 1,"tmux has-session -t": 1,"window horizontally tmux": 1,"tmux session: ${session_name}"": 3,"# # ==============================================================================": 1,"123" exit 1": 1,"starts the gemini": 2,"============================================================================== # #": 1,""tmux split-window -h"": 1,"echo "attaching to": 1,"# split window": 1,"tmux session #": 1,"send commands to": 1,"existing tmux session:": 1,"launches a new": 2,"${session_name}" tmux new-session": 1,"if [ -z": 1,"the submodule's context.": 2,""launching crq session": 1,"navigate to the": 1,"session ${session_name} created.": 1,""$session_name" "tmux select-pane": 1,"submodule_path="$1" crq_number="$2" #": 1,"# ============================================================================== #": 2,"manually. echo "tmux": 1,"${session_name}" # check": 1,"to the newly": 1,"-t "$session_name" "tmux": 2,"# # file:": 1,"c-m # do": 1,"new tmux session:": 1,"============================================================================== # this": 1,"do not attach": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"a specific crq": 2,"[ -z "$2"": 1,"-d -s "$session_name"": 1,"-h" c-m #": 1,"please attach manually:": 1,""$2" ]; then": 1,"${session_name}" tmux attach-session": 1,"for a specific": 2      }
,
      "5-gram": {
"# description: this script launches": 1,"crq within a submodule, #": 1,"starts the gemini # cli": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,"&& ./boot.sh" c-m # do": 1,"run boot.sh tmux send-keys -t": 1,"tmux attach-session -t ${session_name}" fi": 1,"please attach manually: tmux attach-session": 1,"session ${session_name} created. please attach": 1,""$session_name" "cd ${full_submodule_path} && ./boot.sh"": 1,"the new tmux session #": 1,"$0 vendor/nix/nixtract 123" exit 1": 1,"============================================================================== # # file: launch_crq_session.sh": 1,"crq session for ${submodule_name} (crq:": 1,"created. please attach manually: tmux": 1,"new tmux session: ${session_name}" tmux": 1,"launches a new tmux session": 2,"-t "$session_name" 2>/dev/null; then echo": 1,"description: this script launches a": 1,"splits the window, and starts": 2,"bash # ============================================================================== # #": 1,"-d -s "$session_name" # send": 1,""$session_name" "tmux select-pane -d" c-m": 1,"tmux send-keys -t "$session_name" "tmux": 2,"check if tmux session already": 1,"${full_submodule_path} && ./boot.sh" c-m #": 1,"window horizontally tmux send-keys -t": 1,"# send commands to the": 1,"-z "$2" ]; then echo": 1,"for a specific crq within": 1,"============================================================================== # this script launches": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"# this script launches a": 1,"the lower pane and run": 1,"the gemini # cli in": 1,"horizontally tmux send-keys -t "$session_name"": 1,"new-session -d -s "$session_name" #": 1,"usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> #": 1,"in the submodule's context. #": 1,"navigate to the lower pane": 1,"exists if tmux has-session -t": 1,"session: ${session_name}" # check if": 1,"a specific crq within a": 1,"-s "$session_name" # send commands": 1,"tmux attach-session -t "$session_name" else": 1,"$0 <submodule_path> <crq_number>" echo "example:": 1,"fi submodule_path="$1" crq_number="$2" # extract": 1,"vendor/nix/nixtract 123" exit 1 fi": 1,"specific crq # within a": 1,"-h" c-m # navigate to": 1,"launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh": 1,"-euo pipefail if [ -z": 1,"from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"specific crq within a submodule,": 1,"123" exit 1 fi submodule_path="$1"": 1,"tmux new-session -d -s "$session_name"": 1,"# usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number>": 1,"in tmux session: ${session_name}" #": 1,"the submodule's context. set -euo": 1,""cd ${full_submodule_path} && ./boot.sh" c-m": 1,"<crq_number>" echo "example: $0 vendor/nix/nixtract": 1,"manually. echo "tmux session ${session_name}": 1,""$session_name" 2>/dev/null; then echo "attaching": 1,"<submodule_path> <crq_number> # # description:": 1,"session from here. the user": 1,"commands to the new tmux": 1,"# split window horizontally tmux": 1,"gemini cli in the submodule's": 1,"extract submodule name from path": 1,"context. # # ============================================================================== #": 1,"and starts the gemini cli": 1,""attaching to existing tmux session:": 1,""tmux select-pane -d" c-m tmux": 1,"split-window -h" c-m # navigate": 1,"for a specific crq #": 1,"# # file: launch_crq_session.sh #": 1,"lower pane and run boot.sh": 1,""tmux split-window -h" c-m #": 1,"# do not attach to": 1,"session for ${submodule_name} (crq: ${crq_number})": 1,"to the new tmux session": 1,"attach to the newly created": 1,"# within a submodule, splits": 1,"set -euo pipefail if [": 1,"submodule name from path submodule_name=$(basename": 1,"already exists if tmux has-session": 1,""creating new tmux session: ${session_name}"": 1,"new tmux session for a": 2,"from here. the user will": 1,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # #": 1,""$session_name" "tmux split-window -h" c-m": 1,"session: ${session_name}" tmux attach-session -t": 1,"echo "example: $0 vendor/nix/nixtract 123"": 1,"do not attach to the": 1,"-t "$session_name" "tmux split-window -h"": 1,"within a submodule, # splits": 1,"a submodule, splits the window,": 1,"file: launch_crq_session.sh # # usage:": 1,"# extract submodule name from": 1,"echo "tmux session ${session_name} created.": 1,"to the lower pane and": 1,"# # description: this script": 1,"${session_name}" tmux attach-session -t "$session_name"": 1,"gemini # cli in the": 1,"pipefail if [ -z "$2"": 1,"context. set -euo pipefail if": 1,"starts the gemini cli in": 1,"if tmux has-session -t "$session_name"": 1,"boot.sh tmux send-keys -t "$session_name"": 1,"attach manually: tmux attach-session -t": 1,"submodule_path="$1" crq_number="$2" # extract submodule": 1,"split window horizontally tmux send-keys": 1,"the gemini cli in the": 1,"script launches a new tmux": 2,"window, and starts the gemini": 2,"-d" c-m tmux send-keys -t": 1,"select-pane -d" c-m tmux send-keys": 1,"has-session -t "$session_name" 2>/dev/null; then": 1,"echo "creating new tmux session:": 1,"session for a specific crq": 2,"${crq_number}) in tmux session: ${session_name}"": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"${session_name}" # check if tmux": 1,"will attach manually. echo "tmux": 1,"if [ -z "$2" ];": 1,"1 fi submodule_path="$1" crq_number="$2" #": 1,"submodule's context. # # ==============================================================================": 1,"in the submodule's context. set": 1,"# navigate to the lower": 1,"session: ${session_name}" tmux new-session -d": 1,"# # ============================================================================== # this": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,"c-m tmux send-keys -t "$session_name"": 1,"and run boot.sh tmux send-keys": 1,"<submodule_path> <crq_number>" echo "example: $0": 1,"for ${submodule_name} (crq: ${crq_number}) in": 1,"tmux session already exists if": 1,"-t "$session_name" else echo "creating": 1,"here. the user will attach": 1,"newly created session from here.": 1,"the newly created session from": 1,"submodule, splits the window, and": 1,"send commands to the new": 1,"# splits the window, and": 1,"attach manually. echo "tmux session": 1,"the submodule's context. # #": 1,"crq_number="$2" # extract submodule name": 1,"# ============================================================================== # # file:": 1,"submodule's context. set -euo pipefail": 1,"crq # within a submodule,": 1,"to the newly created session": 1,"(crq: ${crq_number}) in tmux session:": 1,"${session_name} created. please attach manually:": 1,"if tmux session already exists": 1,"session already exists if tmux": 1,"c-m # do not attach": 1,"send-keys -t "$session_name" "tmux select-pane": 1,"to existing tmux session: ${session_name}"": 1,"${session_name}" tmux new-session -d -s": 1,"not attach to the newly": 1,"-t "$session_name" "cd ${full_submodule_path} &&": 1,"within a submodule, splits the": 1,"2>/dev/null; then echo "attaching to": 1,"the window, and starts the": 2,"c-m # navigate to the": 1,"tmux has-session -t "$session_name" 2>/dev/null;": 1,""example: $0 vendor/nix/nixtract 123" exit": 1,"<crq_number> # # description: this": 1,"# cli in the submodule's": 1,"send-keys -t "$session_name" "cd ${full_submodule_path}": 1,"echo "launching crq session for": 1,"existing tmux session: ${session_name}" tmux": 1,""$session_name" else echo "creating new": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session": 1,"name from path submodule_name=$(basename "$submodule_path")": 1,"else echo "creating new tmux": 1,"# # usage: ./scripts/session/launch_crq_session.sh <submodule_path>": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq": 1,"a specific crq # within": 1,"manually: tmux attach-session -t ${session_name}"": 1,"-t "$session_name" "tmux select-pane -d"": 1,""$2" ]; then echo "usage:": 1,"and starts the gemini #": 1,"cli in the submodule's context.": 2,"then echo "attaching to existing": 1,"user will attach manually. echo": 1,"the user will attach manually.": 1,"send-keys -t "$session_name" "tmux split-window": 1,"this script launches a new": 2,"attach-session -t "$session_name" else echo": 1,"./boot.sh" c-m # do not": 1,"# check if tmux session": 1,"created session from here. the": 1,"tmux session: ${session_name}" tmux new-session": 1,"exit 1 fi submodule_path="$1" crq_number="$2"": 1,"echo "attaching to existing tmux": 1,"${submodule_name} (crq: ${crq_number}) in tmux": 1,"]; then echo "usage: $0": 1,""launching crq session for ${submodule_name}": 1,""usage: $0 <submodule_path> <crq_number>" echo": 1,"submodule, # splits the window,": 1,"a new tmux session for": 2,"tmux send-keys -t "$session_name" "cd": 1,"tmux session: ${session_name}" tmux attach-session": 1,"echo "usage: $0 <submodule_path> <crq_number>"": 1,"a submodule, # splits the": 1,"new tmux session # split": 1,"then echo "usage: $0 <submodule_path>": 1,"pane and run boot.sh tmux": 1,"session # split window horizontally": 1,"path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"# file: launch_crq_session.sh # #": 1,"tmux session: ${session_name}" # check": 1,""tmux session ${session_name} created. please": 1,""$session_name" # send commands to": 1,"tmux session # split window": 1,"tmux session for a specific": 2,"# ============================================================================== # this script": 1,"[ -z "$2" ]; then": 1      }
,
      "7-gram": {
"fi submodule_path="$1" crq_number="$2" # extract submodule name": 1,""$session_name" # send commands to the new": 1,"in the submodule's context. set -euo pipefail": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1,"this script launches a new tmux session": 2,"# check if tmux session already exists": 1,"a specific crq within a submodule, #": 1,"from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"bash # ============================================================================== # # file: launch_crq_session.sh": 1,"session: ${session_name}" tmux attach-session -t "$session_name" else": 1,"gemini cli in the submodule's context. set": 1,"c-m # navigate to the lower pane": 1,"for a specific crq within a submodule,": 1,"echo "tmux session ${session_name} created. please attach": 1,"&& ./boot.sh" c-m # do not attach": 1,"-s "$session_name" # send commands to the": 1,"session for a specific crq # within": 1,"echo "example: $0 vendor/nix/nixtract 123" exit 1": 1,"crq session for ${submodule_name} (crq: ${crq_number}) in": 1,"from here. the user will attach manually.": 1,"tmux session already exists if tmux has-session": 1,"do not attach to the newly created": 1,"session ${session_name} created. please attach manually: tmux": 1,"tmux attach-session -t "$session_name" else echo "creating": 1,"# # ============================================================================== # this script launches": 1,"# send commands to the new tmux": 1,"to existing tmux session: ${session_name}" tmux attach-session": 1,"$0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1"": 1,"${session_name} created. please attach manually: tmux attach-session": 1,"-t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m": 1,"new tmux session for a specific crq": 2,"session from here. the user will attach": 1,"tmux send-keys -t "$session_name" "tmux select-pane -d"": 1,"$0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract": 1,"manually. echo "tmux session ${session_name} created. please": 1,"attach manually. echo "tmux session ${session_name} created.": 1,"the newly created session from here. the": 1,"the window, and starts the gemini cli": 1,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this": 1,"session for ${submodule_name} (crq: ${crq_number}) in tmux": 1,"tmux session for a specific crq within": 1,""tmux split-window -h" c-m # navigate to": 1,"# # description: this script launches a": 1,"submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"created. please attach manually: tmux attach-session -t": 1,"# within a submodule, splits the window,": 1,""$session_name" "tmux split-window -h" c-m # navigate": 1,"within a submodule, splits the window, and": 1,"a submodule, splits the window, and starts": 1,"-t "$session_name" "tmux split-window -h" c-m #": 1,""$session_name" "tmux select-pane -d" c-m tmux send-keys": 1,"tmux send-keys -t "$session_name" "tmux split-window -h"": 1,"and starts the gemini # cli in": 1,"has-session -t "$session_name" 2>/dev/null; then echo "attaching": 1,""$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m #": 1,"specific crq # within a submodule, splits": 1,"# file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh": 1,"a submodule, # splits the window, and": 1,""example: $0 vendor/nix/nixtract 123" exit 1 fi": 1,"cli in the submodule's context. set -euo": 1,"<submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123"": 1,"(crq: ${crq_number}) in tmux session: ${session_name}" #": 1,"-h" c-m # navigate to the lower": 1,"-z "$2" ]; then echo "usage: $0": 1,"usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description:": 1,"submodule's context. # # ============================================================================== # this": 1,"and starts the gemini cli in the": 1,"session already exists if tmux has-session -t": 1,"file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path>": 1,"context. # # ============================================================================== # this script": 1,"specific crq within a submodule, # splits": 1,"./boot.sh" c-m # do not attach to": 1,"<submodule_path> <crq_number> # # description: this script": 1,"splits the window, and starts the gemini": 2,"split-window -h" c-m # navigate to the": 1,"the new tmux session # split window": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,"here. the user will attach manually. echo": 1,"echo "creating new tmux session: ${session_name}" tmux": 1,""usage: $0 <submodule_path> <crq_number>" echo "example: $0": 1,"echo "attaching to existing tmux session: ${session_name}"": 1,"to the newly created session from here.": 1,"123" exit 1 fi submodule_path="$1" crq_number="$2" #": 1,"# ============================================================================== # # file: launch_crq_session.sh #": 1,"launches a new tmux session for a": 2,"send-keys -t "$session_name" "tmux select-pane -d" c-m": 1,"crq_number="$2" # extract submodule name from path": 1,"tmux session: ${session_name}" # check if tmux": 1,"already exists if tmux has-session -t "$session_name"": 1,"window, and starts the gemini cli in": 1,"name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,""tmux session ${session_name} created. please attach manually:": 1,"echo "launching crq session for ${submodule_name} (crq:": 1,"lower pane and run boot.sh tmux send-keys": 1,"then echo "attaching to existing tmux session:": 1,"crq within a submodule, # splits the": 1,"starts the gemini # cli in the": 1,"user will attach manually. echo "tmux session": 1,"cli in the submodule's context. # #": 1,"existing tmux session: ${session_name}" tmux attach-session -t": 1,"new-session -d -s "$session_name" # send commands": 1,""$session_name" else echo "creating new tmux session:": 1,"crq # within a submodule, splits the": 1,"submodule, # splits the window, and starts": 1,"in tmux session: ${session_name}" # check if": 1,"the gemini cli in the submodule's context.": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session": 1,"-d" c-m tmux send-keys -t "$session_name" "cd": 1,"to the lower pane and run boot.sh": 1,"# # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> #": 1,"select-pane -d" c-m tmux send-keys -t "$session_name"": 1,"the user will attach manually. echo "tmux": 1,"# extract submodule name from path submodule_name=$(basename": 1,"1 fi submodule_path="$1" crq_number="$2" # extract submodule": 1,"will attach manually. echo "tmux session ${session_name}": 1,"-euo pipefail if [ -z "$2" ];": 1,"boot.sh tmux send-keys -t "$session_name" "tmux select-pane": 1,"in the submodule's context. # # ==============================================================================": 1,"echo "usage: $0 <submodule_path> <crq_number>" echo "example:": 1,""cd ${full_submodule_path} && ./boot.sh" c-m # do": 1,"${session_name}" # check if tmux session already": 1,"attach-session -t "$session_name" else echo "creating new": 1,"${full_submodule_path} && ./boot.sh" c-m # do not": 1,"new tmux session # split window horizontally": 1,"exit 1 fi submodule_path="$1" crq_number="$2" # extract": 1,"exists if tmux has-session -t "$session_name" 2>/dev/null;": 1,"send-keys -t "$session_name" "tmux split-window -h" c-m": 1,"please attach manually: tmux attach-session -t ${session_name}"": 1,"commands to the new tmux session #": 1,"send commands to the new tmux session": 1,"session for a specific crq within a": 1,"if [ -z "$2" ]; then echo": 1,"tmux session: ${session_name}" tmux new-session -d -s": 1,"else echo "creating new tmux session: ${session_name}"": 1,"# this script launches a new tmux": 1,"submodule's context. set -euo pipefail if [": 1,"-t "$session_name" "tmux select-pane -d" c-m tmux": 1,"a new tmux session for a specific": 2,"send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh"": 1,"pipefail if [ -z "$2" ]; then": 1,"-t "$session_name" 2>/dev/null; then echo "attaching to": 1,"# do not attach to the newly": 1,"${crq_number}) in tmux session: ${session_name}" # check": 1,"to the new tmux session # split": 1,"the lower pane and run boot.sh tmux": 1,"session # split window horizontally tmux send-keys": 1,"# ============================================================================== # this script launches a": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"tmux send-keys -t "$session_name" "cd ${full_submodule_path} &&": 1,"tmux session for a specific crq #": 1,"tmux session: ${session_name}" tmux attach-session -t "$session_name"": 1,"2>/dev/null; then echo "attaching to existing tmux": 1,"window, and starts the gemini # cli": 1,"extract submodule name from path submodule_name=$(basename "$submodule_path")": 1,""creating new tmux session: ${session_name}" tmux new-session": 1,"-t "$session_name" else echo "creating new tmux": 1,"# splits the window, and starts the": 1,"script launches a new tmux session for": 2,"description: this script launches a new tmux": 1,"tmux new-session -d -s "$session_name" # send": 1,"for ${submodule_name} (crq: ${crq_number}) in tmux session:": 1,"# # file: launch_crq_session.sh # # usage:": 1,"submodule_path="$1" crq_number="$2" # extract submodule name from": 1,"<crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit": 1,""launching crq session for ${submodule_name} (crq: ${crq_number})": 1,"the submodule's context. set -euo pipefail if": 1,"${session_name}" tmux attach-session -t "$session_name" else echo": 1,"the submodule's context. # # ============================================================================== #": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for": 1,"run boot.sh tmux send-keys -t "$session_name" "tmux": 1,"# navigate to the lower pane and": 1,"# usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # #": 1,"${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}"": 1,"submodule, splits the window, and starts the": 1,"then echo "usage: $0 <submodule_path> <crq_number>" echo": 1,"attach to the newly created session from": 1,"c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path}": 1,"[ -z "$2" ]; then echo "usage:": 1,"for a specific crq # within a": 1,"launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number>": 1,"newly created session from here. the user": 1,"# cli in the submodule's context. #": 1,""$session_name" 2>/dev/null; then echo "attaching to existing": 1,"]; then echo "usage: $0 <submodule_path> <crq_number>"": 1,"path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,"c-m # do not attach to the": 1,"the window, and starts the gemini #": 1,"${session_name}" tmux new-session -d -s "$session_name" #": 1,"============================================================================== # # file: launch_crq_session.sh # #": 1,""$2" ]; then echo "usage: $0 <submodule_path>": 1,"session: ${session_name}" tmux new-session -d -s "$session_name"": 1,"check if tmux session already exists if": 1,"tmux session # split window horizontally tmux": 1,"a specific crq # within a submodule,": 1,"horizontally tmux send-keys -t "$session_name" "tmux split-window": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq": 1,"if tmux session already exists if tmux": 1,"attach manually: tmux attach-session -t ${session_name}" fi": 1,"new tmux session: ${session_name}" tmux new-session -d": 1,"within a submodule, # splits the window,": 1,"<crq_number> # # description: this script launches": 1,""attaching to existing tmux session: ${session_name}" tmux": 1,"not attach to the newly created session": 1,"vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2"": 1,"created session from here. the user will": 1,"window horizontally tmux send-keys -t "$session_name" "tmux": 1,"session: ${session_name}" # check if tmux session": 1,"============================================================================== # this script launches a new": 1,"navigate to the lower pane and run": 1,"split window horizontally tmux send-keys -t "$session_name"": 1,"# split window horizontally tmux send-keys -t": 1,"starts the gemini cli in the submodule's": 1,"-d -s "$session_name" # send commands to": 1,"and run boot.sh tmux send-keys -t "$session_name"": 1,"# description: this script launches a new": 1,""tmux select-pane -d" c-m tmux send-keys -t": 1,"pane and run boot.sh tmux send-keys -t": 1,"the gemini # cli in the submodule's": 1,"set -euo pipefail if [ -z "$2"": 1,"if tmux has-session -t "$session_name" 2>/dev/null; then": 1,"gemini # cli in the submodule's context.": 1,"context. set -euo pipefail if [ -z": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name}": 1      }
,
      "11-gram": {
"send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not": 1,"if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing": 1,"# within a submodule, splits the window, and starts the gemini": 1,"[ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo": 1,""tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}"": 1,"attach manually. echo "tmux session ${session_name} created. please attach manually: tmux": 1,"-t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd": 1,"context. set -euo pipefail if [ -z "$2" ]; then echo": 1,"${crq_number}) in tmux session: ${session_name}" # check if tmux session already": 1,"# check if tmux session already exists if tmux has-session -t": 1,"echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t": 1,"-d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m": 1,"usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a": 1,"user will attach manually. echo "tmux session ${session_name} created. please attach": 1,"c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m #": 1,"here. the user will attach manually. echo "tmux session ${session_name} created.": 1,"pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path>": 1,"<crq_number> # # description: this script launches a new tmux session": 1,"submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_crq_session.sh # # usage:": 1,"submodule, splits the window, and starts the gemini # cli in": 1,"new tmux session for a specific crq within a submodule, #": 1,"# # description: this script launches a new tmux session for": 1,"from here. the user will attach manually. echo "tmux session ${session_name}": 1,"# file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # #": 1,"in the submodule's context. set -euo pipefail if [ -z "$2"": 1,""example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number})": 1,""$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0": 1,"for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if": 1,"tmux session for a specific crq # within a submodule, splits": 1,"crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" #": 1,"123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from": 1,"new tmux session # split window horizontally tmux send-keys -t "$session_name"": 1,"============================================================================== # this script launches a new tmux session for a": 1,"then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t": 1,"-s "$session_name" # send commands to the new tmux session #": 1,"crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"session from here. the user will attach manually. echo "tmux session": 1,"tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands": 1,"${session_name}" # check if tmux session already exists if tmux has-session": 1,"-t "$session_name" "tmux split-window -h" c-m # navigate to the lower": 1,"tmux session for a specific crq within a submodule, # splits": 1,"tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new": 1,"tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux": 1,"-h" c-m # navigate to the lower pane and run boot.sh": 1,"the window, and starts the gemini cli in the submodule's context.": 1,"context. # # ============================================================================== # this script launches a new tmux": 1,"not attach to the newly created session from here. the user": 1,"c-m # do not attach to the newly created session from": 1,"<submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1"": 1,"from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session": 1,"and starts the gemini # cli in the submodule's context. #": 1,"tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name}": 1,"else echo "creating new tmux session: ${session_name}" tmux new-session -d -s": 1,"new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send": 1,"tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then": 1,"session for a specific crq within a submodule, # splits the": 1,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new": 1,"to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo": 1,"-t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session": 1,"pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d"": 1,"specific crq # within a submodule, splits the window, and starts": 1,"commands to the new tmux session # split window horizontally tmux": 1,""$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux": 1,"$0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule": 1,""usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1": 1,"existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating": 1,"the newly created session from here. the user will attach manually.": 1,""tmux split-window -h" c-m # navigate to the lower pane and": 1,"]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract": 1,"exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to": 1,"has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session:": 1,"script launches a new tmux session for a specific crq #": 1,"window, and starts the gemini cli in the submodule's context. set": 1,"run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux": 1,"launches a new tmux session for a specific crq within a": 1,""launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}"": 1,"to the lower pane and run boot.sh tmux send-keys -t "$session_name"": 1,"cli in the submodule's context. # # ============================================================================== # this script": 1,"boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys": 1,"specific crq within a submodule, # splits the window, and starts": 1,"echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" #": 1,"# extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"$0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi": 1,"./boot.sh" c-m # do not attach to the newly created session": 1,"and starts the gemini cli in the submodule's context. set -euo": 1,"============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number>": 1,"gemini cli in the submodule's context. set -euo pipefail if [": 1,"echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session:": 1,"a specific crq within a submodule, # splits the window, and": 1,"session for a specific crq # within a submodule, splits the": 1,"select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh"": 1,"# this script launches a new tmux session for a specific": 1,"a new tmux session for a specific crq # within a": 1,"# description: this script launches a new tmux session for a": 1,"# navigate to the lower pane and run boot.sh tmux send-keys": 1,"check if tmux session already exists if tmux has-session -t "$session_name"": 1,"navigate to the lower pane and run boot.sh tmux send-keys -t": 1,"session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window": 1,"echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit": 1,"2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session": 1,"submodule, # splits the window, and starts the gemini cli in": 1,"within a submodule, splits the window, and starts the gemini #": 1,""$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path}": 1,"in the submodule's context. # # ============================================================================== # this script launches": 1,"submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"crq within a submodule, # splits the window, and starts the": 1,"${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly": 1,"# usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches": 1,"the gemini cli in the submodule's context. set -euo pipefail if": 1,"set -euo pipefail if [ -z "$2" ]; then echo "usage:": 1,""$session_name" "tmux split-window -h" c-m # navigate to the lower pane": 1,"attach to the newly created session from here. the user will": 1,"do not attach to the newly created session from here. the": 1,"crq # within a submodule, splits the window, and starts the": 1,"if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>"": 1,"window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m #": 1,"# ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path>": 1,"${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux": 1,"bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh": 1,"exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path": 1,"-d -s "$session_name" # send commands to the new tmux session": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux": 1,"a submodule, # splits the window, and starts the gemini cli": 1,"vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name": 1,"send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the": 1,"# ============================================================================== # this script launches a new tmux session for": 1,"split-window -h" c-m # navigate to the lower pane and run": 1,"# split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h"": 1,"splits the window, and starts the gemini # cli in the": 1,"for a specific crq within a submodule, # splits the window,": 1,"to the newly created session from here. the user will attach": 1,"and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m": 1,"send commands to the new tmux session # split window horizontally": 1,"# # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> #": 1,"created session from here. the user will attach manually. echo "tmux": 1,"the submodule's context. # # ============================================================================== # this script launches a": 1,"<crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2"": 1,"session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check": 1,"# splits the window, and starts the gemini cli in the": 1,"submodule's context. # # ============================================================================== # this script launches a new": 1,"newly created session from here. the user will attach manually. echo": 1,"new-session -d -s "$session_name" # send commands to the new tmux": 1,"session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"starts the gemini # cli in the submodule's context. # #": 1,"# cli in the submodule's context. # # ============================================================================== # this": 1,"send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name"": 1,"# # ============================================================================== # this script launches a new tmux session": 1,"name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq": 1,"session: ${session_name}" # check if tmux session already exists if tmux": 1,"# send commands to the new tmux session # split window": 1,"a submodule, splits the window, and starts the gemini # cli": 1,""$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to": 1,""$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d": 1,"the submodule's context. set -euo pipefail if [ -z "$2" ];": 1,"will attach manually. echo "tmux session ${session_name} created. please attach manually:": 1,"horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate": 1,"extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,"within a submodule, # splits the window, and starts the gemini": 1,"# do not attach to the newly created session from here.": 1,"already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching": 1,"echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name"": 1,"the window, and starts the gemini # cli in the submodule's": 1,"path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for": 1,"manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session": 1,"this script launches a new tmux session for a specific crq": 2,"new tmux session for a specific crq # within a submodule,": 1,"tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux": 1,"${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session:": 1,"tmux session: ${session_name}" # check if tmux session already exists if": 1,"script launches a new tmux session for a specific crq within": 1,"the gemini # cli in the submodule's context. # # ==============================================================================": 1,"tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}"": 1,"lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane": 1,"cli in the submodule's context. set -euo pipefail if [ -z": 1,"session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}" fi": 1,"tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to": 1,"split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m": 1,"file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description:": 1,"launches a new tmux session for a specific crq # within": 1,""attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else": 1,"-z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example:": 1,"if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null;": 1,"submodule's context. set -euo pipefail if [ -z "$2" ]; then": 1,"<submodule_path> <crq_number> # # description: this script launches a new tmux": 1,"&& ./boot.sh" c-m # do not attach to the newly created": 1,"session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux": 1,"(crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session": 1,"# # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script": 1,"in tmux session: ${session_name}" # check if tmux session already exists": 1,"gemini # cli in the submodule's context. # # ============================================================================== #": 1,"splits the window, and starts the gemini cli in the submodule's": 1,""tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} &&": 1,"the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux": 1,""creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" #": 1,"a specific crq # within a submodule, splits the window, and": 1,"starts the gemini cli in the submodule's context. set -euo pipefail": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in": 1,"for a specific crq # within a submodule, splits the window,": 1,"-euo pipefail if [ -z "$2" ]; then echo "usage: $0": 1,""cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the": 1,"attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux": 1,"then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123"": 1,"the new tmux session # split window horizontally tmux send-keys -t": 1,"window, and starts the gemini # cli in the submodule's context.": 1,"1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename": 1,"description: this script launches a new tmux session for a specific": 1,"-t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach": 1,"tmux new-session -d -s "$session_name" # send commands to the new": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq:": 1,"the user will attach manually. echo "tmux session ${session_name} created. please": 1,"a new tmux session for a specific crq within a submodule,": 1,"fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path")": 1,"c-m # navigate to the lower pane and run boot.sh tmux": 1,"to the new tmux session # split window horizontally tmux send-keys": 1,""$session_name" # send commands to the new tmux session # split": 1,"launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this": 1,"-t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}"": 1,"echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name"": 1,"${session_name}" tmux new-session -d -s "$session_name" # send commands to the": 1,"session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to": 1      }
,
      "13-gram": {
"-z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract": 1,"name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for": 1,"in the submodule's context. set -euo pipefail if [ -z "$2" ]; then": 1,"${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux": 1,"# usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new": 1,"created session from here. the user will attach manually. echo "tmux session ${session_name}": 1,"to the newly created session from here. the user will attach manually. echo": 1,"this script launches a new tmux session for a specific crq within a": 1,"# ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> #": 1,"# ============================================================================== # this script launches a new tmux session for a specific": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path>": 1,""$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run": 1,""tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m": 1,"the user will attach manually. echo "tmux session ${session_name} created. please attach manually:": 1,"session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new": 1,"the submodule's context. # # ============================================================================== # this script launches a new tmux": 1,"the gemini cli in the submodule's context. set -euo pipefail if [ -z": 1,""cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created": 1,"to the new tmux session # split window horizontally tmux send-keys -t "$session_name"": 1,"from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name}": 1,"echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send": 1,"a new tmux session for a specific crq # within a submodule, splits": 1,"session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m": 1,"# description: this script launches a new tmux session for a specific crq": 1,"c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not": 1,"has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux": 1,"${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if": 1,"the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo": 1,"echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi": 1,"starts the gemini cli in the submodule's context. set -euo pipefail if [": 1,"============================================================================== # this script launches a new tmux session for a specific crq": 1,"]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit": 1,"split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate": 1,"a new tmux session for a specific crq within a submodule, # splits": 1,"# navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name"": 1,"exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux": 1,"user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux": 1,"run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t": 1,"c-m # do not attach to the newly created session from here. the": 1,"1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name"": 1,"-t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and": 1,"(crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists": 1,""tmux split-window -h" c-m # navigate to the lower pane and run boot.sh": 1,"tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower": 1,"the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d"": 1,"window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to": 1,"submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session": 1,"and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys": 1,"within a submodule, # splits the window, and starts the gemini cli in": 1,"starts the gemini # cli in the submodule's context. # # ============================================================================== #": 1,""launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check": 1,"bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number>": 1,"if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session:": 1,"file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script": 1,"cli in the submodule's context. # # ============================================================================== # this script launches a": 1,"<crq_number> # # description: this script launches a new tmux session for a": 1,"${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name"": 1,"launches a new tmux session for a specific crq within a submodule, #": 1,"session from here. the user will attach manually. echo "tmux session ${session_name} created.": 1,"split-window -h" c-m # navigate to the lower pane and run boot.sh tmux": 1,"# send commands to the new tmux session # split window horizontally tmux": 1,"# # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a": 1,"launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches": 1,"$0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from": 1,""example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name": 1,"crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,""$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly": 1,"-t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the": 1,"new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"a specific crq within a submodule, # splits the window, and starts the": 1,"if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example:": 1,"echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule": 1,"the gemini # cli in the submodule's context. # # ============================================================================== # this": 1,"navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux": 1,"send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane": 1,"session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}"": 1,"cli in the submodule's context. set -euo pipefail if [ -z "$2" ];": 1,"pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo": 1,""$session_name" # send commands to the new tmux session # split window horizontally": 1,"submodule's context. # # ============================================================================== # this script launches a new tmux session": 1,"attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t": 1,"here. the user will attach manually. echo "tmux session ${session_name} created. please attach": 1,"boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name"": 1,"-s "$session_name" # send commands to the new tmux session # split window": 1,"select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m #": 1,"<crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract": 1,"context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0": 1,"tmux session: ${session_name}" # check if tmux session already exists if tmux has-session": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session:": 1,"-t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} &&": 1,"# extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,"then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else": 1,"a specific crq # within a submodule, splits the window, and starts the": 1,"# # description: this script launches a new tmux session for a specific": 1,"in tmux session: ${session_name}" # check if tmux session already exists if tmux": 1,"window, and starts the gemini # cli in the submodule's context. # #": 1,"attach to the newly created session from here. the user will attach manually.": 1,"then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1": 1,"the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux": 1,"send commands to the new tmux session # split window horizontally tmux send-keys": 1,"-d -s "$session_name" # send commands to the new tmux session # split": 1,"description: this script launches a new tmux session for a specific crq #": 1,""$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh"": 1,"splits the window, and starts the gemini # cli in the submodule's context.": 1,"a submodule, # splits the window, and starts the gemini cli in the": 1,"new tmux session for a specific crq within a submodule, # splits the": 1,"# file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this": 1,"# cli in the submodule's context. # # ============================================================================== # this script launches": 1,"attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d": 1,"tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session": 1,"c-m # navigate to the lower pane and run boot.sh tmux send-keys -t": 1,"-t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s": 1,"this script launches a new tmux session for a specific crq # within": 1,"tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session:": 1,"new tmux session for a specific crq # within a submodule, splits the": 1,"<submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" #": 1,"send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path}": 1,"tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h"": 1,"if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the": 1,"session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"session for a specific crq within a submodule, # splits the window, and": 1,"123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename": 1,"set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path>": 1,"# splits the window, and starts the gemini cli in the submodule's context.": 1,"# split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m #": 1,"a submodule, splits the window, and starts the gemini # cli in the": 1,"and starts the gemini # cli in the submodule's context. # # ==============================================================================": 1,"from here. the user will attach manually. echo "tmux session ${session_name} created. please": 1,""creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands": 1,"and starts the gemini cli in the submodule's context. set -euo pipefail if": 1,"usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux": 1,"submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage:": 1,"tmux session for a specific crq within a submodule, # splits the window,": 1,"context. # # ============================================================================== # this script launches a new tmux session for": 1,"tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching": 1,"[ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number})": 1,"script launches a new tmux session for a specific crq # within a": 1,"./boot.sh" c-m # do not attach to the newly created session from here.": 1,"<submodule_path> <crq_number> # # description: this script launches a new tmux session for": 1,"for a specific crq # within a submodule, splits the window, and starts": 1,"existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux": 1,"new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to": 1,"============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # #": 1,"do not attach to the newly created session from here. the user will": 1,"specific crq within a submodule, # splits the window, and starts the gemini": 1,"manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}"": 1,"to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new": 1,"-h" c-m # navigate to the lower pane and run boot.sh tmux send-keys": 1,"# check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null;": 1,"in the submodule's context. # # ============================================================================== # this script launches a new": 1,"$0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2"": 1,"else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" #": 1,"check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}"": 1,"for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session": 1,"submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd": 1,"for a specific crq within a submodule, # splits the window, and starts": 1,"not attach to the newly created session from here. the user will attach": 1,"-d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do": 1,"gemini cli in the submodule's context. set -euo pipefail if [ -z "$2"": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in": 1,"already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing": 1,"gemini # cli in the submodule's context. # # ============================================================================== # this script": 1,"# # ============================================================================== # this script launches a new tmux session for a": 1,"newly created session from here. the user will attach manually. echo "tmux session": 1,"to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}"": 1,"submodule, splits the window, and starts the gemini # cli in the submodule's": 1,"submodule, # splits the window, and starts the gemini cli in the submodule's": 1,"script launches a new tmux session for a specific crq within a submodule,": 1,"send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to": 1,"${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m": 1,"echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" #": 1,"session: ${session_name}" # check if tmux session already exists if tmux has-session -t": 1,""usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1"": 1,""$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t": 1,"exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path")": 1,"&& ./boot.sh" c-m # do not attach to the newly created session from": 1,"${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session": 1,"window, and starts the gemini cli in the submodule's context. set -euo pipefail": 1,"# do not attach to the newly created session from here. the user": 1,"splits the window, and starts the gemini cli in the submodule's context. set": 1,"within a submodule, splits the window, and starts the gemini # cli in": 1,"session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to": 1,"pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux": 1,"the newly created session from here. the user will attach manually. echo "tmux": 1,""$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name"": 1,"the window, and starts the gemini # cli in the submodule's context. #": 1,"path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq:": 1,"-t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session": 1,"commands to the new tmux session # split window horizontally tmux send-keys -t": 1,"# this script launches a new tmux session for a specific crq within": 1,"tmux session for a specific crq # within a submodule, splits the window,": 1,"will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session": 1,"tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach": 1,"session for a specific crq # within a submodule, splits the window, and": 1,"vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path": 1,"-euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>"": 1,"crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if": 1,"extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq": 1,"echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo": 1,"new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window": 1,"launches a new tmux session for a specific crq # within a submodule,": 1,"specific crq # within a submodule, splits the window, and starts the gemini": 1,"crq within a submodule, # splits the window, and starts the gemini cli": 1,"${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already": 1,"fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"crq # within a submodule, splits the window, and starts the gemini #": 1,"echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}" fi": 1,""attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating": 1,""$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123"": 1,"tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the": 1,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session": 1,"# within a submodule, splits the window, and starts the gemini # cli": 1,"# # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description:": 1,"the window, and starts the gemini cli in the submodule's context. set -euo": 1      }
,
      "19-gram": {
"set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123"": 1,"new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini #": 1,"tmux session for a specific crq # within a submodule, splits the window, and starts the gemini # cli": 1,"window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then": 1,"submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name}": 1,"# description: this script launches a new tmux session for a specific crq # within a submodule, splits the": 1,"-z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2"": 1,"pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1": 1,"boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m #": 1,"tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do": 1,"# file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session": 1,"# check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux": 1,"# splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z": 1,"# # description: this script launches a new tmux session for a specific crq # within a submodule, splits": 1,"vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script": 1,"do not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name}": 1,"-d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created": 1,"-t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach": 1,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within": 1,"starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage:": 1,"send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not": 1,"lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path}": 1,"# send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h"": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session": 1,"the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session": 1,"bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches": 1,"a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== #": 1,"window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a": 1,"description: this script launches a new tmux session for a specific crq # within a submodule, splits the window,": 1,"starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux": 1,"c-m # do not attach to the newly created session from here. the user will attach manually. echo "tmux": 1,"gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path>": 1,"cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific": 1,"new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split": 1,"# cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a": 1,"-d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name"": 1,""tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane": 1,"a specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's": 1,"select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly": 1,"-h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m": 1,"session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session": 1,"-euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit": 1,"&& ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually.": 1,""tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the": 1,"# within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # #": 1,"submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux": 1,"within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ==============================================================================": 1,"2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session:": 1,"-t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name"": 1,"tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli in": 1,"a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if": 1,"this script launches a new tmux session for a specific crq within a submodule, # splits the window, and": 1,"and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo": 1,"${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing": 1,"a new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini": 1,""launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if": 1,"then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}"": 1,"echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [": 1,"new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the": 1,"send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m": 1,"# # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux": 1,"already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t": 1,"to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name"": 1,"a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context.": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check": 1,"here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}" fi": 1,"# ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a": 1,"echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name": 1,""$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window": 1,"and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new": 1,"tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name"": 1,"tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower": 1,"from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}"": 1,"<submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within a": 1,"script launches a new tmux session for a specific crq # within a submodule, splits the window, and starts": 1,"the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd": 1,"session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally": 1,"the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches": 1,"not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created.": 1,"splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2"": 1,"$0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path": 1,"newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux": 1,"usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq #": 1,"fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for": 1,"c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux": 1,"the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually:": 1,"else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,""$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux": 1,"new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli": 1,"tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from": 1,"new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t": 1,"script launches a new tmux session for a specific crq within a submodule, # splits the window, and starts": 1,"to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d": 1,"# split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and": 1,""$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user": 1,"for a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's": 1,"window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh": 1,"session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane": 1,"horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux": 1,"check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session:": 1,"<crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path")": 1,"if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if": 1,"for a specific crq # within a submodule, splits the window, and starts the gemini # cli in the": 1,""cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will": 1,""$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux": 1,"the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to": 1,"tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands": 1,"to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate": 1,""$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new": 1,"file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for": 1,"launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a": 1,""$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" #": 1,"for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t": 1,"${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name"": 1,""creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux": 1,"1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session": 1,"# usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq": 1,"<crq_number> # # description: this script launches a new tmux session for a specific crq # within a submodule,": 1,"to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach": 1,"navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux": 1,"${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach": 1,"splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script": 1,"send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t": 1,"submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a": 1,"session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to": 1,"then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule": 1,"crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context. #": 1,"send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here.": 1,"c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already": 1,"session for a specific crq # within a submodule, splits the window, and starts the gemini # cli in": 1,"tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux": 1,"(crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null;": 1,"# ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits": 1,"tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window": 1,"crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq:": 1,"context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract": 1,""example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"session for a specific crq within a submodule, # splits the window, and starts the gemini cli in the": 1,"this script launches a new tmux session for a specific crq # within a submodule, splits the window, and": 1,"gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for": 1,"-s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux": 1,"${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send": 1,""attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session": 1,"the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ];": 1,"attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please": 1,"the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example:": 1,"if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}"": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo": 1,"split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run": 1,"============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new": 1,"extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in": 1,"session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session": 1,"from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}"": 1,"./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually. echo": 1,"pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} &&": 1,"in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session:": 1,"in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq": 1,"${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux": 1,"a new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini": 1,"tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching": 1,"submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0": 1,"run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m": 1,"the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0": 1,"session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t": 1,"$0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract": 1,"attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to": 1,"session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" #": 1,"within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail": 1,"cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>"": 1,""usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from": 1,"-t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the": 1,"123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,"submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this": 1,"launches a new tmux session for a specific crq within a submodule, # splits the window, and starts the": 1,""$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to": 1,"# navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys": 1,"created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session": 1,"tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys": 1,"# do not attach to the newly created session from here. the user will attach manually. echo "tmux session": 1,"commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m #": 1,"the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within": 1,"crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo": 1,"path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" #": 1,"crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux": 1,"<submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename": 1,"in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo": 1,"and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh"": 1,"-t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new": 1,"exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name"": 1,"launches a new tmux session for a specific crq # within a submodule, splits the window, and starts the": 1,"# extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number})": 1,"existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s": 1,"specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set": 1,"has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating": 1,"exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq": 1,"split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d"": 1,"context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule,": 1,"============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits the": 1,"-t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the": 1,"echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists": 1,"# this script launches a new tmux session for a specific crq within a submodule, # splits the window,": 1,"specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context.": 1,"# # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, #": 1,"# # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific": 1,"${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then": 1,"if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else": 1,"[ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1"": 1      }
,
      "23-gram": {
"# do not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach": 1,""$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session": 1,"exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new": 1,"tmux session for a specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context.": 1,"has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}"": 1,""usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}"": 1,"to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send": 1,""creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux": 1,"$0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session": 1,"# within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script": 1,"a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a": 1,"crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null;": 1,"&& ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name}": 1,"cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule,": 1,"send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the": 1,"echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally": 1,"<submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within a submodule, splits the window,": 1,"if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract": 1,"<crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo": 1,"run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach": 1,"session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name"": 1,""$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session": 1,"send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach": 1,"# extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}"": 1,"tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session:": 1,"usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within a submodule, splits": 1,"select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here.": 1,"# split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys": 1,"and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>"": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window": 1,"vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for": 1,"session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}"": 1,"name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if": 1,"lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m #": 1,"tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t": 1,"new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run": 1,"============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits the window, and starts the": 1,"123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name}": 1,"split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t": 1,"submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new": 1,"a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if": 1,"c-m # do not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please": 1,"in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux": 1,"extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" #": 1,"window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for": 1,"commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower": 1,"the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit": 1,"the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and": 1,"the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq": 1,"submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already": 1,"echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t": 1,"<crq_number> # # description: this script launches a new tmux session for a specific crq # within a submodule, splits the window, and": 1,"-z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name": 1,""tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from": 1,"tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will": 1,"# check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session": 1,"context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi": 1,"navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} &&": 1,"starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific": 1,"${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually. echo "tmux session": 1,""$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually. echo": 1,"tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set": 1,"echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching": 1,"context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits the window,": 1,"session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux": 1,"new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys": 1,"session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the": 1,"launches a new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli in the": 1,"submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux": 1,"-s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m #": 1,"# splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo": 1,"./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within a submodule, splits the": 1,"within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2"": 1,"1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number})": 1,"# # description: this script launches a new tmux session for a specific crq # within a submodule, splits the window, and starts": 1,"[ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule": 1,"session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if": 1,"${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching": 1,"send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d"": 1,"not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux": 1,"launches a new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini # cli in": 1,""$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from": 1,"from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux": 1,"submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1": 1,"submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then": 1,"window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path>": 1,"a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ];": 1,"and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not": 1,"fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in": 1,"$0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2"": 1,"file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq #": 1,"submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits the": 1,"cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract": 1,"newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}" fi": 1,"-t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually.": 1,"the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits": 1,"then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename": 1,"# send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to": 1,"============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a": 1,""$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split": 1,"-d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m": 1,"the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0": 1,""cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually. echo "tmux": 1,"crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session:": 1,"description: this script launches a new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini": 1,"horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux": 1,"${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux": 1,"to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh"": 1,"# navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path}": 1,""tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys": 1,"path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session": 1,"the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session": 1,"split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t": 1,"new-session -d -s "$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h"": 1,"script launches a new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli in": 1,"${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux": 1,"for a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail": 1,"to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t": 1,"submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check": 1,"specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== #": 1,"for a specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # #": 1,"script launches a new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini # cli": 1,"./boot.sh" c-m # do not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created.": 1,"gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within": 1,"pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" #": 1,"the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m": 1,"attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"# this script launches a new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini": 1,"for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating": 1,"tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane": 1,"in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, #": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session:": 1,"tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else": 1,"set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1"": 1,"to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane": 1,"starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo": 1,"-t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z": 1,"-t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux": 1,"# # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within a": 1,"the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example:": 1,"root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux": 1,"new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's": 1,"(crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to": 1,"full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session": 1,"# # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific": 1,"the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session -t ${session_name}"": 1,"<submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}"": 1,"echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path")": 1,"# # ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits the window, and": 1,"within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches": 1,""attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" #": 1,"${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new": 1,"splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux": 1,"-t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m": 1,"launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within": 1,"# cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a specific crq within a": 1,"in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123"": 1,"# description: this script launches a new tmux session for a specific crq # within a submodule, splits the window, and starts the": 1,"check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t": 1,"#!/usr/bin/env bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux": 1,"existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands": 1,"splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage:": 1,"do not attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually:": 1,"2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d": 1,""$session_name" # send commands to the new tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate": 1,"# ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for": 1,"if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux": 1,"session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then": 1,"c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the user": 1,"-d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created session from here. the": 1,"else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux session # split window": 1,"if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name"": 1,""launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name"": 1,"window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name"": 1,""example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq": 1,"this script launches a new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini #": 1,"-euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2"": 1,"# usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq # within a submodule,": 1,"session for a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo": 1,"a specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ==============================================================================": 1,"-t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly created": 1,"tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name" # send commands to": 1,"attach to the newly created session from here. the user will attach manually. echo "tmux session ${session_name} created. please attach manually: tmux attach-session": 1,"send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the newly": 1,"boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to": 1,"-h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name"": 1,""$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux": 1,"# ============================================================================== # this script launches a new tmux session for a specific crq within a submodule, # splits the window, and starts": 1,"c-m # navigate to the lower pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd": 1,"exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path submodule_name=$(basename "$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq:": 1,"and starts the gemini # cli in the submodule's context. # # ============================================================================== # this script launches a new tmux session for a": 1,"then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s": 1,"gemini cli in the submodule's context. set -euo pipefail if [ -z "$2" ]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0": 1,"new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context.": 1,"echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo "creating new tmux session: ${session_name}" tmux new-session -d -s "$session_name"": 1,"bash # ============================================================================== # # file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session": 1,"a new tmux session for a specific crq # within a submodule, splits the window, and starts the gemini # cli in the": 1,"specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's context. set -euo pipefail if [": 1,"crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context. # # ============================================================================== # this": 1,"tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do not attach to the": 1,"tmux session # split window horizontally tmux send-keys -t "$session_name" "tmux split-window -h" c-m # navigate to the lower pane and run boot.sh": 1,""$submodule_path") session_name="crq-${crq_number}-${submodule_name}" root_dir="/data/data/com.termux.nix/files/home/pick-up-nix2" full_submodule_path="${root_dir}/${submodule_path}" echo "launching crq session for ${submodule_name} (crq: ${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists": 1,"session for a specific crq # within a submodule, splits the window, and starts the gemini # cli in the submodule's context. #": 1,"session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing tmux session: ${session_name}" tmux attach-session -t "$session_name" else echo": 1,"${crq_number}) in tmux session: ${session_name}" # check if tmux session already exists if tmux has-session -t "$session_name" 2>/dev/null; then echo "attaching to existing": 1,"pane and run boot.sh tmux send-keys -t "$session_name" "tmux select-pane -d" c-m tmux send-keys -t "$session_name" "cd ${full_submodule_path} && ./boot.sh" c-m # do": 1,"a new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli in the submodule's": 1,"# file: launch_crq_session.sh # # usage: ./scripts/session/launch_crq_session.sh <submodule_path> <crq_number> # # description: this script launches a new tmux session for a specific crq": 1,"]; then echo "usage: $0 <submodule_path> <crq_number>" echo "example: $0 vendor/nix/nixtract 123" exit 1 fi submodule_path="$1" crq_number="$2" # extract submodule name from path": 1,"this script launches a new tmux session for a specific crq within a submodule, # splits the window, and starts the gemini cli": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/session/run_gemini_session.sh": {
      "1-gram": {
"managed": 1,"exits,": 1,"when": 1,"from": 2,"commands": 1,"session:": 2,"it": 3,"determine": 1,"`boot.sh`).": 1,"runs": 1,"script": 1,"<asciinema_rec_file>": 1,""asciinema": 1,"boot.sh": 1,"passed": 1,"stopping": 1,"asciinema": 3,"development": 1,""echo": 2,"send-keys": 3,"after": 1,"send": 1,"-d": 1,"bun": 1,"session_name="$2"": 1,"file:": 1,"else": 1,"--model=gemini-2.5-flash": 1,"--prompt-interactive": 2,"best": 1,"new-session": 1,"(formerly": 1,"closely": 1,"existing": 2,"attaching": 1,"new": 3,"optionally": 1,"this": 1,"kill": 1,"recording..."": 1,""$gemini_invocation": 1,"$task_file...'"": 1,"-s": 1,"run": 1,"or": 3,"`tmux`": 1,"==============================================================================": 2,"need": 1,"so": 1,"default,": 1,"--all-files,": 1,""starting": 1,"-t": 5,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"#fi": 1,"gemini_invocation="bunx": 1,"#if": 1,"gemini": 4,"the": 10,"<session_name>": 1,"default": 1,"session!'"": 1,"'welcome": 1,"continue": 1,"using": 1,"practices:": 1,"incorporating": 1,"and": 1,"create": 1,"doesn't": 1,"tmux": 12,"/dev/null;then": 1,"method": 1,"it's": 1,"to": 9,"a": 3,"cli": 2,"<task_file>": 1,"bash": 1,"recording": 2,""attaching": 1,"loading": 1,"then": 1,"!": 1,"-v": 1,"npx)": 1,"don't": 1,"--checkpointing": 2,"$session_name"": 2,"2>/dev/null;": 1,""$session_name"": 6,"start": 1,"command": 2,"task_file="$3"": 1,"description:": 1,"process": 1,"boot.sh,": 1,"exited.": 1,"attach-session": 1,"\"@$task_file\""": 1,"file": 1,"task": 2,"--approval-mode": 2,"echo": 4,"exist,": 1,"&>": 1,"creating": 1,"within": 1,"usage:": 1,"#": 23,"stopped."": 1,"will": 1,"invocation": 1,"by": 1,"here.": 1,"pid": 1,"attach": 2,"(bunx": 1,"`start_development_session.sh`": 1,"one.": 1,"./scripts/session/run_gemini_session.sh": 1,"#!/usr/bin/env": 1,"we": 1,"is": 2,""tmux": 1,"stop": 1,"fi": 1,"'loading": 1,"c-m": 3,"has-session": 1,"if": 2,"@google/gemini-cli"": 2,"#gemini_invocation="npx": 1,"related": 1,"an": 1,"session": 8,"session,": 1,"run_gemini_session.sh": 1      }
,
      "2-gram": {
"$session_name" fi": 1,""$gemini_invocation --model=gemini-2.5-flash": 1,"or attach": 1,"attaching to": 1,"using --prompt-interactive": 1,"session tmux": 1,"to existing": 1,"to continue": 1,"practices: --all-files,": 1,"to the": 3,"# ==============================================================================": 2,"it and": 1,"the tmux": 1,"'welcome to": 1,"here. #": 1,"run_gemini_session.sh #": 1,"-t "$session_name"": 5,"session!'" c-m": 1,"so we": 1,"session or": 1,"! tmux": 1,"kill it": 1,""echo 'welcome": 1,"send-keys -t": 3,"#!/usr/bin/env bash": 1,"is managed": 1,"a `tmux`": 1,"============================================================================== #": 1,"exist, it": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"<task_file> #": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"-v bun": 1,"--approval-mode default": 1,"# send": 1,"doesn't exist,": 1,"else echo": 1,"tmux new-session": 1,"by boot.sh": 1,"session exited.": 1,"and run": 1,"(formerly `boot.sh`).": 1,"existing #": 1,"description: this": 1,"npx) #gemini_invocation="npx": 1,""tmux session": 1,"or npx)": 1,"the new": 1,"task from": 1,"need to": 1,"to kill": 1,"file tmux": 1,"a tmux": 1,"<asciinema_rec_file> <session_name>": 1,"it's closely": 1,"attach-session -t": 1,"session: $session_name"": 2,"if the": 1,"the task": 1,"it here.": 1,"tmux session": 4,"#gemini_invocation="npx @google/gemini-cli"": 1,"existing tmux": 1,"bun &>": 1,"c-m else": 1,"--prompt-interactive \"@$task_file\""": 1,"--model=gemini-2.5-flash --approval-mode": 1,"file: run_gemini_session.sh": 1,"from boot.sh,": 1,"attach to": 2,"/dev/null;then #": 1,"--approval-mode default,": 1,"development session!'"": 1,"will create": 1,"recording..." #": 1,"from $task_file...'"": 1,"best practices:": 1,"echo "tmux": 1,"run the": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"passed from": 1,"# file:": 1,"the session": 2,"# using": 1,"`start_development_session.sh` #": 1,"\"@$task_file\"" c-m": 1,"start or": 1,"# description:": 1,"-s "$session_name"": 1,"session_name="$2" task_file="$3"": 1,"session #": 2,"script runs": 1,"new session": 1,""$session_name" 2>/dev/null;": 1,"loading the": 1,"--checkpointing #": 1,"asciinema process": 1,"one. it's": 1,"or attaching": 1,"session, #": 1,"to `start_development_session.sh`": 1,"tmux send-keys": 3,"exited. stopping": 1,"<session_name> <task_file>": 1,"runs the": 1,"tmux session:": 2,"then echo": 1,""$session_name" "echo": 2,"tmux has-session": 1,"command if": 1,"it will": 1,"if !": 1,"# one.": 1,"don't need": 1,"# start": 1,"when tmux": 1,"after loading": 1,"@google/gemini-cli" #if": 1,"cli within": 1,"continue the": 1,"new-session -d": 1,"a new": 1,""echo 'loading": 1,"# (formerly": 1,"to an": 1,"task file": 1,"# the": 2,"managed by": 1,"the pid": 1,"--all-files, --approval-mode": 1,"fi #": 1,"to a": 1,"bash #": 1,"gemini cli": 2,"# when": 1,"cli invocation": 1,"default, --checkpointing": 1,"usage: ./scripts/session/run_gemini_session.sh": 1,"stopping asciinema": 1,"# incorporating": 1,"related to": 1,"task_file="$3" #": 1,"# usage:": 1,"the asciinema": 1,"session doesn't": 1,"# determine": 1,"is passed": 1,""starting new": 1,"# optionally": 1,"gemini_invocation="bunx @google/gemini-cli"": 1,"stop asciinema": 1,"# attach": 1,"determine gemini": 1,"2>/dev/null; then": 1,"has-session -t": 1,"new tmux": 2,"============================================================================== session_name="$2"": 1,"&> /dev/null;then": 1,"the gemini": 3,"tmux attach-session": 1,"echo "starting": 1,"invocation method": 1,"we don't": 1,"--prompt-interactive to": 1,"this script": 1,"(bunx or": 1,"-d -s": 1,""$session_name" "$gemini_invocation": 1,"`boot.sh`). #": 1,"pid is": 1,""asciinema recording": 1,""attaching to": 1,"#if command": 1,"creating a": 1,"# gemini_invocation="bunx": 1,"echo "asciinema": 1,"default --checkpointing": 1,"within a": 1,"boot.sh echo": 1,""$session_name" #": 2,"gemini development": 1,"$session_name" tmux": 1,"gemini command": 1,"# #": 4,"session exits,": 1,"incorporating best": 1,"recording echo": 1,"asciinema recording..."": 1,"c-m tmux": 2,"session after": 1,"# if": 1,"send commands": 1,"optionally creating": 1,"recording stopped."": 1,"boot.sh, so": 1,"exits, stop": 1,"$task_file...'" c-m": 1,"an existing": 1,"echo "attaching": 1,"--checkpointing --prompt-interactive": 1,"`tmux` session,": 1,"command -v": 1,"process is": 1,"closely related": 1,"commands to": 1,"method (bunx": 1,"create it": 1,"@google/gemini-cli" #fi": 1,"asciinema recording": 1,"'loading task": 1      }
,
      "3-gram": {
"'welcome to the": 1,"within a `tmux`": 1,"session: $session_name" tmux": 1,"managed by boot.sh": 1,"process is managed": 1,"description: this script": 1,"to kill it": 1,"c-m else echo": 1,"the gemini cli": 1,"c-m tmux send-keys": 2,"@google/gemini-cli" #if command": 1,"# determine gemini": 1,"# send commands": 1,"# the pid": 1,"# when tmux": 1,"tmux attach-session -t": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"# # usage:": 1,"attach to a": 1,"to continue the": 1,"to `start_development_session.sh` #": 1,"the session after": 1,"to the tmux": 1,"to the gemini": 1,"and run the": 1,"method (bunx or": 1,"echo "tmux session": 1,"# file: run_gemini_session.sh": 1,"#gemini_invocation="npx @google/gemini-cli" #if": 1,"stopping asciinema recording..."": 1,"gemini command if": 1,"tmux session exits,": 1,"session or attaching": 1,"to the new": 1,"fi # attach": 1,"determine gemini cli": 1,"when tmux session": 1,"'loading task from": 1,"session doesn't exist,": 1,""attaching to existing": 1,"or attaching to": 1,"file tmux send-keys": 1,"gemini cli within": 1,"session_name="$2" task_file="$3" #": 1,"--all-files, --approval-mode default,": 1,""asciinema recording stopped."": 1,"exits, stop asciinema": 1,"the task file": 1,"asciinema recording..." #": 1,"exist, it will": 1,"kill it here.": 1,"(bunx or npx)": 1,"session!'" c-m tmux": 1,"$session_name" fi #": 1,"file: run_gemini_session.sh #": 1,"# gemini_invocation="bunx @google/gemini-cli"": 1,"`tmux` session, #": 1,"tmux session: $session_name"": 2,"pid is passed": 1,""$session_name" "echo 'welcome": 1,"new session or": 1,"here. # the": 1,""echo 'loading task": 1,"session tmux attach-session": 1,"tmux session tmux": 1,"has-session -t "$session_name"": 1,""$session_name" # send": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,"existing # one.": 1,"development session!'" c-m": 1,""$session_name" 2>/dev/null; then": 1,"# incorporating best": 1,"script runs the": 1,"so we don't": 1,"invocation method (bunx": 1,"# (formerly `boot.sh`).": 1,"command -v bun": 1,"============================================================================== session_name="$2" task_file="$3"": 1,"--checkpointing # using": 1,"<session_name> <task_file> #": 1,"it will create": 1,"attach-session -t "$session_name"": 1,"else echo "attaching": 1,"\"@$task_file\"" c-m else": 1,"session: $session_name" fi": 1,"send-keys -t "$session_name"": 3,"task file tmux": 1,"# description: this": 1,"is managed by": 1,"asciinema process is": 1,"it here. #": 1,"if the session": 1,"a `tmux` session,": 1,"# # description:": 1,"run the gemini": 1,"gemini_invocation="bunx @google/gemini-cli" #fi": 1,"exited. stopping asciinema": 1,"loading the task": 1,"-t "$session_name" 2>/dev/null;": 1,""echo 'welcome to": 1,"-s "$session_name" #": 1,"don't need to": 1,"attach to the": 1,"practices: --all-files, --approval-mode": 1,"-t "$session_name" "$gemini_invocation": 1,"session, # optionally": 1,"it's closely related": 1,"then echo "starting": 1,"boot.sh echo "asciinema": 1,"session exited. stopping": 1,"it and run": 1,"start or attach": 1,"# if the": 1,"tmux send-keys -t": 3,"using --prompt-interactive to": 1,"stop asciinema recording": 1,"continue the session": 1,"by boot.sh echo": 1,"run_gemini_session.sh # #": 1,"echo "asciinema recording": 1,"# using --prompt-interactive": 1,"from boot.sh, so": 1,"# ============================================================================== session_name="$2"": 1,"recording echo "tmux": 1,"or attach to": 1,"doesn't exist, it": 1,"related to `start_development_session.sh`": 1,"cli invocation method": 1,"the asciinema process": 1,"-v bun &>": 1,"closely related to": 1,"optionally creating a": 1,"commands to the": 1,"the gemini command": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"2>/dev/null; then echo": 1,"--checkpointing --prompt-interactive \"@$task_file\""": 1,"session # if": 1,"recording..." # the": 1,"a new session": 1,"# optionally creating": 1,"after loading the": 1,"command if !": 1,"-t "$session_name" #": 1,"--model=gemini-2.5-flash --approval-mode default": 1,"<task_file> # #": 1,""tmux session exited.": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"bash # ==============================================================================": 1,"the pid is": 1,"attaching to an": 1,"npx) #gemini_invocation="npx @google/gemini-cli"": 1,"task from $task_file...'"": 1,"new tmux session": 1,"to a tmux": 1,"from $task_file...'" c-m": 1,"best practices: --all-files,": 1,"if ! tmux": 1,"&> /dev/null;then #": 1,"(formerly `boot.sh`). #": 1,"echo "starting new": 1,"to existing tmux": 1,"-t "$session_name" "echo": 2,"default, --checkpointing #": 1,"an existing #": 1,"one. it's closely": 1,"to an existing": 1,"--prompt-interactive to continue": 1,"incorporating best practices:": 1,"session # incorporating": 1,"the new tmux": 1,""$session_name" # when": 1,"the tmux session": 1,"new-session -d -s": 1,"<asciinema_rec_file> <session_name> <task_file>": 1,"#!/usr/bin/env bash #": 1,""$session_name" "echo 'loading": 1,"creating a new": 1,"is passed from": 1,"tmux new-session -d": 1,"# the asciinema": 1,"cli within a": 1,"`boot.sh`). # #": 1,"`start_development_session.sh` # (formerly": 1,"the session doesn't": 1,"--approval-mode default, --checkpointing": 1,"we don't need": 1,"#if command -v": 1,"$session_name" tmux new-session": 1,"# attach to": 1,"tmux has-session -t": 1,"passed from boot.sh,": 1,"$task_file...'" c-m tmux": 1,"gemini development session!'"": 1,"# # ==============================================================================": 1,"--approval-mode default --checkpointing": 1,"============================================================================== # #": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"the gemini development": 1,"# one. it's": 1,"echo "attaching to": 1,"session exits, stop": 1,"existing tmux session:": 1,"send commands to": 1,"tmux session #": 2,"asciinema recording echo": 1,"! tmux has-session": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,""starting new tmux": 1,"/dev/null;then # gemini_invocation="bunx": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"a tmux session": 1,"bun &> /dev/null;then": 1,"# usage: ./scripts/session/run_gemini_session.sh": 1,"# ============================================================================== #": 1,"create it and": 1,"default --checkpointing --prompt-interactive": 1,"runs the gemini": 1,"this script runs": 1,"# # file:": 1,"# start or": 1,"new tmux session:": 1,"task_file="$3" # determine": 1,"boot.sh, so we": 1,"--prompt-interactive \"@$task_file\"" c-m": 1,"session after loading": 1,"will create it": 1,"-d -s "$session_name"": 1,"gemini cli invocation": 1,"or npx) #gemini_invocation="npx": 1,"need to kill": 1      }
,
      "5-gram": {
"-t "$session_name" "echo 'welcome to": 1,"task_file="$3" # determine gemini cli": 1,"the pid is passed from": 1,"bun &> /dev/null;then # gemini_invocation="bunx": 1,"-t "$session_name" # when tmux": 1,"the session doesn't exist, it": 1,"#if command -v bun &>": 1,"# # file: run_gemini_session.sh #": 1,"by boot.sh echo "asciinema recording": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"\"@$task_file\"" c-m else echo "attaching": 1,"gemini development session!'" c-m tmux": 1,"attaching to an existing #": 1,"exist, it will create it": 1,"the new tmux session #": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"one. it's closely related to": 1,"need to kill it here.": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"# if the session doesn't": 1,"don't need to kill it": 1,"command if ! tmux has-session": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"the session after loading the": 1,"`tmux` session, # optionally creating": 1,"-t "$session_name" 2>/dev/null; then echo": 1,"within a `tmux` session, #": 1,"session: $session_name" tmux new-session -d": 1,"# the asciinema process is": 1,"send-keys -t "$session_name" "echo 'loading": 1,"bash # ============================================================================== # #": 1,"exits, stop asciinema recording echo": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"or attach to a tmux": 1,"-d -s "$session_name" # send": 1,""echo 'loading task from $task_file...'"": 1,"file: run_gemini_session.sh # # usage:": 1,"using --prompt-interactive to continue the": 1,"# send commands to the": 1,"session!'" c-m tmux send-keys -t": 1,"to existing tmux session: $session_name"": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"else echo "attaching to existing": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach": 1,"doesn't exist, it will create": 1,"$task_file...'" c-m tmux send-keys -t": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"new-session -d -s "$session_name" #": 1,""$session_name" # when tmux session": 1,"to kill it here. #": 1,""tmux session exited. stopping asciinema": 1,"invocation method (bunx or npx)": 1,"exited. stopping asciinema recording..." #": 1,"-s "$session_name" # send commands": 1,"new tmux session # incorporating": 1,"this script runs the gemini": 1,"loading the task file tmux": 1,"tmux session exits, stop asciinema": 1,"managed by boot.sh echo "asciinema": 1,"gemini command if ! tmux": 1,"to an existing # one.": 1,"session after loading the task": 1,"recording..." # the pid is": 1,"creating a new session or": 1,"# attach to the tmux": 1,"tmux new-session -d -s "$session_name"": 1,"session exits, stop asciinema recording": 1,"to the tmux session tmux": 1,"the gemini development session!'" c-m": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"commands to the new tmux": 1,"task file tmux send-keys -t": 1,"(formerly `boot.sh`). # # ==============================================================================": 1,"it's closely related to `start_development_session.sh`": 1,"session exited. stopping asciinema recording..."": 1,"to the gemini development session!'"": 1,"fi # attach to the": 1,"it and run the gemini": 1,"it here. # the asciinema": 1,"'welcome to the gemini development": 1,"session # incorporating best practices:": 1,""attaching to existing tmux session:": 1,"the task file tmux send-keys": 1,"`boot.sh`). # # ============================================================================== session_name="$2"": 1,"# determine gemini cli invocation": 1,"is passed from boot.sh, so": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"--all-files, --approval-mode default, --checkpointing #": 1,"new session or attaching to": 1,"existing tmux session: $session_name" fi": 1,"<asciinema_rec_file> <session_name> <task_file> # #": 1,"session # if the session": 1,"after loading the task file": 1,"to the new tmux session": 1,"description: this script runs the": 1,"is managed by boot.sh echo": 1,"we don't need to kill": 1,"tmux session: $session_name" fi #": 1,"session doesn't exist, it will": 1,"session_name="$2" task_file="$3" # determine gemini": 1,""$session_name" 2>/dev/null; then echo "starting": 1,"tmux session: $session_name" tmux new-session": 1,"c-m else echo "attaching to": 1,"2>/dev/null; then echo "starting new": 1,"# file: run_gemini_session.sh # #": 1,"so we don't need to": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"# # description: this script": 1,"# (formerly `boot.sh`). # #": 1,"session tmux attach-session -t "$session_name"": 1,"if ! tmux has-session -t": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"asciinema process is managed by": 1,"recording echo "tmux session exited.": 1,"will create it and run": 1,"tmux session # if the": 1,"--prompt-interactive to continue the session": 1,"# # ============================================================================== session_name="$2" task_file="$3"": 1,"run the gemini command if": 1,"has-session -t "$session_name" 2>/dev/null; then": 1,"session: $session_name" fi # attach": 1,"practices: --all-files, --approval-mode default, --checkpointing": 1,"$session_name" tmux new-session -d -s": 1,"-v bun &> /dev/null;then #": 1,"if the session doesn't exist,": 1,"an existing # one. it's": 1,"start or attach to a": 1,"boot.sh echo "asciinema recording stopped."": 1,"boot.sh, so we don't need": 1,"============================================================================== session_name="$2" task_file="$3" # determine": 1,"cli invocation method (bunx or": 1,"existing # one. it's closely": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or": 1,"new tmux session: $session_name" tmux": 1,""$session_name" "echo 'welcome to the": 1,"tmux session tmux attach-session -t": 1,"# using --prompt-interactive to continue": 1,"to `start_development_session.sh` # (formerly `boot.sh`).": 1,"continue the session after loading": 1,"from boot.sh, so we don't": 1,"'loading task from $task_file...'" c-m": 1,""starting new tmux session: $session_name"": 1,"attach-session -t "$session_name" # when": 1,"c-m tmux send-keys -t "$session_name"": 2,"`start_development_session.sh` # (formerly `boot.sh`). #": 1,"# start or attach to": 1,"tmux session # incorporating best": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"here. # the asciinema process": 1,"send-keys -t "$session_name" "echo 'welcome": 1,"send commands to the new": 1,"<session_name> <task_file> # # description:": 1,"then echo "starting new tmux": 1,"stopping asciinema recording..." # the": 1,"# the pid is passed": 1,"# when tmux session exits,": 1,"tmux send-keys -t "$session_name" "$gemini_invocation": 1,"to a tmux session #": 1,"session, # optionally creating a": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"# ============================================================================== # # file:": 1,"passed from boot.sh, so we": 1,"optionally creating a new session": 1,"============================================================================== # # file: run_gemini_session.sh": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"the tmux session tmux attach-session": 1,"! tmux has-session -t "$session_name"": 1,"closely related to `start_development_session.sh` #": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"gemini cli invocation method (bunx": 1,""$session_name" "echo 'loading task from": 1,"the gemini command if !": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,"--approval-mode default, --checkpointing # using": 1,"@google/gemini-cli" #if command -v bun": 1,"runs the gemini cli within": 1,"tmux has-session -t "$session_name" 2>/dev/null;": 1,"default, --checkpointing # using --prompt-interactive": 1,"the asciinema process is managed": 1,"<task_file> # # description: this": 1,"gemini cli within a `tmux`": 1,"asciinema recording echo "tmux session": 1,"tmux attach-session -t "$session_name" #": 1,"attach to the tmux session": 1,"and run the gemini command": 1,"attach to a tmux session": 1,"or attaching to an existing": 1,"it will create it and": 1,"script runs the gemini cli": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh": 1,"# description: this script runs": 1,"development session!'" c-m tmux send-keys": 1,"# incorporating best practices: --all-files,": 1,"asciinema recording..." # the pid": 1,"a tmux session # if": 1,"from $task_file...'" c-m tmux send-keys": 1,"task from $task_file...'" c-m tmux": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"-t "$session_name" "echo 'loading task": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"incorporating best practices: --all-files, --approval-mode": 1,"echo "starting new tmux session:": 1,"# ============================================================================== session_name="$2" task_file="$3" #": 1,"session or attaching to an": 1,"echo "attaching to existing tmux": 1,"the gemini cli within a": 1,"# one. it's closely related": 1,"best practices: --all-files, --approval-mode default,": 1,"a new session or attaching": 1,"--checkpointing # using --prompt-interactive to": 1,"determine gemini cli invocation method": 1,"kill it here. # the": 1,"stop asciinema recording echo "tmux": 1,"when tmux session exits, stop": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"tmux send-keys -t "$session_name" "echo": 2,"create it and run the": 1,"$session_name" fi # attach to": 1,""echo 'welcome to the gemini": 1,"related to `start_development_session.sh` # (formerly": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"command -v bun &> /dev/null;then": 1,"to continue the session after": 1,"--prompt-interactive \"@$task_file\"" c-m else echo": 1,"process is managed by boot.sh": 1,"file tmux send-keys -t "$session_name"": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"# optionally creating a new": 1,"pid is passed from boot.sh,": 1,"cli within a `tmux` session,": 1,""$session_name" # send commands to": 1,"echo "tmux session exited. stopping": 1,"method (bunx or npx) #gemini_invocation="npx": 1,"a `tmux` session, # optionally": 1      }
,
      "7-gram": {
"# when tmux session exits, stop asciinema": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"-t "$session_name" "echo 'loading task from $task_file...'"": 1,"session: $session_name" fi # attach to the": 1,"the task file tmux send-keys -t "$session_name"": 1,""$session_name" # send commands to the new": 1,"tmux session: $session_name" fi # attach to": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1,"# optionally creating a new session or": 1,""$session_name" 2>/dev/null; then echo "starting new tmux": 1,"here. # the asciinema process is managed": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"recording echo "tmux session exited. stopping asciinema": 1,"tmux send-keys -t "$session_name" "echo 'loading task": 1,"run the gemini command if ! tmux": 1,"# using --prompt-interactive to continue the session": 1,"to the tmux session tmux attach-session -t": 1,""attaching to existing tmux session: $session_name" fi": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"and run the gemini command if !": 1,"-s "$session_name" # send commands to the": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"existing tmux session: $session_name" fi # attach": 1,"will create it and run the gemini": 1,"the session after loading the task file": 1,"the gemini cli within a `tmux` session,": 1,"fi # attach to the tmux session": 1,"process is managed by boot.sh echo "asciinema": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"pid is passed from boot.sh, so we": 1,"best practices: --all-files, --approval-mode default, --checkpointing #": 1,"exited. stopping asciinema recording..." # the pid": 1,"# one. it's closely related to `start_development_session.sh`": 1,"$session_name" tmux new-session -d -s "$session_name" #": 1,"# send commands to the new tmux": 1,"tmux session # if the session doesn't": 1,"to a tmux session # if the": 1,"# # description: this script runs the": 1,"so we don't need to kill it": 1,"loading the task file tmux send-keys -t": 1,"an existing # one. it's closely related": 1,"it will create it and run the": 1,"creating a new session or attaching to": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"session # if the session doesn't exist,": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"session after loading the task file tmux": 1,"when tmux session exits, stop asciinema recording": 1,""echo 'loading task from $task_file...'" c-m tmux": 1,"# incorporating best practices: --all-files, --approval-mode default,": 1,"echo "tmux session exited. stopping asciinema recording..."": 1,"session: $session_name" tmux new-session -d -s "$session_name"": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"<session_name> <task_file> # # description: this script": 1,"new tmux session: $session_name" tmux new-session -d": 1,"the session doesn't exist, it will create": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or": 1,"a tmux session # if the session": 1,"# the pid is passed from boot.sh,": 1,""tmux session exited. stopping asciinema recording..." #": 1,"or attach to a tmux session #": 1,"c-m else echo "attaching to existing tmux": 1,"practices: --all-files, --approval-mode default, --checkpointing # using": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"# description: this script runs the gemini": 1,"gemini cli within a `tmux` session, #": 1,"create it and run the gemini command": 1,"this script runs the gemini cli within": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach": 1,"to continue the session after loading the": 1,"to existing tmux session: $session_name" fi #": 1,"session # incorporating best practices: --all-files, --approval-mode": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"don't need to kill it here. #": 1,"============================================================================== # # file: run_gemini_session.sh # #": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,""$session_name" # when tmux session exits, stop": 1,"-t "$session_name" 2>/dev/null; then echo "starting new": 1,"'loading task from $task_file...'" c-m tmux send-keys": 1,"or attaching to an existing # one.": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"# the asciinema process is managed by": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"using --prompt-interactive to continue the session after": 1,"# # file: run_gemini_session.sh # # usage:": 1,"to the gemini development session!'" c-m tmux": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"tmux send-keys -t "$session_name" "echo 'welcome to": 1,"tmux attach-session -t "$session_name" # when tmux": 1,"`tmux` session, # optionally creating a new": 1,"it here. # the asciinema process is": 1,"attach to the tmux session tmux attach-session": 1,"$session_name" fi # attach to the tmux": 1,"then echo "starting new tmux session: $session_name"": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"the gemini development session!'" c-m tmux send-keys": 1,"it and run the gemini command if": 1,"cli within a `tmux` session, # optionally": 1,"-t "$session_name" # when tmux session exits,": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"new-session -d -s "$session_name" # send commands": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a": 1,"echo "starting new tmux session: $session_name" tmux": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to": 1,"if the session doesn't exist, it will": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"is passed from boot.sh, so we don't": 1,"tmux session exits, stop asciinema recording echo": 1,"attach to a tmux session # if": 1,"exist, it will create it and run": 1,"managed by boot.sh echo "asciinema recording stopped."": 1,"the asciinema process is managed by boot.sh": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"new tmux session # incorporating best practices:": 1,"task from $task_file...'" c-m tmux send-keys -t": 1,"script runs the gemini cli within a": 1,"we don't need to kill it here.": 1,"exits, stop asciinema recording echo "tmux session": 1,"# attach to the tmux session tmux": 1,"--checkpointing # using --prompt-interactive to continue the": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"the new tmux session # incorporating best": 1,"command if ! tmux has-session -t "$session_name"": 1,"asciinema process is managed by boot.sh echo": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"task file tmux send-keys -t "$session_name" "echo": 1,"send commands to the new tmux session": 1,"commands to the new tmux session #": 1,"tmux session # incorporating best practices: --all-files,": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to": 1,"# if the session doesn't exist, it": 1,"task_file="$3" # determine gemini cli invocation method": 1,"development session!'" c-m tmux send-keys -t "$session_name"": 1,"existing # one. it's closely related to": 1,""echo 'welcome to the gemini development session!'"": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"the pid is passed from boot.sh, so": 1,"else echo "attaching to existing tmux session:": 1,"new session or attaching to an existing": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"tmux session: $session_name" tmux new-session -d -s": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"doesn't exist, it will create it and": 1,"default, --checkpointing # using --prompt-interactive to continue": 1,"bash # ============================================================================== # # file: run_gemini_session.sh": 1,"asciinema recording echo "tmux session exited. stopping": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"# start or attach to a tmux": 1,"file tmux send-keys -t "$session_name" "echo 'welcome": 1,"attach-session -t "$session_name" # when tmux session": 1,"# determine gemini cli invocation method (bunx": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"within a `tmux` session, # optionally creating": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,""$session_name" "echo 'welcome to the gemini development": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"attaching to an existing # one. it's": 1,"session exited. stopping asciinema recording..." # the": 1,"tmux new-session -d -s "$session_name" # send": 1,"gemini cli invocation method (bunx or npx)": 1,"stopping asciinema recording..." # the pid is": 1,"gemini command if ! tmux has-session -t": 1,"passed from boot.sh, so we don't need": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"#if command -v bun &> /dev/null;then #": 1,"asciinema recording..." # the pid is passed": 1,"tmux session tmux attach-session -t "$session_name" #": 1,"continue the session after loading the task": 1,"boot.sh, so we don't need to kill": 1,"recording..." # the pid is passed from": 1,""$session_name" "echo 'loading task from $task_file...'" c-m": 1,"session tmux attach-session -t "$session_name" # when": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"echo "attaching to existing tmux session: $session_name"": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # #": 1,"from boot.sh, so we don't need to": 1,"one. it's closely related to `start_development_session.sh` #": 1,"2>/dev/null; then echo "starting new tmux session:": 1,"the gemini command if ! tmux has-session": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"-t "$session_name" "echo 'welcome to the gemini": 1,"a `tmux` session, # optionally creating a": 1,""starting new tmux session: $session_name" tmux new-session": 1,"gemini development session!'" c-m tmux send-keys -t": 1,"send-keys -t "$session_name" "echo 'welcome to the": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description:": 1,"need to kill it here. # the": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"\"@$task_file\"" c-m else echo "attaching to existing": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh": 1,"--prompt-interactive to continue the session after loading": 1,"determine gemini cli invocation method (bunx or": 1,"to an existing # one. it's closely": 1,"runs the gemini cli within a `tmux`": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"stop asciinema recording echo "tmux session exited.": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"start or attach to a tmux session": 1,"# ============================================================================== # # file: run_gemini_session.sh #": 1,"is managed by boot.sh echo "asciinema recording": 1,"<task_file> # # description: this script runs": 1,"optionally creating a new session or attaching": 1,"after loading the task file tmux send-keys": 1,"the tmux session tmux attach-session -t "$session_name"": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"session, # optionally creating a new session": 1,"a new session or attaching to an": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"send-keys -t "$session_name" "echo 'loading task from": 1,"-d -s "$session_name" # send commands to": 1,"to the new tmux session # incorporating": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"'welcome to the gemini development session!'" c-m": 1,"to kill it here. # the asciinema": 1,"description: this script runs the gemini cli": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"session exits, stop asciinema recording echo "tmux": 1,"kill it here. # the asciinema process": 1,"it's closely related to `start_development_session.sh` # (formerly": 1,"session or attaching to an existing #": 1,"session doesn't exist, it will create it": 1      }
,
      "11-gram": {
"boot.sh, so we don't need to kill it here. # the": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"using --prompt-interactive to continue the session after loading the task file": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # #": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"passed from boot.sh, so we don't need to kill it here.": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"it will create it and run the gemini command if !": 1,"pid is passed from boot.sh, so we don't need to kill": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"a tmux session # if the session doesn't exist, it will": 1,"new session or attaching to an existing # one. it's closely": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the": 1,"-s "$session_name" # send commands to the new tmux session #": 1,"script runs the gemini cli within a `tmux` session, # optionally": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"send commands to the new tmux session # incorporating best practices:": 1,"it here. # the asciinema process is managed by boot.sh echo": 1,"start or attach to a tmux session # if the session": 1,"to existing tmux session: $session_name" fi # attach to the tmux": 1,"<session_name> <task_file> # # description: this script runs the gemini cli": 1,"the session doesn't exist, it will create it and run the": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"within a `tmux` session, # optionally creating a new session or": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"asciinema recording..." # the pid is passed from boot.sh, so we": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"if the session doesn't exist, it will create it and run": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"a `tmux` session, # optionally creating a new session or attaching": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"or attach to a tmux session # if the session doesn't": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,"attach to a tmux session # if the session doesn't exist,": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description:": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"commands to the new tmux session # incorporating best practices: --all-files,": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"tmux session # if the session doesn't exist, it will create": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the": 1,"recording..." # the pid is passed from boot.sh, so we don't": 1,"create it and run the gemini command if ! tmux has-session": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,"# description: this script runs the gemini cli within a `tmux`": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,"optionally creating a new session or attaching to an existing #": 1,"it and run the gemini command if ! tmux has-session -t": 1,"# if the session doesn't exist, it will create it and": 1,"kill it here. # the asciinema process is managed by boot.sh": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"description: this script runs the gemini cli within a `tmux` session,": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,"# the pid is passed from boot.sh, so we don't need": 1,"session, # optionally creating a new session or attaching to an": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"or attaching to an existing # one. it's closely related to": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,"`tmux` session, # optionally creating a new session or attaching to": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"tmux session: $session_name" fi # attach to the tmux session tmux": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"<task_file> # # description: this script runs the gemini cli within": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session #": 1,"gemini cli within a `tmux` session, # optionally creating a new": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach": 1,"this script runs the gemini cli within a `tmux` session, #": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"runs the gemini cli within a `tmux` session, # optionally creating": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs": 1,"# when tmux session exits, stop asciinema recording echo "tmux session": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"and run the gemini command if ! tmux has-session -t "$session_name"": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"-d -s "$session_name" # send commands to the new tmux session": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"don't need to kill it here. # the asciinema process is": 1,"the gemini cli within a `tmux` session, # optionally creating a": 1,"session or attaching to an existing # one. it's closely related": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"cli within a `tmux` session, # optionally creating a new session": 1,"to kill it here. # the asciinema process is managed by": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"# the asciinema process is managed by boot.sh echo "asciinema recording": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"new-session -d -s "$session_name" # send commands to the new tmux": 1,"creating a new session or attaching to an existing # one.": 1,"# optionally creating a new session or attaching to an existing": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"# using --prompt-interactive to continue the session after loading the task": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"from boot.sh, so we don't need to kill it here. #": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"a new session or attaching to an existing # one. it's": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"to an existing # one. it's closely related to `start_development_session.sh` #": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"session # if the session doesn't exist, it will create it": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux": 1,"session doesn't exist, it will create it and run the gemini": 1,"the session after loading the task file tmux send-keys -t "$session_name"": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage:": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"so we don't need to kill it here. # the asciinema": 1,"to continue the session after loading the task file tmux send-keys": 1,"continue the session after loading the task file tmux send-keys -t": 1,"doesn't exist, it will create it and run the gemini command": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"# attach to the tmux session tmux attach-session -t "$session_name" #": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"need to kill it here. # the asciinema process is managed": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"# # description: this script runs the gemini cli within a": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,"we don't need to kill it here. # the asciinema process": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,""$session_name" # send commands to the new tmux session # incorporating": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"exist, it will create it and run the gemini command if": 1,"--prompt-interactive to continue the session after loading the task file tmux": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"to a tmux session # if the session doesn't exist, it": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"is passed from boot.sh, so we don't need to kill it": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,"# start or attach to a tmux session # if the": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session": 1,"the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"session exited. stopping asciinema recording..." # the pid is passed from": 1,"will create it and run the gemini command if ! tmux": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,"existing tmux session: $session_name" fi # attach to the tmux session": 1,"tmux new-session -d -s "$session_name" # send commands to the new": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,""attaching to existing tmux session: $session_name" fi # attach to the": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"# send commands to the new tmux session # incorporating best": 1,"the pid is passed from boot.sh, so we don't need to": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1      }
,
      "13-gram": {
"or attaching to an existing # one. it's closely related to `start_development_session.sh` #": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,"# # description: this script runs the gemini cli within a `tmux` session,": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"attach to a tmux session # if the session doesn't exist, it will": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"a new session or attaching to an existing # one. it's closely related": 1,"tmux session # if the session doesn't exist, it will create it and": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"# send commands to the new tmux session # incorporating best practices: --all-files,": 1,"session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"description: this script runs the gemini cli within a `tmux` session, # optionally": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"from boot.sh, so we don't need to kill it here. # the asciinema": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" #": 1,"the pid is passed from boot.sh, so we don't need to kill it": 1,"a `tmux` session, # optionally creating a new session or attaching to an": 1,"to existing tmux session: $session_name" fi # attach to the tmux session tmux": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new": 1,"boot.sh, so we don't need to kill it here. # the asciinema process": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"the session doesn't exist, it will create it and run the gemini command": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"pid is passed from boot.sh, so we don't need to kill it here.": 1,"creating a new session or attaching to an existing # one. it's closely": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"new session or attaching to an existing # one. it's closely related to": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"the gemini cli within a `tmux` session, # optionally creating a new session": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"# if the session doesn't exist, it will create it and run the": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading the task": 1,"runs the gemini cli within a `tmux` session, # optionally creating a new": 1,"-s "$session_name" # send commands to the new tmux session # incorporating best": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach": 1,"or attach to a tmux session # if the session doesn't exist, it": 1,"to kill it here. # the asciinema process is managed by boot.sh echo": 1,"is passed from boot.sh, so we don't need to kill it here. #": 1,"session # if the session doesn't exist, it will create it and run": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"need to kill it here. # the asciinema process is managed by boot.sh": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"optionally creating a new session or attaching to an existing # one. it's": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the task file": 1,"gemini cli within a `tmux` session, # optionally creating a new session or": 1,"-d -s "$session_name" # send commands to the new tmux session # incorporating": 1,"create it and run the gemini command if ! tmux has-session -t "$session_name"": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so we don't": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"so we don't need to kill it here. # the asciinema process is": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"<session_name> <task_file> # # description: this script runs the gemini cli within a": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description:": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"doesn't exist, it will create it and run the gemini command if !": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,""$session_name" # send commands to the new tmux session # incorporating best practices:": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"start or attach to a tmux session # if the session doesn't exist,": 1,"# when tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"session or attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to the tmux": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"session, # optionally creating a new session or attaching to an existing #": 1,"# the pid is passed from boot.sh, so we don't need to kill": 1,"asciinema recording..." # the pid is passed from boot.sh, so we don't need": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"to a tmux session # if the session doesn't exist, it will create": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"it here. # the asciinema process is managed by boot.sh echo "asciinema recording": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"passed from boot.sh, so we don't need to kill it here. # the": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session #": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"we don't need to kill it here. # the asciinema process is managed": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"# attach to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"cli within a `tmux` session, # optionally creating a new session or attaching": 1,""attaching to existing tmux session: $session_name" fi # attach to the tmux session": 1,"commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,"the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"--prompt-interactive to continue the session after loading the task file tmux send-keys -t": 1,"exist, it will create it and run the gemini command if ! tmux": 1,"<task_file> # # description: this script runs the gemini cli within a `tmux`": 1,"to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"a tmux session # if the session doesn't exist, it will create it": 1,"don't need to kill it here. # the asciinema process is managed by": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script": 1,"`tmux` session, # optionally creating a new session or attaching to an existing": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the": 1,"continue the session after loading the task file tmux send-keys -t "$session_name" "echo": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,"session doesn't exist, it will create it and run the gemini command if": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we": 1,"here. # the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to": 1,"and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"# optionally creating a new session or attaching to an existing # one.": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"if the session doesn't exist, it will create it and run the gemini": 1,"this script runs the gemini cli within a `tmux` session, # optionally creating": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"kill it here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is passed from": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # #": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"# start or attach to a tmux session # if the session doesn't": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"it will create it and run the gemini command if ! tmux has-session": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,"to continue the session after loading the task file tmux send-keys -t "$session_name"": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the": 1,"it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if": 1,"within a `tmux` session, # optionally creating a new session or attaching to": 1,"# description: this script runs the gemini cli within a `tmux` session, #": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,"script runs the gemini cli within a `tmux` session, # optionally creating a": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"recording..." # the pid is passed from boot.sh, so we don't need to": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"# using --prompt-interactive to continue the session after loading the task file tmux": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,"will create it and run the gemini command if ! tmux has-session -t": 1,"using --prompt-interactive to continue the session after loading the task file tmux send-keys": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach to the": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1      }
,
      "19-gram": {
"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one.": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"<session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the": 1,"new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will": 1,"# using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill": 1,"and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely": 1,"# send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files,": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"<task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new": 1,"exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the": 1,"passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"or attach to a tmux session # if the session doesn't exist, it will create it and run the": 1,"to a tmux session # if the session doesn't exist, it will create it and run the gemini command": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach": 1,"# if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session": 1,"# optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` #": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session #": 1,"the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing #": 1,"is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli": 1,"`tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux`": 1,"session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"# # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux": 1,"it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we": 1,"# attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"session # if the session doesn't exist, it will create it and run the gemini command if ! tmux": 1,"-s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, #": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" #": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist,": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"a tmux session # if the session doesn't exist, it will create it and run the gemini command if": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,"start or attach to a tmux session # if the session doesn't exist, it will create it and run": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,""attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create": 1,"# start or attach to a tmux session # if the session doesn't exist, it will create it and": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an": 1,"it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name"": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,"to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. #": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session": 1,"attach to a tmux session # if the session doesn't exist, it will create it and run the gemini": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"tmux session # if the session doesn't exist, it will create it and run the gemini command if !": 1,"-d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session": 1,"or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's": 1,"this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t": 1,"the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name"": 1,""$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"# the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related": 1,"description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching": 1,"from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo": 1,"send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session,": 1,"pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices:": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema recording": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session": 1,"# when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"--prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"# description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here.": 1,"session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t": 1      }
,
      "23-gram": {
"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best": 1,"is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema recording": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, #": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new": 1,"to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1,"# if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,"the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is": 1,"pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys": 1,"or attach to a tmux session # if the session doesn't exist, it will create it and run the gemini command if !": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name"": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it": 1,"<task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"# description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing": 1,"continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"# attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a": 1,"gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to": 1,"a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,"# when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new": 1,"tmux session # if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name"": 1,"if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating": 1,"# optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"a tmux session # if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session,": 1,"runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux": 1,"<session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching": 1,"or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"# send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"# # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist,": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"-d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"`tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,"commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,"session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file": 1,"session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to": 1,"the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. #": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices:": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"@google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it and run": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" #": 1,"session # if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session": 1,"# the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't": 1,"-s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" #": 1,"script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh"": 1,""attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` #": 1,""$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files,": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux": 1,"#fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it and run the": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need": 1,"send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here.": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"--prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux`": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"attach to a tmux session # if the session doesn't exist, it will create it and run the gemini command if ! tmux": 1,"session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"to a tmux session # if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session": 1,"a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it and run the gemini": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session #": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"# using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing #": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one.": 1,"to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,"recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by": 1,"exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,"to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/ai/gemini/gemini_cli_new.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it and": 1,"# start or attach to a tmux session # if the session doesn't exist, it will create it and run the gemini command": 1,"start or attach to a tmux session # if the session doesn't exist, it will create it and run the gemini command if": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/session/run_in_tmux_split.sh": {
      "1-gram": {
"created": 1,"[": 3,"script": 6,"(optional,": 1,""usage:": 1,"window.": 1,"select": 1,"send-keys": 1,"newly": 1,"send": 1,"launches": 1,"file:": 1,"user": 1,"check": 1,"exit": 3,"new": 3,"this": 2,"good": 1,"run": 1,"be": 1,"inside": 2,"-f": 1,"`tmux`": 1,"==============================================================================": 2,"-t": 1,"the": 3,"split-window": 1,""error:": 2,"to": 1,"create": 1,"tmux": 6,"<job_script_path>"": 1,"$0": 1,"given": 1,"a": 6,"bash": 1,"for": 1,"-v": 1,"vertical": 1,"!": 1,"then": 3,"split": 3,"in": 2,"but": 1,"command": 1,"session."": 1,""$tmux"": 1,"'$job_script'": 2,"description:": 1,"run_in_tmux_split.sh": 1,"select-pane": 1,""launching": 1,"must": 1,"found."": 1,"echo": 4,"];": 3,"job_script="$1"": 1,"usage:": 1,"#": 14,":.+1": 1,"not": 1,"1": 3,"./scripts/session/run_in_tmux_split.sh": 1,"experience)": 1,"window..."": 1,"are": 1,""$job_script"": 3,"-z": 2,"job": 4,"#!/usr/bin/env": 1,"original": 1,"c-m": 1,"pane": 3,"session": 1,"we": 1,"fi": 3,"if": 4,"<job_script_path>": 1      }
,
      "2-gram": {
"-t :.+1": 1,"the job": 1,"[ !": 1,"exit 1": 3,"the original": 1,"tmux send-keys": 1,""$tmux" ];": 1,"found." exit": 1,"not found."": 1,"[ -z": 2,"# description:": 1,"# usage:": 1,"for user": 1,"but good": 1,"c-m #": 1,""launching job": 1,"check if": 1,"echo "usage:": 1,"1 fi": 3,"-z "$job_script"": 1,"============================================================================== job_script="$1"": 1,"window. #": 1,"new `tmux`": 1,"in a": 2,"description: this": 1,"usage: ./scripts/session/run_in_tmux_split.sh": 1,"run_in_tmux_split.sh #": 1,"good for": 1,"created pane": 1,"fi echo": 1,"-z "$tmux"": 1,"we are": 1,"job_script="$1" if": 1,"script in": 1,"tmux select-pane": 1,"user experience)": 1,"newly created": 1,"script command": 1,"window..." #": 1,"run inside": 1,"be run": 1,"session if": 1,"script '$job_script'": 2,""error: job": 1,"given job": 1,"launches a": 1,"this script": 2,"./scripts/session/run_in_tmux_split.sh <job_script_path>": 1,"original pane": 1,"tmux split-window": 1,"echo "error:": 2,"a new": 3,"a given": 1,"bash #": 1,"select-pane -t": 1,"# select": 1,""$job_script" c-m": 1,"send-keys "$job_script"": 1,"to the": 1,"tmux session."": 1,"must be": 1,"a tmux": 2,"if we": 1,"! -f": 1,""usage: $0": 1,"experience) tmux": 1,"pane (optional,": 1,"command to": 1,"'$job_script' in": 1,"echo "launching": 1,"fi if": 1,"then echo": 3,"job script": 4,"# #": 4,"the newly": 1,"create a": 1,"tmux split": 1,"script must": 1,"tmux session": 1,"are inside": 1,"<job_script_path>" exit": 1,"if [": 3,"# file:": 1,"#!/usr/bin/env bash": 1,"(optional, but": 1,"split-window -v": 1,"pane tmux": 2,"split window..."": 1,"new tmux": 1,"session." exit": 1,"# check": 1,"fi #": 1,"'$job_script' not": 1,"$0 <job_script_path>"": 1,""$job_script" ];": 2,"`tmux` split": 1,"file: run_in_tmux_split.sh": 1,"============================================================================== #": 1,"select the": 1,"send the": 1,"new vertical": 1,"# create": 1,"inside a": 2,"-f "$job_script"": 1,"# window.": 1,"script launches": 1,"# ==============================================================================": 2,"# send": 1,"-v #": 1,"split pane": 1,"vertical split": 1,""error: this": 1,"]; then": 3,"split #": 1,"<job_script_path> #": 1      }
,
      "3-gram": {
"(optional, but good": 1,"pane (optional, but": 1,""$job_script" c-m #": 1,"created pane tmux": 1,"newly created pane": 1,"fi echo "launching": 1,"-z "$tmux" ];": 1,"1 fi #": 1,"script '$job_script' not": 1,"# usage: ./scripts/session/run_in_tmux_split.sh": 1,"# # usage:": 1,"# select the": 1,"a new tmux": 1,"# check if": 1,"fi # check": 1,"$0 <job_script_path>" exit": 1,"job_script="$1" if [": 1,"a new `tmux`": 1,"script launches a": 1,"# description: this": 1,"#!/usr/bin/env bash #": 1,"-v # send": 1,"tmux split-window -v": 1,"be run inside": 1,"not found." exit": 1,"in a new": 2,"============================================================================== # #": 1,"for user experience)": 1,"tmux send-keys "$job_script"": 1,"to the newly": 1,"create a new": 1,""error: job script": 1,"[ ! -f": 1,"# window. #": 1,"# file: run_in_tmux_split.sh": 1,"but good for": 1,"job script command": 1,"# create a": 1,"fi if [": 1,"if [ -z": 2,"============================================================================== job_script="$1" if": 1,"# ============================================================================== job_script="$1"": 1,"window. # #": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> #": 1,"bash # ==============================================================================": 1,"c-m # select": 1,"command to the": 1,"split window..." #": 1,"tmux split window..."": 1,"1 fi echo": 1,"if we are": 1,"1 fi if": 1,"exit 1 fi": 3,"]; then echo": 3,"# ============================================================================== #": 1,"select-pane -t :.+1": 1,"send-keys "$job_script" c-m": 1,"vertical split pane": 1,"new tmux split": 1,"[ -z "$tmux"": 1,"tmux session if": 1,"then echo "usage:": 1,""$job_script" ]; then": 2,"# # ==============================================================================": 1,"given job script": 1,"a given job": 1,"# # description:": 1,"file: run_in_tmux_split.sh #": 1,"# # file:": 1,"the newly created": 1,"split-window -v #": 1,"split pane tmux": 1,"window..." # create": 1,"echo "launching job": 1,"we are inside": 1,"found." exit 1": 1,"echo "error: job": 1,"! -f "$job_script"": 1,""usage: $0 <job_script_path>"": 1,"script in a": 1,"description: this script": 1,"<job_script_path> # #": 1,"tmux select-pane -t": 1,"the original pane": 1,"select the original": 1,"pane tmux send-keys": 1,"script command to": 1,"send the job": 1,"session." exit 1": 1,"script must be": 1,"echo "error: this": 1,""$tmux" ]; then": 1,"a tmux session": 1,"are inside a": 1,"split # window.": 1,"new `tmux` split": 1,"job script in": 1,"run_in_tmux_split.sh # #": 1,"good for user": 1,""launching job script": 1,"a tmux session."": 1,"check if we": 1,"-z "$job_script" ];": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path>": 1,"original pane (optional,": 1,"# send the": 1,"pane tmux split-window": 1,"a new vertical": 1,"job script '$job_script'": 2,"then echo "error:": 2,"if [ !": 1,"echo "usage: $0": 1,"experience) tmux select-pane": 1,"new vertical split": 1,"tmux session." exit": 1,"must be run": 1,"this script must": 1,""error: this script": 1,"session if [": 1,"<job_script_path>" exit 1": 1,"[ -z "$job_script"": 1,"`tmux` split #": 1,"launches a given": 1,"this script launches": 1,"user experience) tmux": 1,"the job script": 1,"'$job_script' in a": 1,"script '$job_script' in": 1,"run inside a": 1,"inside a tmux": 2,"'$job_script' not found."": 1,"-f "$job_script" ];": 1      }
,
      "5-gram": {
"send-keys "$job_script" c-m # select": 1,"send the job script command": 1,"# send the job script": 1,"split-window -v # send the": 1,"'$job_script' in a new tmux": 1,"tmux session." exit 1 fi": 1,"tmux session if [ -z": 1,"1 fi # check if": 1,"exit 1 fi if [": 1,"a given job script in": 1,"this script launches a given": 1,"# # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path>": 1,"# # file: run_in_tmux_split.sh #": 1,"# ============================================================================== # # file:": 1,"good for user experience) tmux": 1,"the original pane (optional, but": 1,"-v # send the job": 1,"split window..." # create a": 1,""launching job script '$job_script' in": 1,"fi echo "launching job script": 1,"are inside a tmux session": 1,"'$job_script' not found." exit 1": 1,"job script '$job_script' not found."": 1,"1 fi if [ !": 1,"$0 <job_script_path>" exit 1 fi": 1,""usage: $0 <job_script_path>" exit 1": 1,"-z "$job_script" ]; then echo": 1,"launches a given job script": 1,"experience) tmux select-pane -t :.+1": 1,"select the original pane (optional,": 1,"vertical split pane tmux split-window": 1,"a new vertical split pane": 1,"this script must be run": 1,"then echo "error: this script": 1,"if [ -z "$tmux" ];": 1,"a tmux session if [": 1,"! -f "$job_script" ]; then": 1,"[ ! -f "$job_script" ];": 1,"<job_script_path>" exit 1 fi if": 1,"============================================================================== job_script="$1" if [ -z": 1,"(optional, but good for user": 1,"c-m # select the original": 1,"newly created pane tmux send-keys": 1,"in a new tmux split": 1,"job script '$job_script' in a": 1,"echo "launching job script '$job_script'": 1,"session." exit 1 fi echo": 1,"echo "error: this script must": 1,"not found." exit 1 fi": 1,""$job_script" ]; then echo "error:": 1,""$job_script" ]; then echo "usage:": 1,"[ -z "$job_script" ]; then": 1,"# window. # # ==============================================================================": 1,"given job script in a": 1,"pane (optional, but good for": 1,"to the newly created pane": 1,"a new tmux split window..."": 1,"run inside a tmux session."": 1,"[ -z "$tmux" ]; then": 1,"inside a tmux session if": 1,"exit 1 fi # check": 1,"fi if [ ! -f": 1,"then echo "usage: $0 <job_script_path>"": 1,"if [ -z "$job_script" ];": 1,"# ============================================================================== job_script="$1" if [": 1,"script launches a given job": 1,"# usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> #": 1,"user experience) tmux select-pane -t": 1,"for user experience) tmux select-pane": 1,"script must be run inside": 1,"fi # check if we": 1,"-f "$job_script" ]; then echo": 1,"`tmux` split # window. #": 1,"echo "error: job script '$job_script'": 1,"]; then echo "error: job": 1,"if [ ! -f "$job_script"": 1,"split # window. # #": 1,"# file: run_in_tmux_split.sh # #": 1,"bash # ============================================================================== # #": 1,"original pane (optional, but good": 1,"pane tmux send-keys "$job_script" c-m": 1,"a tmux session." exit 1": 1,"must be run inside a": 1,""$job_script" c-m # select the": 1,"created pane tmux send-keys "$job_script"": 1,"the job script command to": 1,"tmux split-window -v # send": 1,"split pane tmux split-window -v": 1,"# create a new vertical": 1,"window..." # create a new": 1,"script '$job_script' in a new": 1,"inside a tmux session." exit": 1,"-z "$tmux" ]; then echo": 1,"session if [ -z "$tmux"": 1,"# check if we are": 1,"script '$job_script' not found." exit": 1,"then echo "error: job script": 1,"job_script="$1" if [ -z "$job_script"": 1,"# # ============================================================================== job_script="$1" if": 1,"window. # # ============================================================================== job_script="$1"": 1,"but good for user experience)": 1,"the newly created pane tmux": 1,"pane tmux split-window -v #": 1,"create a new vertical split": 1,"1 fi echo "launching job": 1,"]; then echo "error: this": 1,"echo "usage: $0 <job_script_path>" exit": 1,"]; then echo "usage: $0": 1,"job script in a new": 1,"# description: this script launches": 1,"<job_script_path> # # description: this": 1,"file: run_in_tmux_split.sh # # usage:": 1,"============================================================================== # # file: run_in_tmux_split.sh": 1,"# select the original pane": 1,"script command to the newly": 1,"exit 1 fi echo "launching": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # #": 1,"run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh": 1,"tmux send-keys "$job_script" c-m #": 1,"tmux split window..." # create": 1,"new tmux split window..." #": 1,"be run inside a tmux": 1,""error: this script must be": 1,""$tmux" ]; then echo "error:": 1,"if we are inside a": 1,""error: job script '$job_script' not": 1,"a new `tmux` split #": 1,"script in a new `tmux`": 1,"# # description: this script": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> # # description:": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"command to the newly created": 1,"job script command to the": 1,"new vertical split pane tmux": 1,"we are inside a tmux": 1,"check if we are inside": 1,"found." exit 1 fi #": 1,"new `tmux` split # window.": 1,"in a new `tmux` split": 1,"description: this script launches a": 1      }
,
      "7-gram": {
"for user experience) tmux select-pane -t :.+1": 1,"run inside a tmux session." exit 1": 1,"if we are inside a tmux session": 1,"check if we are inside a tmux": 1,"1 fi # check if we are": 1,"! -f "$job_script" ]; then echo "error:": 1,"if [ -z "$job_script" ]; then echo": 1,"new `tmux` split # window. # #": 1,"script in a new `tmux` split #": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script": 1,"run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> #": 1,"# ============================================================================== # # file: run_in_tmux_split.sh #": 1,"a tmux session." exit 1 fi echo": 1,"must be run inside a tmux session."": 1,"then echo "error: this script must be": 1,"are inside a tmux session if [": 1,"job script '$job_script' not found." exit 1": 1,"<job_script_path>" exit 1 fi if [ !": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this": 1,"# usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description:": 1,"a new tmux split window..." # create": 1,"'$job_script' in a new tmux split window..."": 1,"echo "error: job script '$job_script' not found."": 1,"then echo "usage: $0 <job_script_path>" exit 1": 1,"# ============================================================================== job_script="$1" if [ -z "$job_script"": 1,"job script in a new `tmux` split": 1,"a given job script in a new": 1,"the original pane (optional, but good for": 1,"created pane tmux send-keys "$job_script" c-m #": 1,"to the newly created pane tmux send-keys": 1,"job script command to the newly created": 1,"vertical split pane tmux split-window -v #": 1,""launching job script '$job_script' in a new": 1,"1 fi echo "launching job script '$job_script'": 1,"be run inside a tmux session." exit": 1,"script '$job_script' not found." exit 1 fi": 1,"-f "$job_script" ]; then echo "error: job": 1,"job_script="$1" if [ -z "$job_script" ]; then": 1,"bash # ============================================================================== # # file: run_in_tmux_split.sh": 1,"split window..." # create a new vertical": 1,"new tmux split window..." # create a": 1,"fi echo "launching job script '$job_script' in": 1,"exit 1 fi echo "launching job script": 1,"]; then echo "error: this script must": 1,"exit 1 fi # check if we": 1,"exit 1 fi if [ ! -f": 1,"-z "$job_script" ]; then echo "usage: $0": 1,"script launches a given job script in": 1,"# # description: this script launches a": 1,"the job script command to the newly": 1,"inside a tmux session." exit 1 fi": 1,"not found." exit 1 fi # check": 1,"'$job_script' not found." exit 1 fi #": 1,"launches a given job script in a": 1,"# # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # #": 1,"# file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh": 1,"# # file: run_in_tmux_split.sh # # usage:": 1,"but good for user experience) tmux select-pane": 1,""$job_script" c-m # select the original pane": 1,"newly created pane tmux send-keys "$job_script" c-m": 1,"pane tmux split-window -v # send the": 1,"# create a new vertical split pane": 1,"window..." # create a new vertical split": 1,"in a new tmux split window..." #": 1,""error: this script must be run inside": 1,"[ -z "$tmux" ]; then echo "error:": 1,"tmux session if [ -z "$tmux" ];": 1,"1 fi if [ ! -f "$job_script"": 1,"echo "usage: $0 <job_script_path>" exit 1 fi": 1,""$job_script" ]; then echo "usage: $0 <job_script_path>"": 1,"`tmux` split # window. # # ==============================================================================": 1,"(optional, but good for user experience) tmux": 1,"the newly created pane tmux send-keys "$job_script"": 1,"session." exit 1 fi echo "launching job": 1,"# check if we are inside a": 1,""usage: $0 <job_script_path>" exit 1 fi if": 1,"# window. # # ============================================================================== job_script="$1" if": 1,"description: this script launches a given job": 1,"# description: this script launches a given": 1,"file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path>": 1,"tmux send-keys "$job_script" c-m # select the": 1,"a new vertical split pane tmux split-window": 1,"echo "error: this script must be run": 1,"if [ -z "$tmux" ]; then echo": 1,""$job_script" ]; then echo "error: job script": 1,"fi if [ ! -f "$job_script" ];": 1,"# send the job script command to": 1,"split pane tmux split-window -v # send": 1,"new vertical split pane tmux split-window -v": 1,"job script '$job_script' in a new tmux": 1,"-z "$tmux" ]; then echo "error: this": 1,"a tmux session if [ -z "$tmux"": 1,"inside a tmux session if [ -z": 1,"found." exit 1 fi # check if": 1,"[ ! -f "$job_script" ]; then echo": 1,"window. # # ============================================================================== job_script="$1" if [": 1,"given job script in a new `tmux`": 1,"this script launches a given job script": 1,"============================================================================== # # file: run_in_tmux_split.sh # #": 1,"select the original pane (optional, but good": 1,"send-keys "$job_script" c-m # select the original": 1,"send the job script command to the": 1,"tmux split-window -v # send the job": 1,"script '$job_script' in a new tmux split": 1,"echo "launching job script '$job_script' in a": 1,""error: job script '$job_script' not found." exit": 1,"]; then echo "error: job script '$job_script'": 1,"# # ============================================================================== job_script="$1" if [ -z": 1,"a new `tmux` split # window. #": 1,"<job_script_path> # # description: this script launches": 1,"pane (optional, but good for user experience)": 1,"original pane (optional, but good for user": 1,"pane tmux send-keys "$job_script" c-m # select": 1,"command to the newly created pane tmux": 1,"tmux session." exit 1 fi echo "launching": 1,"script must be run inside a tmux": 1,""$tmux" ]; then echo "error: this script": 1,"we are inside a tmux session if": 1,"$0 <job_script_path>" exit 1 fi if [": 1,"]; then echo "usage: $0 <job_script_path>" exit": 1,"[ -z "$job_script" ]; then echo "usage:": 1,"split # window. # # ============================================================================== job_script="$1"": 1,"good for user experience) tmux select-pane -t": 1,"# select the original pane (optional, but": 1,"c-m # select the original pane (optional,": 1,"script command to the newly created pane": 1,"-v # send the job script command": 1,"split-window -v # send the job script": 1,"create a new vertical split pane tmux": 1,"tmux split window..." # create a new": 1,"this script must be run inside a": 1,"session if [ -z "$tmux" ]; then": 1,"fi # check if we are inside": 1,"then echo "error: job script '$job_script' not": 1,"if [ ! -f "$job_script" ]; then": 1,"============================================================================== job_script="$1" if [ -z "$job_script" ];": 1,"in a new `tmux` split # window.": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1      }
,
      "11-gram": {
"tmux send-keys "$job_script" c-m # select the original pane (optional, but": 1,"the newly created pane tmux send-keys "$job_script" c-m # select the": 1,"script command to the newly created pane tmux send-keys "$job_script" c-m": 1,"window..." # create a new vertical split pane tmux split-window -v": 1,"check if we are inside a tmux session if [ -z": 1,"# check if we are inside a tmux session if [": 1,"1 fi # check if we are inside a tmux session": 1,"echo "error: job script '$job_script' not found." exit 1 fi #": 1,"then echo "error: job script '$job_script' not found." exit 1 fi": 1,"$0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ];": 1,"echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f": 1,"then echo "usage: $0 <job_script_path>" exit 1 fi if [ !": 1,"in a new tmux split window..." # create a new vertical": 1,"this script must be run inside a tmux session." exit 1": 1,"then echo "error: this script must be run inside a tmux": 1,"[ -z "$tmux" ]; then echo "error: this script must be": 1,"not found." exit 1 fi # check if we are inside": 1,"this script launches a given job script in a new `tmux`": 1,"# usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a": 1,"# # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches": 1,"c-m # select the original pane (optional, but good for user": 1,""$job_script" c-m # select the original pane (optional, but good for": 1,"newly created pane tmux send-keys "$job_script" c-m # select the original": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"! -f "$job_script" ]; then echo "error: job script '$job_script' not": 1,"]; then echo "usage: $0 <job_script_path>" exit 1 fi if [": 1,"[ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1": 1,"select the original pane (optional, but good for user experience) tmux": 1,"job script command to the newly created pane tmux send-keys "$job_script"": 1,"# send the job script command to the newly created pane": 1,"'$job_script' in a new tmux split window..." # create a new": 1,"tmux session." exit 1 fi echo "launching job script '$job_script' in": 1,"inside a tmux session." exit 1 fi echo "launching job script": 1,"are inside a tmux session if [ -z "$tmux" ]; then": 1,"fi # check if we are inside a tmux session if": 1,"# # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo": 1,"# window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ];": 1,"file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this": 1,"send-keys "$job_script" c-m # select the original pane (optional, but good": 1,"pane tmux split-window -v # send the job script command to": 1,"# create a new vertical split pane tmux split-window -v #": 1,"1 fi echo "launching job script '$job_script' in a new tmux": 1,"a tmux session." exit 1 fi echo "launching job script '$job_script'": 1,""error: this script must be run inside a tmux session." exit": 1,""$tmux" ]; then echo "error: this script must be run inside": 1,"-z "$tmux" ]; then echo "error: this script must be run": 1,"1 fi if [ ! -f "$job_script" ]; then echo "error:": 1,"# ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage:": 1,"window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then": 1,"in a new `tmux` split # window. # # ============================================================================== job_script="$1"": 1,"script launches a given job script in a new `tmux` split": 1,"# file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description:": 1,"original pane (optional, but good for user experience) tmux select-pane -t": 1,"send the job script command to the newly created pane tmux": 1,"a new tmux split window..." # create a new vertical split": 1,"script '$job_script' in a new tmux split window..." # create a": 1,"if [ -z "$tmux" ]; then echo "error: this script must": 1,""usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script"": 1,""$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if": 1,"if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit": 1,"tmux split-window -v # send the job script command to the": 1,"vertical split pane tmux split-window -v # send the job script": 1,"new vertical split pane tmux split-window -v # send the job": 1,"a new vertical split pane tmux split-window -v # send the": 1,"]; then echo "error: this script must be run inside a": 1,"we are inside a tmux session if [ -z "$tmux" ];": 1,"description: this script launches a given job script in a new": 1,"the job script command to the newly created pane tmux send-keys": 1,"new tmux split window..." # create a new vertical split pane": 1,""launching job script '$job_script' in a new tmux split window..." #": 1,"exit 1 fi echo "launching job script '$job_script' in a new": 1,"be run inside a tmux session." exit 1 fi echo "launching": 1,"session if [ -z "$tmux" ]; then echo "error: this script": 1,"a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"exit 1 fi # check if we are inside a tmux": 1,"[ ! -f "$job_script" ]; then echo "error: job script '$job_script'": 1,"fi if [ ! -f "$job_script" ]; then echo "error: job": 1,"job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>"": 1,"a new `tmux` split # window. # # ============================================================================== job_script="$1" if": 1,"script in a new `tmux` split # window. # # ==============================================================================": 1,"<job_script_path> # # description: this script launches a given job script": 1,"# # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # #": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage:": 1,"pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"created pane tmux send-keys "$job_script" c-m # select the original pane": 1,"create a new vertical split pane tmux split-window -v # send": 1,"run inside a tmux session." exit 1 fi echo "launching job": 1,"inside a tmux session if [ -z "$tmux" ]; then echo": 1,"job script '$job_script' not found." exit 1 fi # check if": 1,""$job_script" ]; then echo "error: job script '$job_script' not found." exit": 1,"exit 1 fi if [ ! -f "$job_script" ]; then echo": 1,"job script in a new `tmux` split # window. # #": 1,"run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script": 1,"the original pane (optional, but good for user experience) tmux select-pane": 1,"to the newly created pane tmux send-keys "$job_script" c-m # select": 1,"-v # send the job script command to the newly created": 1,"split-window -v # send the job script command to the newly": 1,"split pane tmux split-window -v # send the job script command": 1,"tmux split window..." # create a new vertical split pane tmux": 1,"script must be run inside a tmux session." exit 1 fi": 1,"echo "error: this script must be run inside a tmux session."": 1,"split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script"": 1,"a given job script in a new `tmux` split # window.": 1,"split window..." # create a new vertical split pane tmux split-window": 1,"job script '$job_script' in a new tmux split window..." # create": 1,"found." exit 1 fi # check if we are inside a": 1,"-f "$job_script" ]; then echo "error: job script '$job_script' not found."": 1,"============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0": 1,"# # description: this script launches a given job script in": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given": 1,"============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> #": 1,"# ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path>": 1,"pane tmux send-keys "$job_script" c-m # select the original pane (optional,": 1,"session." exit 1 fi echo "launching job script '$job_script' in a": 1,"if we are inside a tmux session if [ -z "$tmux"": 1,"script '$job_script' not found." exit 1 fi # check if we": 1,""error: job script '$job_script' not found." exit 1 fi # check": 1,"]; then echo "error: job script '$job_script' not found." exit 1": 1,"-z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi": 1,"`tmux` split # window. # # ============================================================================== job_script="$1" if [ -z": 1,"new `tmux` split # window. # # ============================================================================== job_script="$1" if [": 1,"bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh": 1,"# select the original pane (optional, but good for user experience)": 1,"command to the newly created pane tmux send-keys "$job_script" c-m #": 1,"echo "launching job script '$job_script' in a new tmux split window..."": 1,"fi echo "launching job script '$job_script' in a new tmux split": 1,"must be run inside a tmux session." exit 1 fi echo": 1,"'$job_script' not found." exit 1 fi # check if we are": 1,"if [ ! -f "$job_script" ]; then echo "error: job script": 1,"<job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then": 1,"given job script in a new `tmux` split # window. #": 1,"launches a given job script in a new `tmux` split #": 1,"# description: this script launches a given job script in a": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job": 1      }
,
      "13-gram": {
"c-m # select the original pane (optional, but good for user experience) tmux": 1,"echo "launching job script '$job_script' in a new tmux split window..." # create": 1,"1 fi echo "launching job script '$job_script' in a new tmux split window..."": 1,""$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ !": 1,"[ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if": 1,"if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi": 1,"job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1": 1,"============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit": 1,"this script launches a given job script in a new `tmux` split #": 1,"# # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given": 1,"split-window -v # send the job script command to the newly created pane": 1,"new vertical split pane tmux split-window -v # send the job script command": 1,"# create a new vertical split pane tmux split-window -v # send the": 1,"a tmux session if [ -z "$tmux" ]; then echo "error: this script": 1,"check if we are inside a tmux session if [ -z "$tmux" ];": 1,"not found." exit 1 fi # check if we are inside a tmux": 1,"if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not": 1,""usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then": 1,"window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage:": 1,"`tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ];": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in": 1,"# usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job": 1,"the original pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"the job script command to the newly created pane tmux send-keys "$job_script" c-m": 1,"# send the job script command to the newly created pane tmux send-keys": 1,"in a new tmux split window..." # create a new vertical split pane": 1,"'$job_script' in a new tmux split window..." # create a new vertical split": 1,"are inside a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"echo "error: job script '$job_script' not found." exit 1 fi # check if": 1,"pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good": 1,"to the newly created pane tmux send-keys "$job_script" c-m # select the original": 1,"vertical split pane tmux split-window -v # send the job script command to": 1,"inside a tmux session." exit 1 fi echo "launching job script '$job_script' in": 1,"this script must be run inside a tmux session." exit 1 fi echo": 1,"script '$job_script' not found." exit 1 fi # check if we are inside": 1,"then echo "error: job script '$job_script' not found." exit 1 fi # check": 1,"<job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error:": 1,"then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script"": 1,"in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [": 1,"launches a given job script in a new `tmux` split # window. #": 1,"# ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # #": 1,"tmux split-window -v # send the job script command to the newly created": 1,"new tmux split window..." # create a new vertical split pane tmux split-window": 1,"job script '$job_script' in a new tmux split window..." # create a new": 1,"1 fi # check if we are inside a tmux session if [": 1,"]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path>": 1,"job script command to the newly created pane tmux send-keys "$job_script" c-m #": 1,"tmux split window..." # create a new vertical split pane tmux split-window -v": 1,"if [ -z "$tmux" ]; then echo "error: this script must be run": 1,"session if [ -z "$tmux" ]; then echo "error: this script must be": 1,""error: job script '$job_script' not found." exit 1 fi # check if we": 1,"$0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo": 1,"# select the original pane (optional, but good for user experience) tmux select-pane": 1,"the newly created pane tmux send-keys "$job_script" c-m # select the original pane": 1,"script command to the newly created pane tmux send-keys "$job_script" c-m # select": 1,"window..." # create a new vertical split pane tmux split-window -v # send": 1,"exit 1 fi echo "launching job script '$job_script' in a new tmux split": 1,"a tmux session." exit 1 fi echo "launching job script '$job_script' in a": 1,"echo "error: this script must be run inside a tmux session." exit 1": 1,"]; then echo "error: job script '$job_script' not found." exit 1 fi #": 1,"fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script'": 1,"exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job": 1,"-z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [": 1,"# ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>"": 1,"given job script in a new `tmux` split # window. # # ==============================================================================": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script": 1,"run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a": 1,"bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> #": 1,"newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional,": 1,"send the job script command to the newly created pane tmux send-keys "$job_script"": 1,"split window..." # create a new vertical split pane tmux split-window -v #": 1,"script '$job_script' in a new tmux split window..." # create a new vertical": 1,"then echo "error: this script must be run inside a tmux session." exit": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this script must": 1,"fi # check if we are inside a tmux session if [ -z": 1,"[ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found."": 1,"split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then": 1,"script launches a given job script in a new `tmux` split # window.": 1,"# # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this": 1,"select the original pane (optional, but good for user experience) tmux select-pane -t": 1,"split pane tmux split-window -v # send the job script command to the": 1,"fi echo "launching job script '$job_script' in a new tmux split window..." #": 1,"inside a tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"we are inside a tmux session if [ -z "$tmux" ]; then echo": 1,"# check if we are inside a tmux session if [ -z "$tmux"": 1,"# file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script": 1,""$job_script" c-m # select the original pane (optional, but good for user experience)": 1,"a new vertical split pane tmux split-window -v # send the job script": 1,"create a new vertical split pane tmux split-window -v # send the job": 1,"session." exit 1 fi echo "launching job script '$job_script' in a new tmux": 1,"if we are inside a tmux session if [ -z "$tmux" ]; then": 1,"'$job_script' not found." exit 1 fi # check if we are inside a": 1,"-f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1": 1,"1 fi if [ ! -f "$job_script" ]; then echo "error: job script": 1,"job script in a new `tmux` split # window. # # ============================================================================== job_script="$1"": 1,"description: this script launches a given job script in a new `tmux` split": 1,"# description: this script launches a given job script in a new `tmux`": 1,"<job_script_path> # # description: this script launches a given job script in a": 1,"file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches": 1,"tmux send-keys "$job_script" c-m # select the original pane (optional, but good for": 1,"command to the newly created pane tmux send-keys "$job_script" c-m # select the": 1,"run inside a tmux session." exit 1 fi echo "launching job script '$job_script'": 1,"-z "$tmux" ]; then echo "error: this script must be run inside a": 1,"! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit": 1,"echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ];": 1,"# # description: this script launches a given job script in a new": 1,"============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description:": 1,"created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but": 1,"script must be run inside a tmux session." exit 1 fi echo "launching": 1,""$tmux" ]; then echo "error: this script must be run inside a tmux": 1,"[ -z "$tmux" ]; then echo "error: this script must be run inside": 1,"# # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0": 1,"# window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo": 1,"new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script"": 1,"script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if": 1,"send-keys "$job_script" c-m # select the original pane (optional, but good for user": 1,"-v # send the job script command to the newly created pane tmux": 1,"pane tmux split-window -v # send the job script command to the newly": 1,"a new tmux split window..." # create a new vertical split pane tmux": 1,""launching job script '$job_script' in a new tmux split window..." # create a": 1,"tmux session." exit 1 fi echo "launching job script '$job_script' in a new": 1,"be run inside a tmux session." exit 1 fi echo "launching job script": 1,"must be run inside a tmux session." exit 1 fi echo "launching job": 1,""error: this script must be run inside a tmux session." exit 1 fi": 1,"]; then echo "error: this script must be run inside a tmux session."": 1,"exit 1 fi # check if we are inside a tmux session if": 1,"found." exit 1 fi # check if we are inside a tmux session": 1,"job script '$job_script' not found." exit 1 fi # check if we are": 1,""$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi": 1,"a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z": 1,"a given job script in a new `tmux` split # window. # #": 1      }
,
      "19-gram": {
"the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience)": 1,"split window..." # create a new vertical split pane tmux split-window -v # send the job script command to": 1,"session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new": 1,""usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not": 1,"# window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi": 1,"`tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit": 1,"in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage:": 1,"tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good": 1,"new vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux": 1,"script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v #": 1,"inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." #": 1,"run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..."": 1,"script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new": 1,"inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a": 1,"# check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script": 1,"'$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux"": 1,"job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [": 1,"$0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found."": 1,"[ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then": 1,"if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ];": 1,"# ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ !": 1,"a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0": 1,"job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then": 1,"script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [": 1,"============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job": 1,"split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select": 1,"a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create": 1,"echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script'": 1,"then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script": 1,"[ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi": 1,"are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside": 1,"exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo": 1,"]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a": 1,"! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we": 1,"-z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo": 1,"============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f": 1,"given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ];": 1,"pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t": 1,"newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux": 1,"split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script"": 1,"create a new vertical split pane tmux split-window -v # send the job script command to the newly created": 1,"new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session."": 1,""$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside": 1,"exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1": 1,"# # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [": 1,"split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split # window.": 1,"# file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in": 1,"send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane": 1,"pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m": 1,"window..." # create a new vertical split pane tmux split-window -v # send the job script command to the": 1,"'$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send": 1,"must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux": 1,"then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux": 1,"tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a": 1,"if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be": 1,"check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must": 1,"script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo": 1,"a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script"": 1,"<job_script_path> # # description: this script launches a given job script in a new `tmux` split # window. #": 1,"job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but": 1,"-v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the": 1,""error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if": 1,"-f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are": 1,"fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi #": 1,""$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error:": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split #": 1,"command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for": 1,"fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane": 1,"1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split": 1,"-z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo": 1,"found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then": 1,"[ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if": 1,"if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check": 1,"echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script'": 1,"then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script": 1,"new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>"": 1,"# # description: this script launches a given job script in a new `tmux` split # window. # #": 1,"a new vertical split pane tmux split-window -v # send the job script command to the newly created pane": 1,"a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job": 1,"job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v": 1,"we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run": 1,"# # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script": 1,"# ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches": 1,"to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user": 1,"# send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original": 1,"vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys": 1,""launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window": 1,"echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux": 1,""$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching": 1,"if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1": 1,"fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this": 1,"<job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit": 1,"window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if": 1,"# description: this script launches a given job script in a new `tmux` split # window. # # ==============================================================================": 1,"# # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux`": 1,"run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new": 1,"file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a": 1,"created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux select-pane": 1,"tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m #": 1,"# create a new vertical split pane tmux split-window -v # send the job script command to the newly": 1,"in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the": 1,"exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical": 1,"not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ];": 1,"echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session": 1,"1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi": 1,"]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job": 1,"description: this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1"": 1,"bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a": 1,"the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional,": 1,"be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split": 1,"this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a": 1,""error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in": 1,"session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit": 1,"a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux": 1,"1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z": 1,"launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z": 1,"this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if": 1,"tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script command": 1,"]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job": 1,"job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script"": 1,"# usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split": 1      }
,
      "23-gram": {
"a new vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m": 1,"script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script": 1,"session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching": 1,"# window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f": 1,"new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if": 1,"job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>"": 1,"# # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux`": 1,"the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user": 1,"send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for": 1,"# create a new vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys": 1,"run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new": 1,"must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create": 1,"script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." #": 1,"then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new": 1,"-z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script'": 1,"tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo": 1,"1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be": 1,"<job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check": 1,"bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in": 1,"command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux select-pane": 1,"vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select": 1,"'$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script command": 1,"fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v #": 1,"exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window": 1,"we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session."": 1,"a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage:": 1,"<job_script_path> # # description: this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if": 1,"usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split # window. # # ==============================================================================": 1,"file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split #": 1,"-v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but": 1,"window..." # create a new vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux": 1,"a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script command to the": 1,"be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a": 1,""error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split": 1,"script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo": 1,"job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then": 1,"-f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session": 1,"$0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi #": 1,"-z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script'": 1,"# # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ];": 1,"`tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [": 1,"# description: this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z": 1,"job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience)": 1,"# send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good": 1,"new vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m #": 1,"if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job": 1,"a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi": 1,"if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux": 1,"not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this": 1,""error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ];": 1,""usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi": 1,"window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script"": 1,"in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1": 1,"the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t :.+1": 1,"tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane": 1,"split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the": 1,"1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v": 1,"echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux": 1,"[ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script": 1,"1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we": 1,"then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit": 1,"]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found."": 1,""$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not": 1,"script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then": 1,"script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux": 1,"pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original": 1,"tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script command to the newly created": 1,""launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the": 1,"echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send": 1,"[ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a": 1,"# ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a": 1,"a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split": 1,""$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in": 1,"# check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside": 1,"exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must": 1,"then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z": 1,"echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1": 1,"if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job": 1,"job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error:": 1,"split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ !": 1,"this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ];": 1,"run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split # window.": 1,"============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new": 1,"new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script command to the newly": 1,"in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job script command to": 1,"tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane": 1,"'$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error:": 1,"]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [": 1,"============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo": 1,"script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit": 1,"given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0": 1,"./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1"": 1,"to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional, but good for user experience) tmux select-pane -t": 1,"split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script" c-m # select the original pane (optional,": 1,"split window..." # create a new vertical split pane tmux split-window -v # send the job script command to the newly created pane": 1,"this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..."": 1,"]; then echo "error: this script must be run inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a": 1,"inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit 1": 1,"fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run": 1,""$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if": 1,"! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux": 1,"if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside": 1,"[ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script": 1,"# usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split # window. # #": 1,"# # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split # window. #": 1,"# file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script in a new `tmux` split": 1,"create a new vertical split pane tmux split-window -v # send the job script command to the newly created pane tmux send-keys "$job_script"": 1,"session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux": 1,"check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a": 1,"found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script": 1,"# ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi if [ ! -f "$job_script" ]; then": 1,"launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo": 1,"description: this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script"": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_in_tmux_split.sh # # usage: ./scripts/session/run_in_tmux_split.sh <job_script_path> # # description: this script launches a given job script": 1,"job script '$job_script' in a new tmux split window..." # create a new vertical split pane tmux split-window -v # send the job": 1,"inside a tmux session." exit 1 fi echo "launching job script '$job_script' in a new tmux split window..." # create a new vertical": 1,"exit 1 fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if": 1,"# # description: this script launches a given job script in a new `tmux` split # window. # # ============================================================================== job_script="$1" if [": 1,"are inside a tmux session if [ -z "$tmux" ]; then echo "error: this script must be run inside a tmux session." exit": 1,"echo "error: job script '$job_script' not found." exit 1 fi # check if we are inside a tmux session if [ -z "$tmux"": 1,"fi if [ ! -f "$job_script" ]; then echo "error: job script '$job_script' not found." exit 1 fi # check if we are": 1,"a new `tmux` split # window. # # ============================================================================== job_script="$1" if [ -z "$job_script" ]; then echo "usage: $0 <job_script_path>" exit 1 fi": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/session/start_development_session.sh~": {
      "1-gram": {
"+"%y%m%d_%h%m%s")": 1,"unique": 1,"log": 1,"[": 2,""${log_dir}"": 1,"session_name": 1,"script": 2,"wait": 1,"\"$session_name\"": 1,""$log_dir"": 1,"directory": 2,"'$task_file'": 1,""usage:": 1,"-p": 2,"with": 1,"(i.e.,": 1,"\"$asciinema_rec_file\"": 1,"asciinema": 4,"exists": 1,"used": 1,"define": 1,"session_name="gemini-dev-session"": 1,"configured": 1,"launches": 1,"file:": 1,"finishes": 1,"rec": 1,"exit": 2,"here": 2,"orchestrates": 1,"this": 2,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"timestamp=$(date": 1,"-f": 1,"be": 2,"configuration": 1,"asciinema,": 1,"==============================================================================": 2,"asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,""error:": 1,""$task_file"": 2,"gemini": 2,"of": 1,"the": 8,"\"$task_file\""": 1,"<task_file>"": 1,"$0": 1,"task_file="$1"": 1,"to": 2,"cli": 2,"and": 1,"tmux": 2,"a": 2,"bash": 1,"output": 1,"in": 2,"!": 1,"project.": 1,"for": 1,"then": 3,"recording": 3,"start_development_session.sh": 1,"until": 1,"saved": 1,"start": 2,"ensure": 1,"description:": 1,"found."": 1,"echo": 2,"];": 2,"file": 3,"task": 2,"that": 1,"within": 1,"usage:": 1,"#": 19,"exits)": 1,"--command": 1,"will": 2,"not": 1,"1": 2,"./scripts/session/start_development_session.sh": 1,"background": 1,"-z": 1,"by": 1,"mkdir": 2,"#!/usr/bin/env": 1,""$asciinema_rec_file"": 1,"logs": 1,"fi": 2,"if": 2,"log_dir="${home}/logs/gemini"": 1,"session,": 1,"session": 2      }
,
      "2-gram": {
"recording asciinema": 1,"logs directory": 1,"# ensure": 1,"[ !": 1,"exit 1": 2,"define session_name": 1,"configuration session_name="gemini-dev-session"": 1,"# configuration": 1,"gemini cli": 2,"asciinema, and": 1,"script will": 1,"\"$asciinema_rec_file\" \"$session_name\"": 1,""$asciinema_rec_file" --command": 1,"# the": 2,"found." exit": 1,"not found."": 1,""$task_file" ];": 2,"[ -z": 1,"cli within": 1,"# description:": 1,"# usage:": 1,"session exits)": 1,"here until": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"timestamp=$(date +"%y%m%d_%h%m%s")": 1,"directory timestamp=$(date": 1,"be saved": 1,"# start": 2,""$log_dir" #": 1,"echo "usage:": 1,"session_name here": 1,"for this": 1,"launches the": 1,"then launches": 1,"wait here": 1,"rec "$asciinema_rec_file"": 1,"the logs": 1,"directory exists": 1,"1 fi": 2,"$0 <task_file>"": 1,"by the": 1,"used by": 1,"this project.": 1,"the recording": 1,"orchestrates the": 1,"description: this": 1,"the output": 1,""${log_dir}" #": 1,"configured for": 1,"within that": 1,"with #": 1,"script orchestrates": 1,"file: start_development_session.sh": 1,"\"$session_name\" \"$task_file\""": 1,""error: task": 1,"-z "$task_file"": 1,"of a": 1,"this script": 1,"start_development_session.sh #": 1,"the script": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"background #": 1,"in the": 2,"exists mkdir": 1,"echo "error:": 1,"# task": 1,"mkdir -p": 2,"session, configured": 1,"bash #": 1,"ensure log": 1,"! -f": 1,""usage: $0": 1,"task_file="$1" if": 1,"task file": 2,"log_dir="${home}/logs/gemini" mkdir": 1,"# define": 1,"session_name="gemini-dev-session" #": 1,"project. #": 1,"# asciinema,": 1,"session with": 1,"a tmux": 1,"recording of": 1,"until asciinema": 1,"asciinema rec": 1,"unique file": 1,"a unique": 1,"saved to": 1,"will be": 1,"log directory": 1,"'$task_file' not": 1,"fi if": 1,"then echo": 2,"-p "${log_dir}"": 1,"./scripts/session/start_development_session.sh #": 1,"# #": 4,"(i.e., the": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"recording in": 1,"-p "$log_dir"": 1,"if [": 2,"file to": 1,"tmux session": 2,"# file:": 1,"#!/usr/bin/env bash": 1,"the tmux": 1,"file in": 1,"start asciinema": 2,"fi #": 1,"cli task_file="$1"": 1,"be used": 1,"that #": 1,"and then": 1,"============================================================================== #": 2,"will wait": 1,"\"$task_file\"" #": 1,"output will": 1,"the background": 1,"# session,": 1,"the gemini": 2,"usage: ./scripts/session/start_development_session.sh": 1,"# ==============================================================================": 2,"finishes (i.e.,": 1,"asciinema finishes": 1,"to a": 1,"asciinema recording": 2,"file '$task_file'": 1,"-f "$task_file"": 1,"<task_file>" exit": 1,"]; then": 2,"to be": 1,"here log_dir="${home}/logs/gemini"": 1      }
,
      "3-gram": {
"]; then echo": 2,"description: this script": 1,"will wait here": 1,"to a unique": 1,"log_dir="${home}/logs/gemini" mkdir -p": 1,"echo "error: task": 1,"orchestrates the recording": 1,"# start asciinema": 2,"the gemini cli": 2,"within that #": 1,"-p "$log_dir" #": 1,"-f "$task_file" ];": 1,"(i.e., the tmux": 1,"log directory exists": 1,"# # usage:": 1,""error: task file": 1,"usage: ./scripts/session/start_development_session.sh #": 1,"<task_file>" exit 1": 1,"tmux session exits)": 1,""$task_file" ]; then": 2,"# task file": 1,"in the background": 1,"-p "${log_dir}" #": 1,"exit 1 fi": 2,"# file: start_development_session.sh": 1,"this project. #": 1,"start_development_session.sh # #": 1,"asciinema rec "$asciinema_rec_file"": 1,"the recording of": 1,"the logs directory": 1,"asciinema, and then": 1,"gemini cli within": 1,"rec "$asciinema_rec_file" --command": 1,"recording of a": 1,"directory exists mkdir": 1,"script orchestrates the": 1,"here log_dir="${home}/logs/gemini" mkdir": 1,"if [ !": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"# configuration session_name="gemini-dev-session"": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"! -f "$task_file"": 1,"recording in the": 1,"project. # #": 1,"launches the gemini": 1,"ensure log directory": 1,"output will be": 1,"cli within that": 1,""${log_dir}" # task": 1,"then echo "error:": 1,"and then launches": 1,"./scripts/session/start_development_session.sh # #": 1,"to be used": 1,"session with #": 1,"the script will": 1,"fi if [": 1,""usage: $0 <task_file>"": 1,""$log_dir" # start": 1,"in the logs": 1,"# asciinema, and": 1,"# description: this": 1,"with # asciinema,": 1,"found." exit 1": 1,"# # description:": 1,"used by the": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"will be saved": 1,"be used by": 1,"asciinema recording asciinema": 1,"start asciinema recording": 2,"tmux session with": 1,"that # session,": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"unique file in": 1,"$0 <task_file>" exit": 1,"a unique file": 1,"session_name="gemini-dev-session" # define": 1,"file to be": 1,"then echo "usage:": 1,"recording asciinema rec": 1,"1 fi if": 1,"task_file="$1" if [": 1,"this script orchestrates": 1,"mkdir -p "${log_dir}"": 1,"logs directory timestamp=$(date": 1,"exists mkdir -p": 1,"for this project.": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"until asciinema finishes": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"session, configured for": 1,"task file to": 1,"asciinema finishes (i.e.,": 1,"configuration session_name="gemini-dev-session" #": 1,"bash # ==============================================================================": 1,"be saved to": 1,"of a tmux": 1,"-z "$task_file" ];": 1,"gemini cli task_file="$1"": 1,"asciinema recording in": 1,"not found." exit": 1,"script will wait": 1,"# the script": 1,"# the output": 1,"configured for this": 1,"# session, configured": 1,"echo "usage: $0": 1,"the tmux session": 1,"define session_name here": 1,"session_name here log_dir="${home}/logs/gemini"": 1,"#!/usr/bin/env bash #": 1,"mkdir -p "$log_dir"": 1,"file '$task_file' not": 1,"\"$session_name\" \"$task_file\"" #": 1,"file: start_development_session.sh #": 1,"task file '$task_file'": 1,"by the gemini": 1,"cli task_file="$1" if": 1,"\"$task_file\"" # the": 1,"# define session_name": 1,"# ensure log": 1,"============================================================================== # configuration": 1,"here until asciinema": 1,"# # ==============================================================================": 1,"then launches the": 1,"============================================================================== # #": 1,"background # the": 1,"finishes (i.e., the": 1,"[ ! -f": 1,"[ -z "$task_file"": 1,"if [ -z": 1,"the output will": 1,"# usage: ./scripts/session/start_development_session.sh": 1,"fi # ensure": 1,"'$task_file' not found."": 1,"a tmux session": 1,"# ============================================================================== #": 2,"wait here until": 1,"the background #": 1,"# # file:": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"file in the": 1,"saved to a": 1,"1 fi #": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1      }
,
      "5-gram": {
"start asciinema recording asciinema rec": 1,"\"$session_name\" \"$task_file\"" # the script": 1,"then launches the gemini cli": 1,"cli task_file="$1" if [ -z": 1,"# session, configured for this": 1,"be saved to a unique": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"saved to a unique file": 1,"if [ -z "$task_file" ];": 1,"directory exists mkdir -p "$log_dir"": 1,"# asciinema, and then launches": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh": 1,"of a tmux session with": 1,"<task_file>" exit 1 fi if": 1,"in the background # the": 1,"echo "error: task file '$task_file'": 1,"found." exit 1 fi #": 1,"then echo "error: task file": 1,"[ -z "$task_file" ]; then": 1,"bash # ============================================================================== # #": 1,""usage: $0 <task_file>" exit 1": 1,"-f "$task_file" ]; then echo": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"session_name="gemini-dev-session" # define session_name here": 1,"asciinema finishes (i.e., the tmux": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"project. # # ============================================================================== #": 1,""error: task file '$task_file' not": 1,"============================================================================== # # file: start_development_session.sh": 1,"============================================================================== # configuration session_name="gemini-dev-session" #": 1,"for this project. # #": 1,"1 fi if [ !": 1,"exit 1 fi if [": 1,"'$task_file' not found." exit 1": 1,"tmux session with # asciinema,": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"mkdir -p "${log_dir}" # task": 1,"# configuration session_name="gemini-dev-session" # define": 1,"wait here until asciinema finishes": 1,"the background # the output": 1,"recording in the background #": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"# file: start_development_session.sh # #": 1,"file: start_development_session.sh # # usage:": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"a tmux session with #": 1,"# start asciinema recording in": 1,"not found." exit 1 fi": 1,"this project. # # ==============================================================================": 1,"# # usage: ./scripts/session/start_development_session.sh #": 1,"# ensure log directory exists": 1,""$task_file" ]; then echo "error:": 1,"-p "$log_dir" # start asciinema": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"start asciinema recording in the": 1,"echo "usage: $0 <task_file>" exit": 1,"mkdir -p "$log_dir" # start": 1,"to a unique file in": 1,"\"$task_file\"" # the script will": 1,"this script orchestrates the recording": 1,"output will be saved to": 1,"background # the output will": 1,"file '$task_file' not found." exit": 1,"the output will be saved": 1,"launches the gemini cli within": 1,"configured for this project. #": 1,"orchestrates the recording of a": 1,"description: this script orchestrates the": 1,"# # description: this script": 1,"file to be used by": 1,"if [ ! -f "$task_file"": 1,"finishes (i.e., the tmux session": 1,"# # file: start_development_session.sh #": 1,"ensure log directory exists mkdir": 1,"task file to be used": 1,"will be saved to a": 1,"a unique file in the": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"be used by the gemini": 1,"-z "$task_file" ]; then echo": 1,"recording asciinema rec "$asciinema_rec_file" --command": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"# ============================================================================== # configuration session_name="gemini-dev-session"": 1,"1 fi # ensure log": 1,"]; then echo "error: task": 1,"here until asciinema finishes (i.e.,": 1,"recording of a tmux session": 1,"in the logs directory timestamp=$(date": 1,"fi # ensure log directory": 1,"usage: ./scripts/session/start_development_session.sh # # description:": 1,""${log_dir}" # task file to": 1,"# start asciinema recording asciinema": 1,"the recording of a tmux": 1,"# the output will be": 1,""$task_file" ]; then echo "usage:": 1,"until asciinema finishes (i.e., the": 1,"within that # session, configured": 1,"will wait here until asciinema": 1,"gemini cli within that #": 1,"$0 <task_file>" exit 1 fi": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"exists mkdir -p "$log_dir" #": 1,"# usage: ./scripts/session/start_development_session.sh # #": 1,"script orchestrates the recording of": 1,"# ============================================================================== # # file:": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,""$log_dir" # start asciinema recording": 1,"and then launches the gemini": 1,"! -f "$task_file" ]; then": 1,"the gemini cli within that": 1,"cli within that # session,": 1,"# define session_name here log_dir="${home}/logs/gemini"": 1,"(i.e., the tmux session exits)": 1,"unique file in the logs": 1,"asciinema, and then launches the": 1,"# # ============================================================================== # configuration": 1,"that # session, configured for": 1,"gemini cli task_file="$1" if [": 1,"configuration session_name="gemini-dev-session" # define session_name": 1,"exit 1 fi # ensure": 1,"the script will wait here": 1,"[ ! -f "$task_file" ];": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"then echo "usage: $0 <task_file>"": 1,"# task file to be": 1,"asciinema recording asciinema rec "$asciinema_rec_file"": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"to be used by the": 1,"# the script will wait": 1,"script will wait here until": 1,"session with # asciinema, and": 1,"./scripts/session/start_development_session.sh # # description: this": 1,"session, configured for this project.": 1,"]; then echo "usage: $0": 1,"log directory exists mkdir -p": 1,"-p "${log_dir}" # task file": 1,"fi if [ ! -f": 1,"the gemini cli task_file="$1" if": 1,"task file '$task_file' not found."": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"file in the logs directory": 1,"asciinema recording in the background": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"used by the gemini cli": 1,"# description: this script orchestrates": 1,"by the gemini cli task_file="$1"": 1,"task_file="$1" if [ -z "$task_file"": 1,"with # asciinema, and then": 1      }
,
      "7-gram": {
"the gemini cli task_file="$1" if [ -z": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1,""$log_dir" # start asciinema recording in the": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"start asciinema recording in the background #": 1,"the output will be saved to a": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"saved to a unique file in the": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"not found." exit 1 fi # ensure": 1,""usage: $0 <task_file>" exit 1 fi if": 1,"used by the gemini cli task_file="$1" if": 1,"# asciinema, and then launches the gemini": 1,"file '$task_file' not found." exit 1 fi": 1,"# the script will wait here until": 1,"with # asciinema, and then launches the": 1,""${log_dir}" # task file to be used": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates": 1,"# the output will be saved to": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"# # file: start_development_session.sh # # usage:": 1,"# # description: this script orchestrates the": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"# ============================================================================== # # file: start_development_session.sh #": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"cli within that # session, configured for": 1,"that # session, configured for this project.": 1,"of a tmux session with # asciinema,": 1,"-f "$task_file" ]; then echo "error: task": 1,""$task_file" ]; then echo "error: task file": 1,"recording of a tmux session with #": 1,""$task_file" ]; then echo "usage: $0 <task_file>"": 1,"and then launches the gemini cli within": 1,"within that # session, configured for this": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"if [ ! -f "$task_file" ]; then": 1,"'$task_file' not found." exit 1 fi #": 1,"background # the output will be saved": 1,"! -f "$task_file" ]; then echo "error:": 1,"[ -z "$task_file" ]; then echo "usage:": 1,"description: this script orchestrates the recording of": 1,"then echo "error: task file '$task_file' not": 1,"exit 1 fi if [ ! -f": 1,"]; then echo "usage: $0 <task_file>" exit": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh": 1,"# task file to be used by": 1,"directory exists mkdir -p "$log_dir" # start": 1,"# # usage: ./scripts/session/start_development_session.sh # # description:": 1,"gemini cli within that # session, configured": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"if [ -z "$task_file" ]; then echo": 1,"wait here until asciinema finishes (i.e., the": 1,"output will be saved to a unique": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"to a unique file in the logs": 1,"\"$session_name\" \"$task_file\"" # the script will wait": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"-z "$task_file" ]; then echo "usage: $0": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"orchestrates the recording of a tmux session": 1,"# start asciinema recording in the background": 1,"be saved to a unique file in": 1,"recording in the background # the output": 1,"task_file="$1" if [ -z "$task_file" ]; then": 1,"session with # asciinema, and then launches": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"asciinema finishes (i.e., the tmux session exits)": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"be used by the gemini cli task_file="$1"": 1,"in the background # the output will": 1,"ensure log directory exists mkdir -p "$log_dir"": 1,"task file '$task_file' not found." exit 1": 1,"here until asciinema finishes (i.e., the tmux": 1,"$0 <task_file>" exit 1 fi if [": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this": 1,"echo "usage: $0 <task_file>" exit 1 fi": 1,"fi if [ ! -f "$task_file" ];": 1,"by the gemini cli task_file="$1" if [": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"will be saved to a unique file": 1,"mkdir -p "${log_dir}" # task file to": 1,"asciinema recording in the background # the": 1,"the script will wait here until asciinema": 1,"]; then echo "error: task file '$task_file'": 1,"echo "error: task file '$task_file' not found."": 1,"exit 1 fi # ensure log directory": 1,"found." exit 1 fi # ensure log": 1,"then echo "usage: $0 <task_file>" exit 1": 1,"fi # ensure log directory exists mkdir": 1,"this project. # # ============================================================================== # configuration": 1,"# description: this script orchestrates the recording": 1,"# ensure log directory exists mkdir -p": 1,"then launches the gemini cli within that": 1,"task file to be used by the": 1,"log directory exists mkdir -p "$log_dir" #": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script": 1,"a tmux session with # asciinema, and": 1,"script will wait here until asciinema finishes": 1,"-p "${log_dir}" # task file to be": 1,"tmux session with # asciinema, and then": 1,"unique file in the logs directory timestamp=$(date": 1,"the gemini cli within that # session,": 1,"until asciinema finishes (i.e., the tmux session": 1,""error: task file '$task_file' not found." exit": 1,"for this project. # # ============================================================================== #": 1,"1 fi if [ ! -f "$task_file"": 1,"exists mkdir -p "$log_dir" # start asciinema": 1,"mkdir -p "$log_dir" # start asciinema recording": 1,"session, configured for this project. # #": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"# session, configured for this project. #": 1,"-p "$log_dir" # start asciinema recording in": 1,"launches the gemini cli within that #": 1,"this script orchestrates the recording of a": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # #": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"the background # the output will be": 1,"1 fi # ensure log directory exists": 1,"[ ! -f "$task_file" ]; then echo": 1,"bash # ============================================================================== # # file: start_development_session.sh": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"file to be used by the gemini": 1,"\"$task_file\"" # the script will wait here": 1,"asciinema, and then launches the gemini cli": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"will wait here until asciinema finishes (i.e.,": 1,"============================================================================== # # file: start_development_session.sh # #": 1,"a unique file in the logs directory": 1,"<task_file>" exit 1 fi if [ !": 1,"gemini cli task_file="$1" if [ -z "$task_file"": 1,"# configuration session_name="gemini-dev-session" # define session_name here": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"to be used by the gemini cli": 1,"the recording of a tmux session with": 1,"configured for this project. # # ==============================================================================": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"cli task_file="$1" if [ -z "$task_file" ];": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh #": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"script orchestrates the recording of a tmux": 1      }
,
      "11-gram": {
"then echo "error: task file '$task_file' not found." exit 1 fi": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"in the background # the output will be saved to a": 1,"recording in the background # the output will be saved to": 1,""$log_dir" # start asciinema recording in the background # the output": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"then launches the gemini cli within that # session, configured for": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"# the output will be saved to a unique file in": 1,"-p "${log_dir}" # task file to be used by the gemini": 1,"found." exit 1 fi # ensure log directory exists mkdir -p": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage:": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"with # asciinema, and then launches the gemini cli within that": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh #": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"that # session, configured for this project. # # ============================================================================== #": 1,"not found." exit 1 fi # ensure log directory exists mkdir": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"# the script will wait here until asciinema finishes (i.e., the": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh": 1,"the output will be saved to a unique file in the": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"mkdir -p "${log_dir}" # task file to be used by the": 1,""${log_dir}" # task file to be used by the gemini cli": 1,"background # the output will be saved to a unique file": 1,"]; then echo "error: task file '$task_file' not found." exit 1": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description:": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"this script orchestrates the recording of a tmux session with #": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"task file to be used by the gemini cli task_file="$1" if": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # #": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"# start asciinema recording in the background # the output will": 1,"# # description: this script orchestrates the recording of a tmux": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"task file '$task_file' not found." exit 1 fi # ensure log": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"# asciinema, and then launches the gemini cli within that #": 1,"output will be saved to a unique file in the logs": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"description: this script orchestrates the recording of a tmux session with": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"cli within that # session, configured for this project. # #": 1,"and then launches the gemini cli within that # session, configured": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"-p "$log_dir" # start asciinema recording in the background # the": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"launches the gemini cli within that # session, configured for this": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"the recording of a tmux session with # asciinema, and then": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,"of a tmux session with # asciinema, and then launches the": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script": 1,"file '$task_file' not found." exit 1 fi # ensure log directory": 1,"tmux session with # asciinema, and then launches the gemini cli": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,""error: task file '$task_file' not found." exit 1 fi # ensure": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"orchestrates the recording of a tmux session with # asciinema, and": 1,"asciinema, and then launches the gemini cli within that # session,": 1,"the script will wait here until asciinema finishes (i.e., the tmux": 1,"script will wait here until asciinema finishes (i.e., the tmux session": 1,"if [ ! -f "$task_file" ]; then echo "error: task file": 1,"the background # the output will be saved to a unique": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"# description: this script orchestrates the recording of a tmux session": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,"start asciinema recording in the background # the output will be": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"to be used by the gemini cli task_file="$1" if [ -z": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this": 1,"a tmux session with # asciinema, and then launches the gemini": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"file to be used by the gemini cli task_file="$1" if [": 1,"gemini cli within that # session, configured for this project. #": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"# session, configured for this project. # # ============================================================================== # configuration": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"be saved to a unique file in the logs directory timestamp=$(date": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"will be saved to a unique file in the logs directory": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"\"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"recording of a tmux session with # asciinema, and then launches": 1,"# task file to be used by the gemini cli task_file="$1"": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"session with # asciinema, and then launches the gemini cli within": 1,"within that # session, configured for this project. # # ==============================================================================": 1,"asciinema recording in the background # the output will be saved": 1,"script orchestrates the recording of a tmux session with # asciinema,": 1,"mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"\"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"echo "error: task file '$task_file' not found." exit 1 fi #": 1,"the gemini cli within that # session, configured for this project.": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1      }
,
      "13-gram": {
"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"# start asciinema recording in the background # the output will be saved": 1,"not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir": 1,""error: task file '$task_file' not found." exit 1 fi # ensure log directory": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording": 1,"the script will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"\"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"background # the output will be saved to a unique file in the": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this": 1,"# the script will wait here until asciinema finishes (i.e., the tmux session": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"echo "error: task file '$task_file' not found." exit 1 fi # ensure log": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"file to be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"asciinema, and then launches the gemini cli within that # session, configured for": 1,"of a tmux session with # asciinema, and then launches the gemini cli": 1,"the recording of a tmux session with # asciinema, and then launches the": 1,"orchestrates the recording of a tmux session with # asciinema, and then launches": 1,"script orchestrates the recording of a tmux session with # asciinema, and then": 1,"# description: this script orchestrates the recording of a tmux session with #": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates": 1,"\"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,""$log_dir" # start asciinema recording in the background # the output will be": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"the gemini cli within that # session, configured for this project. # #": 1,"session with # asciinema, and then launches the gemini cli within that #": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"asciinema recording in the background # the output will be saved to a": 1,"-p "$log_dir" # start asciinema recording in the background # the output will": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background # the": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"task file to be used by the gemini cli task_file="$1" if [ -z": 1,"-p "${log_dir}" # task file to be used by the gemini cli task_file="$1"": 1,"tmux session with # asciinema, and then launches the gemini cli within that": 1,"a tmux session with # asciinema, and then launches the gemini cli within": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # #": 1,"\"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"recording in the background # the output will be saved to a unique": 1,"start asciinema recording in the background # the output will be saved to": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"within that # session, configured for this project. # # ============================================================================== # configuration": 1,"cli within that # session, configured for this project. # # ============================================================================== #": 1,"then launches the gemini cli within that # session, configured for this project.": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh #": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"# # description: this script orchestrates the recording of a tmux session with": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"output will be saved to a unique file in the logs directory timestamp=$(date": 1,"# the output will be saved to a unique file in the logs": 1,"in the background # the output will be saved to a unique file": 1,"task file '$task_file' not found." exit 1 fi # ensure log directory exists": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"to be used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"gemini cli within that # session, configured for this project. # # ==============================================================================": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"the background # the output will be saved to a unique file in": 1,"found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,""${log_dir}" # task file to be used by the gemini cli task_file="$1" if": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"# session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"# asciinema, and then launches the gemini cli within that # session, configured": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # ensure": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"# task file to be used by the gemini cli task_file="$1" if [": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini": 1,"launches the gemini cli within that # session, configured for this project. #": 1,"and then launches the gemini cli within that # session, configured for this": 1,"with # asciinema, and then launches the gemini cli within that # session,": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script": 1,"the output will be saved to a unique file in the logs directory": 1,"mkdir -p "$log_dir" # start asciinema recording in the background # the output": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,""/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"mkdir -p "${log_dir}" # task file to be used by the gemini cli": 1,"recording of a tmux session with # asciinema, and then launches the gemini": 1,"this script orchestrates the recording of a tmux session with # asciinema, and": 1,"description: this script orchestrates the recording of a tmux session with # asciinema,": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description:": 1      }
,
      "19-gram": {
"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will": 1,""error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1"": 1,"this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within": 1,"not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"with # asciinema, and then launches the gemini cli within that # session, configured for this project. # #": 1,"the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session,": 1,"description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli": 1,""$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this": 1,"of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"# task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"# session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"# asciinema, and then launches the gemini cli within that # session, configured for this project. # # ==============================================================================": 1,"--command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date": 1,"start asciinema recording in the background # the output will be saved to a unique file in the logs": 1,"found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project.": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"# # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with #": 1,"will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"asciinema recording in the background # the output will be saved to a unique file in the logs directory": 1,""$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"# description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"# the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"# start asciinema recording in the background # the output will be saved to a unique file in the": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== #": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the": 1,"echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"-p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of": 1,"asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the": 1,"recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured": 1,"script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that": 1,"rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,"-p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z": 1,"gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,""${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"session with # asciinema, and then launches the gemini cli within that # session, configured for this project. #": 1,"orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that #": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema,": 1      }
,
      "23-gram": {
"be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\"": 1,"output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command": 1,"file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background #": 1,"be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ !": 1,"here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo": 1,"session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then": 1,"configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [": 1,"for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used": 1,"configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be": 1,"this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured": 1,"in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema": 1,"recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start": 1,"asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" #": 1,"directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in": 1,"1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved": 1,"<task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure": 1,"$0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi #": 1,"file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if": 1,"# task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1": 1,"# configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if": 1,"the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir": 1,"launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini"": 1,"recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. #": 1,"# # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the": 1,"# file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and": 1,"+"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes": 1,"-p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the logs directory": 1,"log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file": 1,"# ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a": 1,"then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording": 1,"1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory": 1,"# define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file"": 1,"# # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini": 1,"and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name": 1,"# asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" #": 1,"with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session"": 1,"tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== #": 1,"orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this": 1,"# usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini": 1,"============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with #": 1,"directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until": 1,"background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema": 1,"exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the": 1,"fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists": 1,"echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1": 1,"-z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file'": 1,"[ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file": 1,"-p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>"": 1,"log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage:": 1,"within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" #": 1,"of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # #": 1,"./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within": 1,"start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches": 1,"# ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with": 1,"asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session": 1,"start asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast"": 1,"exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be": 1,"then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit": 1,"]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found."": 1,"cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo": 1,"the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ];": 1,"task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi": 1,"then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here": 1,"a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ==============================================================================": 1,"the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for this project.": 1,"logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here": 1,"unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the": 1,"to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\""": 1,"# the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec": 1,"# start asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s")": 1,"! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir"": 1,"[ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p": 1,"if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir": 1,""usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi": 1,"project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the": 1,"bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session": 1,"start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux": 1,"# start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the": 1,"asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e.,": 1,"fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to": 1,""$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start": 1,"used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f": 1,"to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [": 1,"# session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file": 1,"asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define": 1,"# # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema,": 1,"a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" #": 1,"the background # the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording": 1,""$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the logs directory timestamp=$(date": 1,"]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema": 1,"task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error:": 1,"# ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli": 1,"session with # asciinema, and then launches the gemini cli within that # session, configured for this project. # # ============================================================================== # configuration": 1,"file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script": 1,"saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\"": 1,"will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh": 1,"define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ];": 1,"session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z": 1,"session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to": 1,"gemini cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p": 1,"usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli": 1,"in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will": 1,""error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the": 1,"gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then": 1,"script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session, configured for": 1,"# description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that #": 1,"timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema": 1,"found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will": 1,"task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background": 1,"by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file"": 1,"============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1"": 1,"the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait": 1,"mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique file in the logs": 1,"ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output will be saved to a unique": 1,"not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the output": 1,"'$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in the background # the": 1,"-f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" #": 1,""$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not": 1,"if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task": 1,"this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task file to be used by": 1,"cli within that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}"": 1,"# # description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that": 1,"#!/usr/bin/env bash # ============================================================================== # # file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux": 1,"recording asciinema rec "$asciinema_rec_file" --command "/data/data/com.termux.nix/files/home/pick-up-nix2/scripts/session/run_gemini_session.sh \"$asciinema_rec_file\" \"$session_name\" \"$task_file\"" # the script will wait here until asciinema finishes (i.e., the tmux session exits)": 1,"the output will be saved to a unique file in the logs directory timestamp=$(date +"%y%m%d_%h%m%s") asciinema_rec_file="$log_dir/session_$timestamp.cast" # start asciinema recording asciinema rec "$asciinema_rec_file"": 1,"echo "error: task file '$task_file' not found." exit 1 fi # ensure log directory exists mkdir -p "$log_dir" # start asciinema recording in": 1,"exit 1 fi if [ ! -f "$task_file" ]; then echo "error: task file '$task_file' not found." exit 1 fi # ensure log": 1,""${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0 <task_file>" exit": 1,"mkdir -p "${log_dir}" # task file to be used by the gemini cli task_file="$1" if [ -z "$task_file" ]; then echo "usage: $0": 1,"that # session, configured for this project. # # ============================================================================== # configuration session_name="gemini-dev-session" # define session_name here log_dir="${home}/logs/gemini" mkdir -p "${log_dir}" # task": 1,"description: this script orchestrates the recording of a tmux session with # asciinema, and then launches the gemini cli within that # session,": 1,"file: start_development_session.sh # # usage: ./scripts/session/start_development_session.sh # # description: this script orchestrates the recording of a tmux session with # asciinema, and then": 1      }
    }
,
    "/data/data/com.termux.nix/files/home/nix/scripts/dev_lifecycle/session/run_gemini_session.sh~": {
      "1-gram": {
"managed": 1,"exits,": 1,"when": 1,"from": 2,"commands": 1,"session:": 2,"it": 3,"determine": 1,"`boot.sh`).": 1,"runs": 1,"script": 1,"<asciinema_rec_file>": 1,"gemini_invocation="./gemini_cli_recent.sh"": 1,""asciinema": 1,"boot.sh": 1,"passed": 1,"stopping": 1,"asciinema": 3,"development": 1,""echo": 2,"send-keys": 3,"after": 1,"send": 1,"-d": 1,"bun": 1,"session_name="$2"": 1,"file:": 1,"else": 1,"--model=gemini-2.5-flash": 1,"--prompt-interactive": 2,"best": 1,"new-session": 1,"(formerly": 1,"closely": 1,"existing": 2,"attaching": 1,"new": 3,"optionally": 1,"this": 1,"kill": 1,"recording..."": 1,""$gemini_invocation": 1,"$task_file...'"": 1,"-s": 1,"run": 1,"or": 3,"`tmux`": 1,"==============================================================================": 2,"need": 1,"so": 1,"default,": 1,"--all-files,": 1,""starting": 1,"-t": 5,"#fi": 1,"gemini_invocation="bunx": 1,"#if": 1,"gemini": 4,"the": 10,"<session_name>": 1,"default": 1,"session!'"": 1,"'welcome": 1,"continue": 1,"using": 1,"practices:": 1,"incorporating": 1,"and": 1,"create": 1,"doesn't": 1,"tmux": 12,"/dev/null;then": 1,"method": 1,"it's": 1,"to": 9,"a": 3,"cli": 2,"<task_file>": 1,"bash": 1,"recording": 2,""attaching": 1,"loading": 1,"then": 1,"!": 1,"-v": 1,"npx)": 1,"don't": 1,"--checkpointing": 2,"$session_name"": 2,"2>/dev/null;": 1,""$session_name"": 6,"start": 1,"command": 2,"task_file="$3"": 1,"description:": 1,"process": 1,"boot.sh,": 1,"exited.": 1,"attach-session": 1,"\"@$task_file\""": 1,"file": 1,"task": 2,"--approval-mode": 2,"echo": 4,"exist,": 1,"&>": 1,"creating": 1,"within": 1,"usage:": 1,"#": 23,"stopped."": 1,"will": 1,"invocation": 1,"by": 1,"here.": 1,"pid": 1,"attach": 2,"(bunx": 1,"`start_development_session.sh`": 1,"one.": 1,"./scripts/session/run_gemini_session.sh": 1,"#!/usr/bin/env": 1,"we": 1,"is": 2,""tmux": 1,"stop": 1,"fi": 1,"'loading": 1,"c-m": 3,"has-session": 1,"if": 2,"@google/gemini-cli"": 2,"#gemini_invocation="npx": 1,"related": 1,"an": 1,"session": 8,"session,": 1,"run_gemini_session.sh": 1      }
,
      "2-gram": {
"$session_name" fi": 1,""$gemini_invocation --model=gemini-2.5-flash": 1,"or attach": 1,"attaching to": 1,"using --prompt-interactive": 1,"session tmux": 1,"to existing": 1,"to continue": 1,"practices: --all-files,": 1,"gemini_invocation="./gemini_cli_recent.sh" #": 1,"to the": 3,"# ==============================================================================": 2,"it and": 1,"the tmux": 1,"'welcome to": 1,"#fi gemini_invocation="./gemini_cli_recent.sh"": 1,"here. #": 1,"run_gemini_session.sh #": 1,"-t "$session_name"": 5,"session!'" c-m": 1,"so we": 1,"session or": 1,"! tmux": 1,"kill it": 1,""echo 'welcome": 1,"send-keys -t": 3,"#!/usr/bin/env bash": 1,"is managed": 1,"a `tmux`": 1,"============================================================================== #": 1,"exist, it": 1,"<task_file> #": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"-v bun": 1,"--approval-mode default": 1,"# send": 1,"doesn't exist,": 1,"else echo": 1,"tmux new-session": 1,"by boot.sh": 1,"session exited.": 1,"and run": 1,"(formerly `boot.sh`).": 1,"existing #": 1,"description: this": 1,"npx) #gemini_invocation="npx": 1,""tmux session": 1,"or npx)": 1,"the new": 1,"task from": 1,"need to": 1,"to kill": 1,"file tmux": 1,"a tmux": 1,"<asciinema_rec_file> <session_name>": 1,"it's closely": 1,"attach-session -t": 1,"session: $session_name"": 2,"if the": 1,"the task": 1,"it here.": 1,"tmux session": 4,"#gemini_invocation="npx @google/gemini-cli"": 1,"existing tmux": 1,"bun &>": 1,"c-m else": 1,"--prompt-interactive \"@$task_file\""": 1,"--model=gemini-2.5-flash --approval-mode": 1,"file: run_gemini_session.sh": 1,"from boot.sh,": 1,"attach to": 2,"/dev/null;then #": 1,"--approval-mode default,": 1,"development session!'"": 1,"will create": 1,"recording..." #": 1,"from $task_file...'"": 1,"best practices:": 1,"echo "tmux": 1,"run the": 1,"passed from": 1,"# file:": 1,"the session": 2,"# using": 1,"`start_development_session.sh` #": 1,"\"@$task_file\"" c-m": 1,"start or": 1,"# description:": 1,"-s "$session_name"": 1,"session_name="$2" task_file="$3"": 1,"session #": 2,"script runs": 1,"new session": 1,""$session_name" 2>/dev/null;": 1,"loading the": 1,"--checkpointing #": 1,"asciinema process": 1,"one. it's": 1,"or attaching": 1,"session, #": 1,"to `start_development_session.sh`": 1,"tmux send-keys": 3,"exited. stopping": 1,"<session_name> <task_file>": 1,"runs the": 1,"tmux session:": 2,"then echo": 1,""$session_name" "echo": 2,"tmux has-session": 1,"command if": 1,"it will": 1,"if !": 1,"# one.": 1,"don't need": 1,"# start": 1,"when tmux": 1,"after loading": 1,"@google/gemini-cli" #if": 1,"cli within": 1,"continue the": 1,"new-session -d": 1,"a new": 1,""echo 'loading": 1,"# (formerly": 1,"to an": 1,"task file": 1,"# the": 2,"managed by": 1,"the pid": 1,"--all-files, --approval-mode": 1,"fi #": 1,"to a": 1,"bash #": 1,"gemini cli": 2,"# when": 1,"cli invocation": 1,"default, --checkpointing": 1,"usage: ./scripts/session/run_gemini_session.sh": 1,"stopping asciinema": 1,"# incorporating": 1,"related to": 1,"task_file="$3" #": 1,"# usage:": 1,"the asciinema": 1,"session doesn't": 1,"# determine": 1,"is passed": 1,""starting new": 1,"# optionally": 1,"gemini_invocation="bunx @google/gemini-cli"": 1,"stop asciinema": 1,"# attach": 1,"determine gemini": 1,"2>/dev/null; then": 1,"has-session -t": 1,"new tmux": 2,"============================================================================== session_name="$2"": 1,"&> /dev/null;then": 1,"the gemini": 3,"tmux attach-session": 1,"echo "starting": 1,"invocation method": 1,"we don't": 1,"--prompt-interactive to": 1,"this script": 1,"(bunx or": 1,"-d -s": 1,""$session_name" "$gemini_invocation": 1,"`boot.sh`). #": 1,"pid is": 1,""asciinema recording": 1,""attaching to": 1,"#if command": 1,"creating a": 1,"# gemini_invocation="bunx": 1,"echo "asciinema": 1,"default --checkpointing": 1,"within a": 1,"boot.sh echo": 1,""$session_name" #": 2,"gemini development": 1,"$session_name" tmux": 1,"gemini command": 1,"# #": 4,"session exits,": 1,"incorporating best": 1,"recording echo": 1,"asciinema recording..."": 1,"c-m tmux": 2,"session after": 1,"# if": 1,"send commands": 1,"optionally creating": 1,"recording stopped."": 1,"boot.sh, so": 1,"exits, stop": 1,"$task_file...'" c-m": 1,"an existing": 1,"echo "attaching": 1,"--checkpointing --prompt-interactive": 1,"`tmux` session,": 1,"command -v": 1,"process is": 1,"closely related": 1,"commands to": 1,"method (bunx": 1,"create it": 1,"@google/gemini-cli" #fi": 1,"asciinema recording": 1,"'loading task": 1      }
,
      "3-gram": {
"'welcome to the": 1,"within a `tmux`": 1,"session: $session_name" tmux": 1,"managed by boot.sh": 1,"process is managed": 1,"description: this script": 1,"gemini_invocation="./gemini_cli_recent.sh" # start": 1,"to kill it": 1,"c-m else echo": 1,"the gemini cli": 1,"c-m tmux send-keys": 2,"@google/gemini-cli" #if command": 1,"# determine gemini": 1,"# send commands": 1,"# the pid": 1,"# when tmux": 1,"tmux attach-session -t": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"# # usage:": 1,"attach to a": 1,"to continue the": 1,"to `start_development_session.sh` #": 1,"the session after": 1,"to the tmux": 1,"to the gemini": 1,"and run the": 1,"method (bunx or": 1,"echo "tmux session": 1,"# file: run_gemini_session.sh": 1,"#gemini_invocation="npx @google/gemini-cli" #if": 1,"stopping asciinema recording..."": 1,"gemini command if": 1,"tmux session exits,": 1,"session or attaching": 1,"to the new": 1,"fi # attach": 1,"determine gemini cli": 1,"when tmux session": 1,"'loading task from": 1,"session doesn't exist,": 1,""attaching to existing": 1,"or attaching to": 1,"file tmux send-keys": 1,"gemini cli within": 1,"session_name="$2" task_file="$3" #": 1,"--all-files, --approval-mode default,": 1,""asciinema recording stopped."": 1,"exits, stop asciinema": 1,"the task file": 1,"asciinema recording..." #": 1,"exist, it will": 1,"kill it here.": 1,"(bunx or npx)": 1,"session!'" c-m tmux": 1,"$session_name" fi #": 1,"file: run_gemini_session.sh #": 1,"# gemini_invocation="bunx @google/gemini-cli"": 1,"`tmux` session, #": 1,"tmux session: $session_name"": 2,"pid is passed": 1,""$session_name" "echo 'welcome": 1,"new session or": 1,"here. # the": 1,""echo 'loading task": 1,"session tmux attach-session": 1,"tmux session tmux": 1,"has-session -t "$session_name"": 1,""$session_name" # send": 1,"@google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh"": 1,"existing # one.": 1,"development session!'" c-m": 1,""$session_name" 2>/dev/null; then": 1,"# incorporating best": 1,"script runs the": 1,"so we don't": 1,"invocation method (bunx": 1,"# (formerly `boot.sh`).": 1,"command -v bun": 1,"============================================================================== session_name="$2" task_file="$3"": 1,"--checkpointing # using": 1,"<session_name> <task_file> #": 1,"it will create": 1,"#fi gemini_invocation="./gemini_cli_recent.sh" #": 1,"attach-session -t "$session_name"": 1,"else echo "attaching": 1,"\"@$task_file\"" c-m else": 1,"session: $session_name" fi": 1,"send-keys -t "$session_name"": 3,"task file tmux": 1,"# description: this": 1,"is managed by": 1,"asciinema process is": 1,"it here. #": 1,"if the session": 1,"a `tmux` session,": 1,"# # description:": 1,"run the gemini": 1,"gemini_invocation="bunx @google/gemini-cli" #fi": 1,"exited. stopping asciinema": 1,"loading the task": 1,"-t "$session_name" 2>/dev/null;": 1,""echo 'welcome to": 1,"-s "$session_name" #": 1,"don't need to": 1,"attach to the": 1,"practices: --all-files, --approval-mode": 1,"-t "$session_name" "$gemini_invocation": 1,"session, # optionally": 1,"it's closely related": 1,"then echo "starting": 1,"boot.sh echo "asciinema": 1,"session exited. stopping": 1,"it and run": 1,"start or attach": 1,"# if the": 1,"tmux send-keys -t": 3,"using --prompt-interactive to": 1,"stop asciinema recording": 1,"continue the session": 1,"by boot.sh echo": 1,"run_gemini_session.sh # #": 1,"echo "asciinema recording": 1,"# using --prompt-interactive": 1,"from boot.sh, so": 1,"# ============================================================================== session_name="$2"": 1,"recording echo "tmux": 1,"or attach to": 1,"doesn't exist, it": 1,"related to `start_development_session.sh`": 1,"cli invocation method": 1,"the asciinema process": 1,"-v bun &>": 1,"closely related to": 1,"optionally creating a": 1,"commands to the": 1,"the gemini command": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"2>/dev/null; then echo": 1,"--checkpointing --prompt-interactive \"@$task_file\""": 1,"session # if": 1,"recording..." # the": 1,"a new session": 1,"# optionally creating": 1,"after loading the": 1,"command if !": 1,"-t "$session_name" #": 1,"--model=gemini-2.5-flash --approval-mode default": 1,"<task_file> # #": 1,""tmux session exited.": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"bash # ==============================================================================": 1,"the pid is": 1,"attaching to an": 1,"npx) #gemini_invocation="npx @google/gemini-cli"": 1,"task from $task_file...'"": 1,"new tmux session": 1,"to a tmux": 1,"from $task_file...'" c-m": 1,"best practices: --all-files,": 1,"if ! tmux": 1,"&> /dev/null;then #": 1,"(formerly `boot.sh`). #": 1,"echo "starting new": 1,"to existing tmux": 1,"-t "$session_name" "echo": 2,"default, --checkpointing #": 1,"an existing #": 1,"one. it's closely": 1,"to an existing": 1,"--prompt-interactive to continue": 1,"incorporating best practices:": 1,"session # incorporating": 1,"the new tmux": 1,""$session_name" # when": 1,"the tmux session": 1,"new-session -d -s": 1,"<asciinema_rec_file> <session_name> <task_file>": 1,"#!/usr/bin/env bash #": 1,""$session_name" "echo 'loading": 1,"creating a new": 1,"is passed from": 1,"tmux new-session -d": 1,"# the asciinema": 1,"cli within a": 1,"`boot.sh`). # #": 1,"`start_development_session.sh` # (formerly": 1,"the session doesn't": 1,"--approval-mode default, --checkpointing": 1,"we don't need": 1,"#if command -v": 1,"$session_name" tmux new-session": 1,"# attach to": 1,"tmux has-session -t": 1,"passed from boot.sh,": 1,"$task_file...'" c-m tmux": 1,"gemini development session!'"": 1,"# # ==============================================================================": 1,"--approval-mode default --checkpointing": 1,"============================================================================== # #": 1,"the gemini development": 1,"# one. it's": 1,"echo "attaching to": 1,"session exits, stop": 1,"existing tmux session:": 1,"send commands to": 1,"tmux session #": 2,"asciinema recording echo": 1,"! tmux has-session": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,""starting new tmux": 1,"/dev/null;then # gemini_invocation="bunx": 1,"a tmux session": 1,"bun &> /dev/null;then": 1,"# usage: ./scripts/session/run_gemini_session.sh": 1,"# ============================================================================== #": 1,"create it and": 1,"default --checkpointing --prompt-interactive": 1,"runs the gemini": 1,"this script runs": 1,"# # file:": 1,"# start or": 1,"new tmux session:": 1,"task_file="$3" # determine": 1,"boot.sh, so we": 1,"--prompt-interactive \"@$task_file\"" c-m": 1,"session after loading": 1,"will create it": 1,"-d -s "$session_name"": 1,"gemini cli invocation": 1,"or npx) #gemini_invocation="npx": 1,"need to kill": 1      }
,
      "5-gram": {
"-t "$session_name" "echo 'welcome to": 1,"task_file="$3" # determine gemini cli": 1,"the pid is passed from": 1,"bun &> /dev/null;then # gemini_invocation="bunx": 1,"-t "$session_name" # when tmux": 1,"the session doesn't exist, it": 1,"#if command -v bun &>": 1,"# # file: run_gemini_session.sh #": 1,"by boot.sh echo "asciinema recording": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh"": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"\"@$task_file\"" c-m else echo "attaching": 1,"gemini development session!'" c-m tmux": 1,"attaching to an existing #": 1,"exist, it will create it": 1,"the new tmux session #": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"one. it's closely related to": 1,"need to kill it here.": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"# if the session doesn't": 1,"don't need to kill it": 1,"command if ! tmux has-session": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"the session after loading the": 1,"`tmux` session, # optionally creating": 1,"-t "$session_name" 2>/dev/null; then echo": 1,"within a `tmux` session, #": 1,"session: $session_name" tmux new-session -d": 1,"# the asciinema process is": 1,"send-keys -t "$session_name" "echo 'loading": 1,"bash # ============================================================================== # #": 1,"exits, stop asciinema recording echo": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"or attach to a tmux": 1,"-d -s "$session_name" # send": 1,""echo 'loading task from $task_file...'"": 1,"file: run_gemini_session.sh # # usage:": 1,"using --prompt-interactive to continue the": 1,"# send commands to the": 1,"session!'" c-m tmux send-keys -t": 1,"to existing tmux session: $session_name"": 1,"#!/usr/bin/env bash # ============================================================================== #": 1,"else echo "attaching to existing": 1,"doesn't exist, it will create": 1,"$task_file...'" c-m tmux send-keys -t": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"new-session -d -s "$session_name" #": 1,""$session_name" # when tmux session": 1,"to kill it here. #": 1,""tmux session exited. stopping asciinema": 1,"invocation method (bunx or npx)": 1,"exited. stopping asciinema recording..." #": 1,"-s "$session_name" # send commands": 1,"new tmux session # incorporating": 1,"this script runs the gemini": 1,"loading the task file tmux": 1,"tmux session exits, stop asciinema": 1,"managed by boot.sh echo "asciinema": 1,"gemini command if ! tmux": 1,"@google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start": 1,"to an existing # one.": 1,"session after loading the task": 1,"recording..." # the pid is": 1,"creating a new session or": 1,"# attach to the tmux": 1,"tmux new-session -d -s "$session_name"": 1,"session exits, stop asciinema recording": 1,"to the tmux session tmux": 1,"the gemini development session!'" c-m": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"commands to the new tmux": 1,"task file tmux send-keys -t": 1,"(formerly `boot.sh`). # # ==============================================================================": 1,"it's closely related to `start_development_session.sh`": 1,"session exited. stopping asciinema recording..."": 1,"to the gemini development session!'"": 1,"fi # attach to the": 1,"it and run the gemini": 1,"gemini_invocation="./gemini_cli_recent.sh" # start or attach": 1,"it here. # the asciinema": 1,"'welcome to the gemini development": 1,"session # incorporating best practices:": 1,""attaching to existing tmux session:": 1,"the task file tmux send-keys": 1,"`boot.sh`). # # ============================================================================== session_name="$2"": 1,"# determine gemini cli invocation": 1,"is passed from boot.sh, so": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"--all-files, --approval-mode default, --checkpointing #": 1,"new session or attaching to": 1,"existing tmux session: $session_name" fi": 1,"<asciinema_rec_file> <session_name> <task_file> # #": 1,"session # if the session": 1,"after loading the task file": 1,"to the new tmux session": 1,"description: this script runs the": 1,"is managed by boot.sh echo": 1,"we don't need to kill": 1,"tmux session: $session_name" fi #": 1,"session doesn't exist, it will": 1,"session_name="$2" task_file="$3" # determine gemini": 1,""$session_name" 2>/dev/null; then echo "starting": 1,"tmux session: $session_name" tmux new-session": 1,"c-m else echo "attaching to": 1,"2>/dev/null; then echo "starting new": 1,"# file: run_gemini_session.sh # #": 1,"so we don't need to": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"# # description: this script": 1,"# (formerly `boot.sh`). # #": 1,"session tmux attach-session -t "$session_name"": 1,"if ! tmux has-session -t": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"asciinema process is managed by": 1,"recording echo "tmux session exited.": 1,"will create it and run": 1,"tmux session # if the": 1,"--prompt-interactive to continue the session": 1,"# # ============================================================================== session_name="$2" task_file="$3"": 1,"run the gemini command if": 1,"has-session -t "$session_name" 2>/dev/null; then": 1,"session: $session_name" fi # attach": 1,"practices: --all-files, --approval-mode default, --checkpointing": 1,"$session_name" tmux new-session -d -s": 1,"-v bun &> /dev/null;then #": 1,"if the session doesn't exist,": 1,"an existing # one. it's": 1,"start or attach to a": 1,"boot.sh echo "asciinema recording stopped."": 1,"boot.sh, so we don't need": 1,"============================================================================== session_name="$2" task_file="$3" # determine": 1,"cli invocation method (bunx or": 1,"existing # one. it's closely": 1,"new tmux session: $session_name" tmux": 1,""$session_name" "echo 'welcome to the": 1,"tmux session tmux attach-session -t": 1,"# using --prompt-interactive to continue": 1,"to `start_development_session.sh` # (formerly `boot.sh`).": 1,"continue the session after loading": 1,"from boot.sh, so we don't": 1,"'loading task from $task_file...'" c-m": 1,""starting new tmux session: $session_name"": 1,"attach-session -t "$session_name" # when": 1,"c-m tmux send-keys -t "$session_name"": 2,"`start_development_session.sh` # (formerly `boot.sh`). #": 1,"# start or attach to": 1,"tmux session # incorporating best": 1,"here. # the asciinema process": 1,"send-keys -t "$session_name" "echo 'welcome": 1,"send commands to the new": 1,"<session_name> <task_file> # # description:": 1,"then echo "starting new tmux": 1,"stopping asciinema recording..." # the": 1,"# the pid is passed": 1,"# when tmux session exits,": 1,"tmux send-keys -t "$session_name" "$gemini_invocation": 1,"to a tmux session #": 1,"session, # optionally creating a": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"# ============================================================================== # # file:": 1,"passed from boot.sh, so we": 1,"optionally creating a new session": 1,"============================================================================== # # file: run_gemini_session.sh": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"the tmux session tmux attach-session": 1,"! tmux has-session -t "$session_name"": 1,"closely related to `start_development_session.sh` #": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"gemini cli invocation method (bunx": 1,""$session_name" "echo 'loading task from": 1,"the gemini command if !": 1,"--approval-mode default, --checkpointing # using": 1,"@google/gemini-cli" #if command -v bun": 1,"runs the gemini cli within": 1,"tmux has-session -t "$session_name" 2>/dev/null;": 1,"default, --checkpointing # using --prompt-interactive": 1,"the asciinema process is managed": 1,"<task_file> # # description: this": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" #": 1,"gemini cli within a `tmux`": 1,"asciinema recording echo "tmux session": 1,"tmux attach-session -t "$session_name" #": 1,"attach to the tmux session": 1,"and run the gemini command": 1,"attach to a tmux session": 1,"or attaching to an existing": 1,"it will create it and": 1,"script runs the gemini cli": 1,"#fi gemini_invocation="./gemini_cli_recent.sh" # start or": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh": 1,"# description: this script runs": 1,"development session!'" c-m tmux send-keys": 1,"# incorporating best practices: --all-files,": 1,"asciinema recording..." # the pid": 1,"a tmux session # if": 1,"from $task_file...'" c-m tmux send-keys": 1,"task from $task_file...'" c-m tmux": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"-t "$session_name" "echo 'loading task": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"incorporating best practices: --all-files, --approval-mode": 1,"echo "starting new tmux session:": 1,"# ============================================================================== session_name="$2" task_file="$3" #": 1,"session or attaching to an": 1,"echo "attaching to existing tmux": 1,"the gemini cli within a": 1,"# one. it's closely related": 1,"best practices: --all-files, --approval-mode default,": 1,"a new session or attaching": 1,"--checkpointing # using --prompt-interactive to": 1,"determine gemini cli invocation method": 1,"kill it here. # the": 1,"stop asciinema recording echo "tmux": 1,"when tmux session exits, stop": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"tmux send-keys -t "$session_name" "echo": 2,"create it and run the": 1,"$session_name" fi # attach to": 1,""echo 'welcome to the gemini": 1,"related to `start_development_session.sh` # (formerly": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"command -v bun &> /dev/null;then": 1,"to continue the session after": 1,"--prompt-interactive \"@$task_file\"" c-m else echo": 1,"process is managed by boot.sh": 1,"file tmux send-keys -t "$session_name"": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"# optionally creating a new": 1,"pid is passed from boot.sh,": 1,"cli within a `tmux` session,": 1,""$session_name" # send commands to": 1,"echo "tmux session exited. stopping": 1,"method (bunx or npx) #gemini_invocation="npx": 1,"a `tmux` session, # optionally": 1      }
,
      "7-gram": {
"# when tmux session exits, stop asciinema": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"-t "$session_name" "echo 'loading task from $task_file...'"": 1,"session: $session_name" fi # attach to the": 1,"the task file tmux send-keys -t "$session_name"": 1,""$session_name" # send commands to the new": 1,"tmux session: $session_name" fi # attach to": 1,"#!/usr/bin/env bash # ============================================================================== # # file:": 1,"# optionally creating a new session or": 1,""$session_name" 2>/dev/null; then echo "starting new tmux": 1,"here. # the asciinema process is managed": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"recording echo "tmux session exited. stopping asciinema": 1,"tmux send-keys -t "$session_name" "echo 'loading task": 1,"run the gemini command if ! tmux": 1,"# using --prompt-interactive to continue the session": 1,"to the tmux session tmux attach-session -t": 1,""attaching to existing tmux session: $session_name" fi": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"and run the gemini command if !": 1,"-s "$session_name" # send commands to the": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"existing tmux session: $session_name" fi # attach": 1,"will create it and run the gemini": 1,"the session after loading the task file": 1,"the gemini cli within a `tmux` session,": 1,"fi # attach to the tmux session": 1,"process is managed by boot.sh echo "asciinema": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"pid is passed from boot.sh, so we": 1,"best practices: --all-files, --approval-mode default, --checkpointing #": 1,"exited. stopping asciinema recording..." # the pid": 1,"# one. it's closely related to `start_development_session.sh`": 1,"$session_name" tmux new-session -d -s "$session_name" #": 1,"# send commands to the new tmux": 1,"tmux session # if the session doesn't": 1,"to a tmux session # if the": 1,"# # description: this script runs the": 1,"so we don't need to kill it": 1,"loading the task file tmux send-keys -t": 1,"an existing # one. it's closely related": 1,"it will create it and run the": 1,"creating a new session or attaching to": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"session # if the session doesn't exist,": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"session after loading the task file tmux": 1,"when tmux session exits, stop asciinema recording": 1,""echo 'loading task from $task_file...'" c-m tmux": 1,"# incorporating best practices: --all-files, --approval-mode default,": 1,"echo "tmux session exited. stopping asciinema recording..."": 1,"session: $session_name" tmux new-session -d -s "$session_name"": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"<session_name> <task_file> # # description: this script": 1,"new tmux session: $session_name" tmux new-session -d": 1,"the session doesn't exist, it will create": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"a tmux session # if the session": 1,"# the pid is passed from boot.sh,": 1,""tmux session exited. stopping asciinema recording..." #": 1,"or attach to a tmux session #": 1,"c-m else echo "attaching to existing tmux": 1,"practices: --all-files, --approval-mode default, --checkpointing # using": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"# description: this script runs the gemini": 1,"gemini cli within a `tmux` session, #": 1,"create it and run the gemini command": 1,"this script runs the gemini cli within": 1,"to continue the session after loading the": 1,"to existing tmux session: $session_name" fi #": 1,"session # incorporating best practices: --all-files, --approval-mode": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"@google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach": 1,"don't need to kill it here. #": 1,"============================================================================== # # file: run_gemini_session.sh # #": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"#fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to": 1,""$session_name" # when tmux session exits, stop": 1,"-t "$session_name" 2>/dev/null; then echo "starting new": 1,"'loading task from $task_file...'" c-m tmux send-keys": 1,"or attaching to an existing # one.": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start": 1,"# the asciinema process is managed by": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"using --prompt-interactive to continue the session after": 1,"# # file: run_gemini_session.sh # # usage:": 1,"to the gemini development session!'" c-m tmux": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or": 1,"tmux send-keys -t "$session_name" "echo 'welcome to": 1,"tmux attach-session -t "$session_name" # when tmux": 1,"`tmux` session, # optionally creating a new": 1,"it here. # the asciinema process is": 1,"attach to the tmux session tmux attach-session": 1,"$session_name" fi # attach to the tmux": 1,"then echo "starting new tmux session: $session_name"": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"the gemini development session!'" c-m tmux send-keys": 1,"it and run the gemini command if": 1,"cli within a `tmux` session, # optionally": 1,"-t "$session_name" # when tmux session exits,": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"new-session -d -s "$session_name" # send commands": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"echo "starting new tmux session: $session_name" tmux": 1,"if the session doesn't exist, it will": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"is passed from boot.sh, so we don't": 1,"tmux session exits, stop asciinema recording echo": 1,"attach to a tmux session # if": 1,"exist, it will create it and run": 1,"managed by boot.sh echo "asciinema recording stopped."": 1,"the asciinema process is managed by boot.sh": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"new tmux session # incorporating best practices:": 1,"gemini_invocation="./gemini_cli_recent.sh" # start or attach to a": 1,"task from $task_file...'" c-m tmux send-keys -t": 1,"script runs the gemini cli within a": 1,"we don't need to kill it here.": 1,"exits, stop asciinema recording echo "tmux session": 1,"# attach to the tmux session tmux": 1,"--checkpointing # using --prompt-interactive to continue the": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"the new tmux session # incorporating best": 1,"command if ! tmux has-session -t "$session_name"": 1,"asciinema process is managed by boot.sh echo": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"task file tmux send-keys -t "$session_name" "echo": 1,"send commands to the new tmux session": 1,"commands to the new tmux session #": 1,"tmux session # incorporating best practices: --all-files,": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to": 1,"# if the session doesn't exist, it": 1,"task_file="$3" # determine gemini cli invocation method": 1,"development session!'" c-m tmux send-keys -t "$session_name"": 1,"existing # one. it's closely related to": 1,""echo 'welcome to the gemini development session!'"": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"the pid is passed from boot.sh, so": 1,"else echo "attaching to existing tmux session:": 1,"new session or attaching to an existing": 1,"tmux session: $session_name" tmux new-session -d -s": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"doesn't exist, it will create it and": 1,"default, --checkpointing # using --prompt-interactive to continue": 1,"bash # ============================================================================== # # file: run_gemini_session.sh": 1,"asciinema recording echo "tmux session exited. stopping": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"# start or attach to a tmux": 1,"file tmux send-keys -t "$session_name" "echo 'welcome": 1,"attach-session -t "$session_name" # when tmux session": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh"": 1,"# determine gemini cli invocation method (bunx": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"within a `tmux` session, # optionally creating": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,""$session_name" "echo 'welcome to the gemini development": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"attaching to an existing # one. it's": 1,"session exited. stopping asciinema recording..." # the": 1,"tmux new-session -d -s "$session_name" # send": 1,"gemini cli invocation method (bunx or npx)": 1,"stopping asciinema recording..." # the pid is": 1,"gemini command if ! tmux has-session -t": 1,"passed from boot.sh, so we don't need": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"#if command -v bun &> /dev/null;then #": 1,"asciinema recording..." # the pid is passed": 1,"tmux session tmux attach-session -t "$session_name" #": 1,"continue the session after loading the task": 1,"boot.sh, so we don't need to kill": 1,"recording..." # the pid is passed from": 1,""$session_name" "echo 'loading task from $task_file...'" c-m": 1,"session tmux attach-session -t "$session_name" # when": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"echo "attaching to existing tmux session: $session_name"": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # #": 1,"from boot.sh, so we don't need to": 1,"one. it's closely related to `start_development_session.sh` #": 1,"2>/dev/null; then echo "starting new tmux session:": 1,"the gemini command if ! tmux has-session": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"-t "$session_name" "echo 'welcome to the gemini": 1,"a `tmux` session, # optionally creating a": 1,""starting new tmux session: $session_name" tmux new-session": 1,"gemini development session!'" c-m tmux send-keys -t": 1,"send-keys -t "$session_name" "echo 'welcome to the": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description:": 1,"need to kill it here. # the": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"\"@$task_file\"" c-m else echo "attaching to existing": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" #": 1,"--prompt-interactive to continue the session after loading": 1,"determine gemini cli invocation method (bunx or": 1,"to an existing # one. it's closely": 1,"runs the gemini cli within a `tmux`": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"stop asciinema recording echo "tmux session exited.": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"start or attach to a tmux session": 1,"# ============================================================================== # # file: run_gemini_session.sh #": 1,"is managed by boot.sh echo "asciinema recording": 1,"<task_file> # # description: this script runs": 1,"optionally creating a new session or attaching": 1,"after loading the task file tmux send-keys": 1,"the tmux session tmux attach-session -t "$session_name"": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"session, # optionally creating a new session": 1,"a new session or attaching to an": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"send-keys -t "$session_name" "echo 'loading task from": 1,"-d -s "$session_name" # send commands to": 1,"to the new tmux session # incorporating": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"'welcome to the gemini development session!'" c-m": 1,"to kill it here. # the asciinema": 1,"description: this script runs the gemini cli": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"session exits, stop asciinema recording echo "tmux": 1,"kill it here. # the asciinema process": 1,"it's closely related to `start_development_session.sh` # (formerly": 1,"session or attaching to an existing #": 1,"session doesn't exist, it will create it": 1      }
,
      "11-gram": {
"boot.sh, so we don't need to kill it here. # the": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"using --prompt-interactive to continue the session after loading the task file": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # #": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"passed from boot.sh, so we don't need to kill it here.": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"@google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"it will create it and run the gemini command if !": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh"": 1,"pid is passed from boot.sh, so we don't need to kill": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"a tmux session # if the session doesn't exist, it will": 1,"new session or attaching to an existing # one. it's closely": 1,"gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the": 1,"-s "$session_name" # send commands to the new tmux session #": 1,"script runs the gemini cli within a `tmux` session, # optionally": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"send commands to the new tmux session # incorporating best practices:": 1,"it here. # the asciinema process is managed by boot.sh echo": 1,"start or attach to a tmux session # if the session": 1,"to existing tmux session: $session_name" fi # attach to the tmux": 1,"<session_name> <task_file> # # description: this script runs the gemini cli": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or": 1,"the session doesn't exist, it will create it and run the": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"within a `tmux` session, # optionally creating a new session or": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"asciinema recording..." # the pid is passed from boot.sh, so we": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"if the session doesn't exist, it will create it and run": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"#fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session #": 1,"a `tmux` session, # optionally creating a new session or attaching": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" #": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"or attach to a tmux session # if the session doesn't": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,"attach to a tmux session # if the session doesn't exist,": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description:": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"commands to the new tmux session # incorporating best practices: --all-files,": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"tmux session # if the session doesn't exist, it will create": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the": 1,"recording..." # the pid is passed from boot.sh, so we don't": 1,"create it and run the gemini command if ! tmux has-session": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,"# description: this script runs the gemini cli within a `tmux`": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,"optionally creating a new session or attaching to an existing #": 1,"it and run the gemini command if ! tmux has-session -t": 1,"# if the session doesn't exist, it will create it and": 1,"kill it here. # the asciinema process is managed by boot.sh": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"description: this script runs the gemini cli within a `tmux` session,": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,"# the pid is passed from boot.sh, so we don't need": 1,"session, # optionally creating a new session or attaching to an": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"or attaching to an existing # one. it's closely related to": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,"`tmux` session, # optionally creating a new session or attaching to": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"tmux session: $session_name" fi # attach to the tmux session tmux": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"<task_file> # # description: this script runs the gemini cli within": 1,"gemini cli within a `tmux` session, # optionally creating a new": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach": 1,"this script runs the gemini cli within a `tmux` session, #": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"runs the gemini cli within a `tmux` session, # optionally creating": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs": 1,"# when tmux session exits, stop asciinema recording echo "tmux session": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"and run the gemini command if ! tmux has-session -t "$session_name"": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"-d -s "$session_name" # send commands to the new tmux session": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"don't need to kill it here. # the asciinema process is": 1,"the gemini cli within a `tmux` session, # optionally creating a": 1,"session or attaching to an existing # one. it's closely related": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"cli within a `tmux` session, # optionally creating a new session": 1,"to kill it here. # the asciinema process is managed by": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"# the asciinema process is managed by boot.sh echo "asciinema recording": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"new-session -d -s "$session_name" # send commands to the new tmux": 1,"creating a new session or attaching to an existing # one.": 1,"# optionally creating a new session or attaching to an existing": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"# using --prompt-interactive to continue the session after loading the task": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"from boot.sh, so we don't need to kill it here. #": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"a new session or attaching to an existing # one. it's": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"to an existing # one. it's closely related to `start_development_session.sh` #": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"session # if the session doesn't exist, it will create it": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"session doesn't exist, it will create it and run the gemini": 1,"the session after loading the task file tmux send-keys -t "$session_name"": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage:": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"so we don't need to kill it here. # the asciinema": 1,"to continue the session after loading the task file tmux send-keys": 1,"continue the session after loading the task file tmux send-keys -t": 1,"doesn't exist, it will create it and run the gemini command": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"# attach to the tmux session tmux attach-session -t "$session_name" #": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"need to kill it here. # the asciinema process is managed": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"# # description: this script runs the gemini cli within a": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"we don't need to kill it here. # the asciinema process": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,""$session_name" # send commands to the new tmux session # incorporating": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"exist, it will create it and run the gemini command if": 1,"--prompt-interactive to continue the session after loading the task file tmux": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"to a tmux session # if the session doesn't exist, it": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"is passed from boot.sh, so we don't need to kill it": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,"# start or attach to a tmux session # if the": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"session exited. stopping asciinema recording..." # the pid is passed from": 1,"will create it and run the gemini command if ! tmux": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,"existing tmux session: $session_name" fi # attach to the tmux session": 1,"tmux new-session -d -s "$session_name" # send commands to the new": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,""attaching to existing tmux session: $session_name" fi # attach to the": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"# send commands to the new tmux session # incorporating best": 1,"the pid is passed from boot.sh, so we don't need to": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1      }
,
      "13-gram": {
"or attaching to an existing # one. it's closely related to `start_development_session.sh` #": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,"# # description: this script runs the gemini cli within a `tmux` session,": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"attach to a tmux session # if the session doesn't exist, it will": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"a new session or attaching to an existing # one. it's closely related": 1,"tmux session # if the session doesn't exist, it will create it and": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"# send commands to the new tmux session # incorporating best practices: --all-files,": 1,"session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh"": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"description: this script runs the gemini cli within a `tmux` session, # optionally": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"from boot.sh, so we don't need to kill it here. # the asciinema": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" #": 1,"#fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the": 1,"the pid is passed from boot.sh, so we don't need to kill it": 1,"a `tmux` session, # optionally creating a new session or attaching to an": 1,"to existing tmux session: $session_name" fi # attach to the tmux session tmux": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new": 1,"boot.sh, so we don't need to kill it here. # the asciinema process": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"the session doesn't exist, it will create it and run the gemini command": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" #": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file>": 1,"pid is passed from boot.sh, so we don't need to kill it here.": 1,"creating a new session or attaching to an existing # one. it's closely": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"new session or attaching to an existing # one. it's closely related to": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"the gemini cli within a `tmux` session, # optionally creating a new session": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"# if the session doesn't exist, it will create it and run the": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading the task": 1,"runs the gemini cli within a `tmux` session, # optionally creating a new": 1,"-s "$session_name" # send commands to the new tmux session # incorporating best": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"or attach to a tmux session # if the session doesn't exist, it": 1,"to kill it here. # the asciinema process is managed by boot.sh echo": 1,"is passed from boot.sh, so we don't need to kill it here. #": 1,"session # if the session doesn't exist, it will create it and run": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"need to kill it here. # the asciinema process is managed by boot.sh": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"optionally creating a new session or attaching to an existing # one. it's": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the task file": 1,"gemini cli within a `tmux` session, # optionally creating a new session or": 1,"-d -s "$session_name" # send commands to the new tmux session # incorporating": 1,"create it and run the gemini command if ! tmux has-session -t "$session_name"": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so we don't": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"so we don't need to kill it here. # the asciinema process is": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"<session_name> <task_file> # # description: this script runs the gemini cli within a": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description:": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"doesn't exist, it will create it and run the gemini command if !": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,""$session_name" # send commands to the new tmux session # incorporating best practices:": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"start or attach to a tmux session # if the session doesn't exist,": 1,"# when tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file>": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"session or attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to the tmux": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,"session, # optionally creating a new session or attaching to an existing #": 1,"# the pid is passed from boot.sh, so we don't need to kill": 1,"asciinema recording..." # the pid is passed from boot.sh, so we don't need": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"to a tmux session # if the session doesn't exist, it will create": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"it here. # the asciinema process is managed by boot.sh echo "asciinema recording": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"passed from boot.sh, so we don't need to kill it here. # the": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"we don't need to kill it here. # the asciinema process is managed": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"# attach to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"cli within a `tmux` session, # optionally creating a new session or attaching": 1,""attaching to existing tmux session: $session_name" fi # attach to the tmux session": 1,"commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,"the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"--prompt-interactive to continue the session after loading the task file tmux send-keys -t": 1,"exist, it will create it and run the gemini command if ! tmux": 1,"<task_file> # # description: this script runs the gemini cli within a `tmux`": 1,"to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach": 1,"a tmux session # if the session doesn't exist, it will create it": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux": 1,"don't need to kill it here. # the asciinema process is managed by": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script": 1,"`tmux` session, # optionally creating a new session or attaching to an existing": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the": 1,"continue the session after loading the task file tmux send-keys -t "$session_name" "echo": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,"@google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if": 1,"session doesn't exist, it will create it and run the gemini command if": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start": 1,"here. # the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,"and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"# optionally creating a new session or attaching to an existing # one.": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"if the session doesn't exist, it will create it and run the gemini": 1,"this script runs the gemini cli within a `tmux` session, # optionally creating": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"kill it here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is passed from": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # #": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"# start or attach to a tmux session # if the session doesn't": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"it will create it and run the gemini command if ! tmux has-session": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,"to continue the session after loading the task file tmux send-keys -t "$session_name"": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the": 1,"it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"within a `tmux` session, # optionally creating a new session or attaching to": 1,"# description: this script runs the gemini cli within a `tmux` session, #": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,"script runs the gemini cli within a `tmux` session, # optionally creating a": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"recording..." # the pid is passed from boot.sh, so we don't need to": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"# using --prompt-interactive to continue the session after loading the task file tmux": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name>": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session #": 1,"will create it and run the gemini command if ! tmux has-session -t": 1,"using --prompt-interactive to continue the session after loading the task file tmux send-keys": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> #": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach to the": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1      }
,
      "19-gram": {
"task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching": 1,"gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one.": 1,"gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session doesn't exist, it": 1,"<asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating": 1,"tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading": 1,"<session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a": 1,"# one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli": 1,"-t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi": 1,"new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default,": 1,"method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start": 1,"send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive": 1,"asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the": 1,"new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # #": 1,"session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh,": 1,"new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating": 1,"session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop": 1,"2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new": 1,"# using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to": 1,"# ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs": 1,"bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script": 1,""tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill": 1,"and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name"": 1,"within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely": 1,"# send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive": 1,"practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys": 1,"$session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files,": 1,"c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default": 1,"<task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new": 1,"exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo": 1,"(bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or": 1,"exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so": 1,"loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t": 1,""$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the": 1,"passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh": 1,""echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux": 1,"determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli"": 1,"$session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema": 1,"--model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to": 1,"or attach to a tmux session # if the session doesn't exist, it will create it and run the": 1,"to a tmux session # if the session doesn't exist, it will create it and run the gemini command": 1,"./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, # optionally": 1,"new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after": 1,"#!/usr/bin/env bash # ============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this": 1,"# if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session": 1,"# optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` #": 1,"the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing #": 1,"is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed by": 1,"# file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli": 1,"`tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related to": 1,"existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini": 1,"tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping": 1,"session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the": 1,"# # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux`": 1,"session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null;": 1,"attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3"": 1,"--checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session": 1,"--approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the": 1,"-t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\""": 1,""starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session #": 1,"we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema recording stopped."": 1,"# # description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session": 1,"-t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'"": 1,"gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi": 1,"will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new": 1,"recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need": 1,"task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo": 1,"the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session": 1,"--prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux": 1,"it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session:": 1,"one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation": 1,"attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux": 1,"using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the": 1,"stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we": 1,"# attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo": 1,"command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s": 1,"bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the": 1,"session # if the session doesn't exist, it will create it and run the gemini command if ! tmux": 1,"-s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing #": 1,"#if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session": 1,"has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands": 1,"from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to": 1,"after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys": 1,"usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session, #": 1,"echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" #": 1,"session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode": 1,"(formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if": 1,"a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). #": 1,"-t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the": 1,"existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session": 1,"to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" #": 1,"'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys": 1,"related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or": 1,"file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading": 1,"optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly": 1,"# incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task": 1,"to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx)": 1,""$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach": 1,""$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi #": 1,"else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name"": 1,"continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'"": 1,"it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method": 1,"boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema": 1,"session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema": 1,"run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux": 1,"when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed": 1,"development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash": 1,"`start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx": 1,"a tmux session # if the session doesn't exist, it will create it and run the gemini command if": 1,"closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx": 1,"tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..."": 1,"c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux": 1,"tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send": 1,""$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid": 1,"start or attach to a tmux session # if the session doesn't exist, it will create it and run": 1,"gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d": 1,"&> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session": 1,"#fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session doesn't exist, it will create": 1,"the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session": 1,""attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when": 1,"c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t": 1,"npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to": 1,"# start or attach to a tmux session # if the session doesn't exist, it will create it and": 1,"session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then": 1,"`boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command": 1,"script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an": 1,"it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting": 1,"session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux": 1,"tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best": 1,"--approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name"": 1,"tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode": 1,"to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development": 1,"-t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to": 1,"$task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing": 1,"stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here. #": 1,"default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux": 1,"# determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx": 1,"to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session": 1,"attach to a tmux session # if the session doesn't exist, it will create it and run the gemini": 1,"tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing": 1,"runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to an existing": 1,"to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t": 1,"============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &>": 1,"fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording": 1,"to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux": 1,"then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux": 1,"an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine": 1,"# # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v": 1,"/dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session doesn't": 1,"cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh"": 1,"! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" #": 1,"doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then": 1,"tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task": 1,"session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ==============================================================================": 1,"send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name"": 1,"tmux session # if the session doesn't exist, it will create it and run the gemini command if !": 1,"-d -s "$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing": 1,"or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`). # # ============================================================================== session_name="$2"": 1,"cli within a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's": 1,"this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching to": 1,"best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux": 1,"the tmux session tmux attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited.": 1,""echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else": 1,"command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session #": 1,"tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from": 1,"attach-session -t "$session_name" # when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." #": 1,"--all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t": 1,"the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t "$session_name"": 1,""$session_name" # send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using": 1,"# the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process": 1,"--checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome": 1,"@google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux": 1,"to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the": 1,"the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m": 1,""$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m": 1,"a `tmux` session, # optionally creating a new session or attaching to an existing # one. it's closely related": 1,"description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or attaching": 1,"from boot.sh, so we don't need to kill it here. # the asciinema process is managed by boot.sh echo": 1,"send commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to": 1,"# usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a `tmux` session,": 1,"pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is managed": 1,"echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to": 1,"or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach": 1,"run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within a": 1,"# # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini": 1,"asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't": 1,"send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from": 1,"tmux session: $session_name" fi # attach to the tmux session tmux attach-session -t "$session_name" # when tmux session exits,": 1,"session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session # incorporating best practices:": 1,"# ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun": 1,"task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then #": 1,"so we don't need to kill it here. # the asciinema process is managed by boot.sh echo "asciinema recording": 1,"============================================================================== # # file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the": 1,""$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m": 1,"# (formerly `boot.sh`). # # ============================================================================== session_name="$2" task_file="$3" # determine gemini cli invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli"": 1,"# when tmux session exits, stop asciinema recording echo "tmux session exited. stopping asciinema recording..." # the pid is": 1,"--prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini": 1,"the gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name"": 1,"# description: this script runs the gemini cli within a `tmux` session, # optionally creating a new session or": 1,"# gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session doesn't exist,": 1,"#gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a": 1,"\"@$task_file\"" c-m else echo "attaching to existing tmux session: $session_name" fi # attach to the tmux session tmux attach-session": 1,"the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema process is": 1,"tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo "attaching to existing tmux session:": 1,"gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session doesn't exist, it will create it": 1,"recording..." # the pid is passed from boot.sh, so we don't need to kill it here. # the asciinema": 1,"'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation --model=gemini-2.5-flash --approval-mode default --checkpointing --prompt-interactive \"@$task_file\"" c-m else echo": 1,"commands to the new tmux session # incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue": 1,"@google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if the session doesn't exist, it will": 1,"incorporating best practices: --all-files, --approval-mode default, --checkpointing # using --prompt-interactive to continue the session after loading the task file": 1,"-v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" # start or attach to a tmux session # if": 1,"default, --checkpointing # using --prompt-interactive to continue the session after loading the task file tmux send-keys -t "$session_name" "echo": 1,"echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name" # send commands to the new tmux session": 1,"invocation method (bunx or npx) #gemini_invocation="npx @google/gemini-cli" #if command -v bun &> /dev/null;then # gemini_invocation="bunx @google/gemini-cli" #fi gemini_invocation="./gemini_cli_recent.sh" #": 1,"gemini development session!'" c-m tmux send-keys -t "$session_name" "echo 'loading task from $task_file...'" c-m tmux send-keys -t "$session_name" "$gemini_invocation": 1,"creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh` # (formerly `boot.sh`).": 1,"file: run_gemini_session.sh # # usage: ./scripts/session/run_gemini_session.sh <asciinema_rec_file> <session_name> <task_file> # # description: this script runs the gemini cli within": 1,"if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux session: $session_name" tmux new-session -d -s "$session_name"": 1,"session, # optionally creating a new session or attaching to an existing # one. it's closely related to `start_development_session.sh`": 1,"create it and run the gemini command if ! tmux has-session -t "$session_name" 2>/dev/null; then echo "starting new tmux": 1,"exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it here.": 1,"session exited. stopping asciinema recording..." # the pid is passed from boot.sh, so we don't need to kill it": 1,"the task file tmux send-keys -t "$session_name" "echo 'welcome to the gemini development session!'" c-m tmux send-keys -t "$session_name"": 1,"if the session doesn't exist, it will create it and run the gemini command if ! tmux has-session -t": 1      }
,
      "23-gram": {
